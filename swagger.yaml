openapi: 3.0.1
info:
  title: PortX ORCA Account Management
  description: "PortX ORCA semantic and interaction is based on ISO 20022 and restricted to the US banking domain. The scope covers the following communication flows: bank account opening, maintenance, closing and reporting.\nIn many cases, the financial institution will require additional documentation that is available as PDF or Word document. The recommended solution is to group one ORCA message (for example the account opening request) with these accompanying documents in one file archive. The archive establishes the link between the different documents.\nEvery ORCA request message has an attribute to support the ISO 20022 digital signature. \n"
  contact:
    email: betiana.darderes@portx.io
  version: 0.13.2
servers:
  - url: /finxact-portx-cbs-connector/1.0
    description: SwaggerHub API Auto Mocking
security:
  - jwt: []
  - openIdConnect: []
tags:
  - name: Accounts
    description: Bank Account Management
  - name: Parties
    description: Person and Organization Management
  - name: Transactions
    description: Account Transactions Management
  - name: Products
    description: Financial Product Management
  - name: Cards
    description: Card Management
  - name: Loans
    description: Loan Management
  - name: Address Book
    description: Postal Address Mangement
paths:
  /accounts:
    get:
      tags:
        - Accounts
      summary: Retrieves a list of accounts matching the parameters.
      operationId: findAccounts
      parameters:
        - name: accountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: partyId.eq
          in: query
          description: Returns the customer accounts
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountOwnershipType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: contact.lastName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: contact.firstName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: owner.lastName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: owner.firstName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: person.lastName.eq
          in: query
          description: An account related person with same last name.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: person.firstName.eq
          in: query
          description: An account related person with same first name.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: party.name.inc
          in: query
          description: A related party name includes the substring provided.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: accountType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: accountBranchCode.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: status.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: accountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: |
            Accounts for which the expression evaluates to true were returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountDescriptor'
        "400":
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Accounts
      summary: Opens an Account
      operationId: openBankingAccount
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: Core-Validation-Mode
          in: header
          description: |
            <ENFORCING|PERMISSIVE|DISABLED> Indicates how the API  validates requests against the core validation request policy.
             ENFORCING: The API validates all requests against the core validation request policy. The API only sends requests that pass validation to the back-end core service.
             PERMISSIVE: The API validates all requests against the validation request policy. The API sends all requests to the back-end service, regardless of whether they pass or fail the core validation.
             DISABLED: The API does not validate any requests against the validation request policy. The API gateway sends all requests to the core back-end service.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
        required: true
      responses:
        "202":
          description: Account information was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
            application/vnd.portx-orca+json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        "400":
          description: Bad Request. The account could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/deposits:
    post:
      tags:
        - Transactions
      summary: Creates a Credit Transaction
      operationId: createDeposit
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositRequest'
        required: true
      responses:
        "202":
          description: Account information was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        "400":
          description: Bad Request. The account could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/withdrawals:
    post:
      tags:
        - Transactions
      summary: Creates a Debit Transaction
      operationId: createWithdrawal
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawalRequest'
        required: true
      responses:
        "202":
          description: Account information was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        "400":
          description: Bad Request. The account could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}:
    get:
      tags:
        - Accounts
      summary: Retrieves an Account
      operationId: findAccount
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Accounts
      summary: Replaces an Account by Id.
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: replaceAccountById
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: Core-Validation-Mode
          in: header
          description: |
            <ENFORCING|PERMISSIVE|DISABLED> Indicates how the API  validates requests against the core validation request policy.
             ENFORCING: The API validates all requests against the core validation request policy. The API only sends requests that pass validation to the back-end core service.
             PERMISSIVE: The API validates all requests against the validation request policy. The API sends all requests to the back-end service, regardless of whether they pass or fail the core validation.
             DISABLED: The API does not validate any requests against the validation request policy. The API gateway sends all requests to the core back-end service.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        "200":
          description: Replaced account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
            application/vnd.portx-orca+json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Accounts
      summary: Updates an Account
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateAccount
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: Core-Validation-Mode
          in: header
          description: |
            <ENFORCING|PERMISSIVE|DISABLED> Indicates how the API  validates requests against the core validation request policy.
             ENFORCING: The API validates all requests against the core validation request policy. The API only sends requests that pass validation to the back-end core service.
             PERMISSIVE: The API validates all requests against the validation request policy. The API sends all requests to the back-end service, regardless of whether they pass or fail the core validation.
             DISABLED: The API does not validate any requests against the validation request policy. The API gateway sends all requests to the core back-end service.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Updated account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
            application/vnd.portx-orca+json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/balances:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Balances
      operationId: findAccountBalances
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalanceResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/transactions:
    get:
      tags:
        - Transactions
      summary: Retrieves Account Transactions
      operationId: findAccountTransactions
      parameters:
        - name: transactionId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionId'
        - name: paymentId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: transactionCode.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: counterparty.name.inc
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: paymentId.isNull
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
        - name: status.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionStatus'
        - name: transactionType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionType'
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: creationDate.lte
          in: query
          description: Input cycle date less than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: creationDate.gte
          in: query
          description: Input cycle date greater than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountTransactionsResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/identifiers:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Identifiers
      operationId: findAccountIdentifiers
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountIdentifiersResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/parties:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Parties
      operationId: findAccountRelatedParties
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPartyResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/owners:
    get:
      tags:
        - Accounts
      summary: Retrieves Account Owners
      operationId: findAccountOwners
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountOwnerResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/cards:
    get:
      tags:
        - Cards
      summary: Retrieves Account Cards
      operationId: findAccountCards
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPaymentCardResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/holds:
    get:
      tags:
        - Account Holds
      summary: Retrieves Account Holds
      operationId: findAccountHolds
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHoldResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Account Holds
      summary: Request an account hold
      operationId: createAccountHold
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountHoldRequest'
        required: true
      responses:
        "202":
          description: Account hold request was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHold'
        "400":
          description: Bad Request. The account could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /holds/{holdId}:
    get:
      tags:
        - Account Holds
      summary: Retrieves an account hold by id.
      operationId: findAccountHoldById
      parameters:
        - name: holdId
          in: path
          description: Account Hold Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching hold was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHold'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Account Holds
      summary: Updates an account hold
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateAccountHold
      parameters:
        - name: holdId
          in: path
          description: Account Hold Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Updated account hold
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHold'
        "400":
          description: Bad Request. Hold Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching account hold were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Account Holds
      summary: Account Hold Removal
      description: Deletes an account hold
      operationId: deleteAccountHold
      parameters:
        - name: holdId
          in: path
          description: Account Hold Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "204":
          description: The account hold was removed.
        "400":
          description: Bad Request. Hold Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching account hold were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons:
    get:
      tags:
        - Parties
      summary: Retrieves a list of persons matching the parameters.
      operationId: findPersons
      parameters:
        - name: name.inc
          in: query
          description: The person name includes the substring provided.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: lastName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: firstName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: birthDate.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: status.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyStatus'
        - name: phoneNumber.eq
          in: query
          description: Any phone number equals to.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PhoneNumber'
        - name: accountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: cardNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PrimaryAccountNumber'
        - name: tin.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: ssn.eq
          in: query
          description: Social Security Number
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: ssn.last4
          in: query
          description: Social Security Number last four digits.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: email.eq
          in: query
          description: Email equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: addressLine.inc
          in: query
          description: Any address line of any postal address includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: postCode.eq
          in: query
          description: Any postal address with post code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: country.eq
          in: query
          description: Any postal address with Country code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: countrySubDivision.inc
          in: query
          description: Any postal address with country subdivision includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: townName.inc
          in: query
          description: Any postal address with town name includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: personId.eq
          in: query
          description: System id equals to
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: audit.lastModificationDate.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: audit.lastModificationDate.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: cardNumber.last4
          in: query
          description: Card Number last four digits.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: accountNumber.last4
          in: query
          description: Account Number last four digits.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: personRole.eq
          in: query
          description: |
            Retrieves persons with the role required. Possible values: CardHolder, Person.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: Core-Format-Mode
          in: header
          description: |
            <CARD_NUMBER_MASKED|CARD_NUMBER_NOT_MASKED|ID_NOT_MASKED|ID_MASKED|NOT_MASKED|MASKED|> Indicates the format of the API Response.
             CARD_NUMBER_MASKED: Card number masked.
             CARD_NUMBER_NOT_MASKED: Card number not masked.
             ID_NOT_MASKED: Identifiers not masked.
             ID_MASKED: Identifiers masked.
             NOT_MASKED: All fields not masked.
             MASKED: All masked.
          required: false
          schema:
            type: string
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: |
            Resources for which the expression evaluates to true were returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonDescriptor'
            application/vnd.portx-orca.extended+json:
              schema:
                $ref: '#/components/schemas/PersonsResponse'
        "400":
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Parties
      summary: Creates a Person
      operationId: createPerson
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonRequest'
        required: true
      responses:
        "202":
          description: Person information was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "400":
          description: Bad Request. The person information could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons/{personId}:
    get:
      tags:
        - Parties
      summary: Retrieves a Person
      operationId: findPersonById
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching person was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "400":
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Parties
      summary: Updates a Person
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updatePerson
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Updated person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "400":
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons/{personId}/accounts:
    get:
      tags:
        - Accounts
      summary: Retrieves Person Accounts
      operationId: findPersonAccounts
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Matching person was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonAccountResponse'
        "400":
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons/{personId}/statements:
    get:
      tags:
        - Accounts
      summary: Retrieves Person Statement
      operationId: findPersonStatements
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Matching person was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonStatementResponse'
        "400":
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons/{personId}/loans:
    get:
      tags:
        - Loans
      summary: Retrieves personal loan exposure.
      operationId: findPersonLoans
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching person was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonLoanResponse'
        "400":
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards/{cardId}/activations:
    post:
      tags:
        - Cards
      summary: Requires a Payment Card Activation
      description: Requires a Payment Card Activation
      operationId: activatePaymentCard
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCardActivationRequest'
        required: true
      responses:
        "202":
          description: Payment card activation was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        "400":
          description: Bad Request. The card information could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons/{personId}/cards:
    get:
      tags:
        - Cards
      summary: Retrieves the cards associated with a specific person.
      operationId: findPersonCards
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching person was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonCardResponse'
        "400":
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Cards
      summary: Creates a card associated with a specific person.
      description: "Creates a personal payment card related to one or multiple accounts.  The person may be not an account owner (an additional). For debit cards, the fund account should be provided in the request."
      operationId: createPersonalPaymentCard
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCardRequest'
        required: true
      responses:
        "202":
          description: Payment card information was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        "400":
          description: Bad Request. The card information could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons/{personId}/relationships:
    get:
      tags:
        - Relationships
      summary: Retrieves Person Relationships
      description: Retrieves all the bank relationships the person may have.
      operationId: findPersonRelationships
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching person was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonCustomerRelationshipResponse'
        "400":
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations:
    get:
      tags:
        - Parties
      summary: Retrieves a list of organizations matching the parameters.
      operationId: findOrganizations
      parameters:
        - name: name.inc
          in: query
          description: The organization name includes the substring provided.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: accountNumber.eq
          in: query
          description: The organization owns an account with the number.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: tin.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: email.eq
          in: query
          description: Email equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: addressLine.inc
          in: query
          description: Any address line of any postal address includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: postCode.eq
          in: query
          description: Any postal address with post code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: country.eq
          in: query
          description: Any postal address with country code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: countrySubDivision.inc
          in: query
          description: Any postal address with country subdivision includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: townName.inc
          in: query
          description: Any postal address with town name includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: organizationId.eq
          in: query
          description: System id equals to
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: audit.lastModificationDate.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: dateOfBirth.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: audit.lastModificationDate.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: |
            Resources for which the expression evaluates to true were returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationDescriptor'
        "400":
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Parties
      summary: Creates an Organization
      operationId: createOrganization
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationRequest'
        required: true
      responses:
        "202":
          description: Organization information was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        "400":
          description: Bad Request. The organization information could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations/{organizationId}:
    get:
      tags:
        - Parties
      summary: Retrieves an Organization
      operationId: findOrganizationById
      parameters:
        - name: organizationId
          in: path
          description: Organization Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching organization was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        "400":
          description: Bad Request. Organization Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Parties
      summary: Updates an Organization
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateOrganization
      parameters:
        - name: organizationId
          in: path
          description: Organization Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Updated organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        "400":
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching organizations were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations/{organizationId}/accounts:
    get:
      tags:
        - Accounts
      summary: Retrieves Organization Accounts
      operationId: findOrganizationAccounts
      parameters:
        - name: organizationId
          in: path
          description: Organization Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Matching organization was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationAccountResponse'
        "400":
          description: Bad Request. Organization Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /organizations/{organizationId}/statements:
    get:
      tags:
        - Accounts
      summary: Retrieves Organization Statements
      operationId: findOrganizationStatements
      parameters:
        - name: organizationId
          in: path
          description: Organization Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Matching organization was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationStatementResponse'
        "400":
          description: Bad Request. Organization Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products:
    get:
      tags:
        - Products
      summary: Retrieves Financial Products
      operationId: findAccountFinancialProducts
      parameters:
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        "200":
          description: Matching product was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: No matching product were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Products
      summary: Creates a bank product
      operationId: createProduct
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: Core-Validation-Mode
          in: header
          description: |
            <ENFORCING|PERMISSIVE|DISABLED> Indicates how the API  validates requests against the core validation request policy.
             ENFORCING: The API validates all requests against the core validation request policy. The API only sends requests that pass validation to the back-end core service.
             PERMISSIVE: The API validates all requests against the validation request policy. The API sends all requests to the back-end service, regardless of whether they pass or fail the core validation.
             DISABLED: The API does not validate any requests against the validation request policy. The API gateway sends all requests to the core back-end service.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
        required: true
      responses:
        "202":
          description: Product information was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/vnd.portx-orca+json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Bad Request. The product could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Retrieves a product
      operationId: findProductById
      parameters:
        - name: productId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching product was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Bad Request. Product Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching products were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /relationships:
    get:
      tags:
        - Relationships
      summary: Retrieves a list of relationships matching the parameters.
      operationId: findRelationships
      parameters:
        - name: customer.name.inc
          in: query
          description: The primary customer name includes the substring provided.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: partyId.eq
          in: query
          description: Returns the customer relationships
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: customer.lastName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: customer.firstName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: customer.birthDate.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: customer.phoneNumber.eq
          in: query
          description: Any phone number equals to.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PhoneNumber'
        - name: customer.accountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: customer.tin.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.ssn.eq
          in: query
          description: Social Security Number
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.ssn.last4
          in: query
          description: Social Security Number last four digits.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.email.eq
          in: query
          description: Email equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.addressLine.inc
          in: query
          description: Any address line of any postal address includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.postCode.eq
          in: query
          description: Any postal address with post code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.country.eq
          in: query
          description: Any postal address with Country code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.countrySubDivision.inc
          in: query
          description: Any postal address with country subdivision includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.townName.inc
          in: query
          description: Any postal address with town name includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.personId.eq
          in: query
          description: System id equals to
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: customer.audit.lastModificationDate.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: customer.audit.lastModificationDate.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: |
            Resources for which the expression evaluates to true were returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerRelationship'
        "400":
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Relationships
      summary: Creates a Relationship
      operationId: createRelationship
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRelationshipRequest'
        required: true
      responses:
        "202":
          description: Relationship information was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerRelationship'
        "400":
          description: Bad Request. The relationship information could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /relationships/{relationshipId}:
    get:
      tags:
        - Relationships
      summary: Retrieves a Relationship
      operationId: findRelationshipById
      parameters:
        - name: relationshipId
          in: path
          description: Relationship Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching relationship was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerRelationship'
        "400":
          description: Bad Request. Relationship Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching relationships were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Relationships
      summary: Updates a Relationship
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateRelationship
      parameters:
        - name: relationshipId
          in: path
          description: Relationship Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Updated relationships
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerRelationship'
        "400":
          description: Bad Request. Relationship Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching relationships were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /relationships/{relationshipId}/parties:
    get:
      tags:
        - Relationships
      summary: Retrieves Relationship Parties
      operationId: findRelationshipParties
      parameters:
        - name: relationshipId
          in: path
          description: Relationship Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching relationship was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerRelationshipPartyResponse'
        "400":
          description: Bad Request. Relationship Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching relationship were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /relationships/{relationshipId}/persons:
    get:
      tags:
        - Relationships
      summary: Retrieves Customer Relationship Persons
      operationId: findRelationshipPersons
      parameters:
        - name: relationshipId
          in: path
          description: Relationship Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching relationship was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerRelationshipPersonResponse'
        "400":
          description: Bad Request. Relationship Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching relationship have found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards:
    get:
      tags:
        - Cards
      summary: Retrieves Cards
      operationId: findCards
      parameters:
        - name: number.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PrimaryAccountNumber'
        - name: sourceType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/CardFundingSourceType'
        - name: productName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/CardProductName'
        - name: brand.inc
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: name.inc
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: |
            Resources for which the expression evaluates to true were returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentCardDescriptor'
        "400":
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards/{cardId}:
    get:
      tags:
        - Cards
      summary: Retrieves a Card
      operationId: findCardById
      parameters:
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching card was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        "400":
          description: Bad Request. Card Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching card were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Cards
      summary: Updates a Card
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateCard
      parameters:
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Updated card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        "400":
          description: Bad Request. Card Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching cards were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards/{cardId}/accounts:
    get:
      tags:
        - Cards
      summary: Retrieves Card Accounts
      operationId: findCardRelatedAccounts
      parameters:
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching card was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardRelatedAccountResponse'
        "400":
          description: Bad Request. Card Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards/{cardId}/owner:
    get:
      tags:
        - Cards
      summary: Retrieves Card Holder
      operationId: findCardHolder
      parameters:
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching card was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "400":
          description: Bad Request. Card Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards/{cardId}/transactions:
    get:
      tags:
        - Cards
      summary: Retrieves Card Holder Transactions
      operationId: findCardAccountTransactions
      parameters:
        - name: transactionId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionId'
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: creationDate.lte
          in: query
          description: Input cycle date less than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: creationDate.gte
          in: query
          description: Input cycle date greater than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
        - name: Core-Content-Mode
          in: header
          description: "<SUMMARIZED|DETAILED> Indicates how the API requests the content against the core content capabilities. \n SUMMARIZED: Significant aspects of the content in detail.\n DETAILED: Expanded or enriched fields.\n"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: |
            Resources for which the expression evaluates to true were returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
            application/vnd.portx-orca.extended+json:
              schema:
                $ref: '#/components/schemas/PaymentCardTransactionResponse'
        "400":
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans:
    get:
      tags:
        - Loans
      summary: Retrieves a list of loan accounts matching the parameters.
      operationId: findLoans
      parameters:
        - name: accountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountOwnershipType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: loanType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: loanBranchCode.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: status.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountStatus'
        - name: accountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: |
            Accounts for which the expression evaluates to true were return.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountDescriptor'
        "400":
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Loans
      summary: Opens a Loan
      operationId: openLoanAccount
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoanRequest'
        required: true
      responses:
        "202":
          description: Loan information was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        "400":
          description: Bad Request. The loan could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}:
    get:
      tags:
        - Loans
      summary: Retrieves a Loan
      operationId: findLoan
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching Loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Loans
      summary: Updates a Loan
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateLoan
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Updated loan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching loans were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/balances:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Balances
      operationId: findLoanBalances
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanBalanceResponse'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/transactions:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Transactions
      operationId: findLoanTransactions
      parameters:
        - name: transactionId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionId'
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: creationDate.lte
          in: query
          description: Creation date less than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: creationDate.gte
          in: query
          description: Creation date greater than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: creationDate.eq
          in: query
          description: Creation date equals to
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanTransactionsResponse'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching loans were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/identifiers:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Identifiers
      operationId: findLoanIdentifiers
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanIdentifiersResponse'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching loans were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/parties:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Parties
      operationId: findLoanRelatedParties
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanPartyResponse'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching loans were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/owners:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Owners
      operationId: findLoanBorrowers
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountOwnerResponse'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching loans were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /loans/{loanId}/cards:
    get:
      tags:
        - Loans
      summary: Retrieves Loan Cards
      operationId: findLoanCards
      parameters:
        - name: loanId
          in: path
          description: Loan Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching loan was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoanPaymentCardResponse'
        "400":
          description: Bad Request. Loan Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching loans were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ledger-accounts:
    get:
      tags:
        - Ledger Accounts
      summary: Retrieves a list of accounts matching the parameters.
      operationId: findLedgerAccounts
      parameters:
        - name: accountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: accountBranchCode.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: status.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountStatus'
        - name: accountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/LedgerAccountNumber'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: |
            Accounts for which the expression evaluates to true were return.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LedgerAccountDescriptor'
        "400":
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Ledger Accounts
      summary: Creates a ledger account or any internal working account of the bank.
      description: |
        Creates a ledger account, detailed or general, of the Chart of Accounts. Also can represent holding accounts, mirror accounts or working accounts that are required for the booking of a part of a transaction in the bank world. This is typically the case when amounts cannot immediately be booked on a final account for duty seggregation or processing reasons or in order to mirror bookings on external accounts, like nostro accounts, mirrow or holding account.
      operationId: createLedgerAccount
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LedgerAccountRequest'
        required: true
      responses:
        "202":
          description: Account information was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerAccount'
        "400":
          description: Bad Request. The account could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ledger-accounts/{accountId}:
    get:
      tags:
        - Ledger Accounts
      summary: Retrieves a Ledger Account
      operationId: findLedgerAccount
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerAccount'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Ledger Accounts
      summary: Updates an Account
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateLedgerAccount
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Updated account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerAccount'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ledger-accounts/{accountId}/balances:
    get:
      tags:
        - Ledger Accounts
      summary: Retrieves Account Balances
      operationId: findLedgerAccountBalances
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerAccountBalanceResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ledger-accounts/{accountId}/transactions:
    get:
      tags:
        - Ledger Accounts
      summary: Retrieves Ledger Account Transactions
      operationId: findLedgerAccountTransactions
      parameters:
        - name: transactionId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionId'
        - name: status.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/TransactionStatus'
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: creationDate.lte
          in: query
          description: Input cycle date less than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: creationDate.gte
          in: query
          description: Input cycle date greater than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerAccountTransactionsResponse'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /internal-transfers:
    get:
      tags:
        - Internal Transfers
      summary: Retrieves a list of internal transfers matching the parameters.
      operationId: findInternalTransfers
      parameters:
        - name: transferId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: sourceAccountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: sourceAccountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: destinationAccountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: destinationAccountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: |
            Credit Transfers for which the expression evaluates to true were returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InternalTransfer'
        "400":
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Internal Transfers
      summary: Internal Transfer Request
      description: "Instruction to transfer funds between ledger accounts, holding accounts, or final account. To create a balanced internal transfer, there must be at least one credit entry and one debit entry. Additionally, the sum of all credit entry amounts must equal the sum of all debit entry amounts."
      operationId: requestInternalTransfer
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InternalTransferRequest'
        required: true
      responses:
        "202":
          description: Transfer was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalTransferResponse'
        "400":
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "502":
          description: The server received an invalid response from an upstream server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /internal-transfers/{transferId}:
    get:
      tags:
        - Internal Transfers
      summary: Internal Transfer Status
      description: Returns the status of an internal transfer.
      operationId: findInternalTransfer
      parameters:
        - name: transferId
          in: path
          description: Internal Transfer Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching Transfer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalTransfer'
        "400":
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /internal-transfers/{transferId}/cancellation:
    post:
      tags:
        - Internal Transfers
      summary: Internal Transfer Cancellation
      description: Request a transfer cancellation.
      operationId: requestInternalTransferCancellation
      parameters:
        - name: transferId
          in: path
          description: Internal Transfer Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InternalTransferCancellationRequest'
        required: true
      responses:
        "202":
          description: Matching Transfer. The cancellation will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalTransfer'
        "400":
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /internal-transfers/{transferId}/confirmation:
    post:
      tags:
        - Internal Transfers
      summary: Internal Transfer Confirmation
      description: Request transfer settlement from memo posted to hard posted.
      operationId: requestInternalTransferConfirmation
      parameters:
        - name: transferId
          in: path
          description: Internal Transfer Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InternalTransferConfirmationRequest'
        required: true
      responses:
        "202":
          description: Matching Transfer. The cancellation will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalTransfer'
        "400":
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /reward-programs:
    get:
      tags:
        - Reward Programs
      summary: Retrieves a list of reward progrmas matching the parameters.
      operationId: findRewardPrograms
      parameters:
        - name: customer.name.inc
          in: query
          description: The primary customer name includes the substring provided.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: partyId.eq
          in: query
          description: Returns the customer relationships
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: customer.lastName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: customer.firstName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: customer.birthDate.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: customer.phoneNumber.eq
          in: query
          description: Any phone number equals to.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PhoneNumber'
        - name: accountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: customer.tin.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.ssn.eq
          in: query
          description: Social Security Number
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.ssn.last4
          in: query
          description: Social Security Number last four digits.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.email.eq
          in: query
          description: Email equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.addressLine.inc
          in: query
          description: Any address line of any postal address includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.postCode.eq
          in: query
          description: Any postal address with post code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.country.eq
          in: query
          description: Any postal address with Country code equals to
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.countrySubDivision.inc
          in: query
          description: Any postal address with country subdivision includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.townName.inc
          in: query
          description: Any postal address with town name includes substring
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: customer.personId.eq
          in: query
          description: System id equals to
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: card.number.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PrimaryAccountNumber'
        - name: card.sourceType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/CardFundingSourceType'
        - name: card.productName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/CardProductName'
        - name: card.brand.inc
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: |
            Resources for which the expression evaluates to true were returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RewardProgram'
        "400":
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Reward Programs
      summary: Creates a Reward Program
      operationId: createRewardProgram
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RewardProgramRequest'
        required: true
      responses:
        "202":
          description: Reward Program information was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardProgram'
        "400":
          description: Bad Request. The reward program information could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /reward-programs/{programId}:
    get:
      tags:
        - Reward Programs
      summary: Reward Program Status
      description: Returns the status of a Reward Program.
      operationId: findRewardProgramById
      parameters:
        - name: programId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching Reward Program
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardProgram'
        "400":
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Reward Programs
      summary: Updates a Reward Program
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateRewardProgram
      parameters:
        - name: programId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Updated account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardProgram'
        "400":
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /persons/{personId}/reward-programs:
    get:
      tags:
        - Reward Programs
      summary: Retrieves the Reward Programs of a Member
      description: Retrieves all the reward programs the member may have.
      operationId: findMemberRewardPrograms
      parameters:
        - name: personId
          in: path
          description: Person Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Matching person was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonRewardProgramResponse'
        "400":
          description: Bad Request. Person Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching persons were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /documents:
    get:
      tags:
        - Documents
      summary: Retrieves a list of documents matching the parameters.
      operationId: findDocuments
      parameters:
        - name: party.name.inc
          in: query
          description: A related party name includes the substring provided.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: documentId.eq
          in: query
          description: Returns the document
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: contact.lastName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: contact.firstName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: contact.birthDate.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: contact.phoneNumber.eq
          in: query
          description: Any phone number equals to.
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PhoneNumber'
        - name: accountNumber.eq
          in: query
          description: A related account has equal number
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: documentType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: card.number.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PrimaryAccountNumber'
        - name: card.sourceType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/CardFundingSourceType'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: |
            Resources for which the expression evaluates to true were returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountDocument'
        "400":
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Documents
      summary: Creates a Document or Agreement
      operationId: createDocument
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountDocumentRequest'
        required: true
      responses:
        "202":
          description: Document information was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDocument'
        "400":
          description: Bad Request. The document information could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /documents/{documentId}:
    get:
      tags:
        - Documents
      summary: Retrieves a Document
      operationId: findDocumentById
      parameters:
        - name: documentId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching document was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDocument'
        "400":
          description: Bad Request. Document Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching documents were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Documents
      summary: Updates a Document
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateDocument
      parameters:
        - name: documentId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Updated document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDocument'
        "400":
          description: Bad Request. Document Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching documents were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /addresses:
    get:
      tags:
        - Address Book
      summary: Retrieves a list of addresses matching the parameters.
      operationId: findAddresses
      parameters:
        - name: party.name.inc
          in: query
          description: A related party name includes the substring provided.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: addressId.eq
          in: query
          description: Returns the document
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: |
            Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: |
            Resources for which the expression evaluates to true were returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        "400":
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Address Book
      summary: Creates an Address
      operationId: createAddress
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
        required: true
      responses:
        "202":
          description: Address information was received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        "400":
          description: Bad Request. The document information could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /addresses/{addressId}:
    get:
      tags:
        - Address Book
      summary: Retrieves an Address
      operationId: findAddressById
      parameters:
        - name: addressId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        "200":
          description: Matching address was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        "400":
          description: Bad Request. Address Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching address were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Address Book
      summary: Updates an Address
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateAddress
      parameters:
        - name: addressId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: Identification of the account servicer institution at branch level or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Updated address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        "400":
          description: Bad Request. Address Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: No matching addresses were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /credit-transfers:
    get:
      tags:
        - Credit Transfers
      summary: Retrieves a list of credit transfers matching the parameters.
      operationId: findCreditTransfers
      parameters:
        - name: paymentId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: paymentMethod.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: debtorAccountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: creditorAccountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: creditorAccountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: checkType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: checkNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: checkDate.lte
          in: query
          description: Check date less than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: checkDate.gte
          in: query
          description: Check date greater than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: checkNumber.lte
          in: query
          description: Check number less than or equal
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: checkNumber.gte
          in: query
          description: Check number greater than or equal
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: >
            Specifies an opaque string value ( "no  meaning" string value) at
            which start retrieving transactions. For instance,
            limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >
            Specifies the number of resources to return in one request,
            specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: >
            Credit Transfers for which the expression evaluates to true were
            returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreditTransfer'
        '400':
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Credit Transfers
      summary: Credit Transfer Initiation
      description: >-
        Instruction to pay an amount of money to an ultimate beneficiary, on
        behalf of an originator.
      operationId: initiateCreditTransfer
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditTransferInitiation'
        required: true
      responses:
        '202':
          description: Payment was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditTransfer'
        '400':
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /credit-transfers/{paymentId}:
    get:
      tags:
        - Credit Transfers
      summary: Credit Transfer Status
      description: >-
        Returns the status report of a credit transfer initiation, process and
        excecution.
      operationId: findCreditTransfer
      parameters:
        - name: paymentId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/PaymentId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        '200':
          description: Matching Payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditTransfer'
        '400':
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /credit-transfers/{paymentId}/cancellation:
    post:
      tags:
        - Credit Transfers
      summary: Credit Transfer Cancellation
      description: Request a payment cancellation.
      operationId: initiateCreditTransferCancellation
      parameters:
        - name: paymentId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/PaymentId'
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditTransferCancellationRequest'
        required: true
      responses:
        '202':
          description: Payment was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditTransfer'
        '400':
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /direct-debits:
    get:
      tags:
        - Direct Debits
      summary: Retrieves a list of direct debits matching the parameters.
      operationId: findDirectDebits
      parameters:
        - name: paymentId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: paymentMethod.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: debtorAccountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: creditorAccountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: creditorAccountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: >
            Specifies an opaque string value ( "no  meaning" string value) at
            which start retrieving transactions. For instance,
            limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >
            Specifies the number of resources to return in one request,
            specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: >
            Credit Transfers for which the expression evaluates to true were
            returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreditTransfer'
        '400':
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Direct Debits
      summary: Direct Debit Initiation
      description: Instruction to collect funds from a debitor.
      operationId: initiateDirectDebit
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectDebitInitiation'
        required: true
      responses:
        '202':
          description: Payment was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDebit'
        '400':
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /direct-debits/{paymentId}:
    get:
      tags:
        - Direct Debits
      summary: Direct Debit Status
      description: >-
        Returns the status report of a direct debit initiation, process and
        excecution.
      operationId: findDirectDebit
      parameters:
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: paymentId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/PaymentId'
      responses:
        '200':
          description: Matching Payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDebit'
        '400':
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /direct-debits/{paymentId}/cancellation:
    post:
      tags:
        - Direct Debits
      summary: Direct Debit Cancellation
      description: Requests direct debit cancellation.
      operationId: initiateDirectDebitCancellation
      parameters:
        - name: paymentId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/PaymentId'
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectDebitCancellationRequest'
        required: true
      responses:
        '202':
          description: Payment was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDebit'
        '400':
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /creditor-payments:
    get:
      tags:
        - Creditor Payments
      summary: Retrieves a list of payments matching the parameters.
      operationId: findCreditorPayments
      parameters:
        - name: paymentId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: paymentMethod.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: debtorAccountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: creditorAccountNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/AccountNumber'
        - name: creditorAccountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: checkType.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: checkNumber.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: amount.lte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: amount.gte
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Amount'
        - name: checkDate.lte
          in: query
          description: Check date less than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: checkDate.gte
          in: query
          description: Check date greater than or equal
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Date'
        - name: checkNumber.lte
          in: query
          description: Check number less than or equal
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: checkNumber.gte
          in: query
          description: Check number greater than or equal
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cursor
          in: query
          description: >
            Specifies an opaque string value ( "no  meaning" string value) at
            which start retrieving transactions. For instance,
            limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >
            Specifies the number of resources to return in one request,
            specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: >
            Credit Transfers for which the expression evaluates to true were
            returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreditorPaymentActivation'
        '400':
          description: Bad Request on query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Creditor Payments
      summary: Creditor Payment Activation Request
      description: >-
        It is used by a Creditor to request movement of funds from the debtor
        account to a creditor.
      operationId: creditorPaymentActivationRequest
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditorPaymentActivationRequest'
        required: true
      responses:
        '202':
          description: Payment was received and will be processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditorPaymentActivation'
        '400':
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /creditor-payments/{paymentId}:
    get:
      tags:
        - Creditor Payments
      summary: Creditor Payment Activation Status
      description: >-
        Returns the status report of a creditor payment activation, process and
        excecution.
      operationId: findCreditorPayment
      parameters:
        - name: paymentId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/PaymentId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      responses:
        '200':
          description: Matching Payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditTransfer'
        '400':
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/standing-orders:
    get:
      tags:
        - Standing Orders
      summary: Retrieves Account Standing Orders
      operationId: findStandingOrders
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: standingOrderId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: lookUpReference.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountStandingOrderResponse'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Standing Orders
      summary: Creates a Standing Order
      operationId: createStandingOrder
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandingOrderRequest'
        required: true
      responses:
        '202':
          description: Standing Order request was received and will be processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandingOrder'
        '400':
          description: >-
            Bad Request. The standing order could not be processed due to format
            errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cards/{cardId}/right-time-payments:
    post:
      tags:
        - Account Payments
      summary: Creates a rigt time payment associated with a specific card account.
      description: >-
        Creates a rigt time payment associated with a specific card account. A
        rigt time payment is processed to temporarily adjust the member's credit
        and delinquency attributes without waiting for nightly processing.
      operationId: createRightTimeCardPayment
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: cardId
          in: path
          description: Card Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RightTimeCardPaymentRequest'
        required: true
      responses:
        '202':
          description: Card payment information was received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RightTimeCardPayment'
        '400':
          description: >-
            Bad Request. The card information could not be processed due to
            format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /right-time-payments/{paymentId}/cancellation:
    post:
      tags:
        - Account Payments
      summary: Request Right Time Payment Cancellation
      operationId: cancelRightTimePayment
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: paymentId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/PaymentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RightTimePaymentCancellationRequest'
        required: true
      responses:
        '202':
          description: Cancellation request was received and will be processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RightTimeCardPayment'
        '400':
          description: >-
            Bad Request. The cancellation request could not be processed due to
            format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/external-provider-accounts:
    get:
      tags:
        - External Provider Accounts
      summary: Retrieves external provider accounts linked to particular account
      operationId: findExternalProviderAccounts
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: externalAccountId.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: lookUpReference.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: name.inc
          in: query
          description: The person name includes the substring provided.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: lastName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: firstName.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PartyName'
        - name: paymentMethod.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: authorizationChannel.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: agreedToTermsIndicator.eq
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
      responses:
        '200':
          description: Matching external account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalProviderAccountResponse'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - External Provider Accounts
      summary: Creates an external provider account linked to particular account.
      description: >-
        Creates an external account within a payment provider platform,
        associated with the designated account.
      operationId: createsExternalProviderAccount
      parameters:
        - name: idempotencyId
          in: header
          description: Idempotency identifier used by the client when making repeated calls
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalProviderAccount'
        required: true
      responses:
        '202':
          description: External provider account created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalProviderAccount'
        '400':
          description: >-
            Bad Request. The account could not be processed due to format
            errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /external-provider-accounts/{externalAccountId}:
    get:
      tags:
        - External Provider Accounts
      summary: External Provider Account Status
      description: Returns the status of an external provider account
      operationId: findExternalProviderAccountById
      parameters:
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: externalAccountId
          in: path
          description: External Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      responses:
        '200':
          description: Matching external provider account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalProviderAccount'
        '400':
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - External Provider Accounts
      summary: External Provider Removal
      description: Deletes a registerd external provider account
      operationId: deleteExternalProviderAccountById
      parameters:
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: externalAccountId
          in: path
          description: External Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      responses:
        '204':
          description: The external provider account was removed.
        '400':
          description: BadRequest. See the payload for specific validation or other errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - External Provider Accounts
      summary: Updates an external provider account.
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateExternalProviderAccount
      parameters:
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: externalAccountId
          in: path
          description: External Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
        required: true
      responses:
        '200':
          description: Updated external provider account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalProviderAccount'
        '400':
          description: >-
            Bad Request. Relationship Id could not be processed due to format
            errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching relationships were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /standing-orders/{standingOrderId}:
    get:
      tags:
        - Standing Orders
      summary: Standing Order Status
      description: Returns the status of a standing order.
      operationId: findStandingOrderById
      parameters:
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
        - name: standingOrderId
          in: path
          description: Standing Order Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        '200':
          description: Matching standing order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDebit'
        '400':
          description: BadRequest. See the payload for specific validation or other errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Standing Orders
      summary: Updates a standing order
      description: Use the JSON Merge Patch standard https://tools.ietf.org/html/rfc7396
      operationId: updateStandingOrder
      parameters:
        - name: standingOrderId
          in: path
          description: Standing Order Identification
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: servicerBranchId
          in: header
          description: >-
            Identification of the account servicer institution at branch level
            or center level.
          required: false
          schema:
            $ref: '#/components/schemas/ServicerBranchId'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
        required: true
      responses:
        '200':
          description: Updated standing order.
          content:
            application/merge-patch+json:
              schema:
                type: object
        '400':
          description: >-
            Bad Request. Relationship Id could not be processed due to format
            errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching standing order were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{accountId}/payments:
    get:
      tags:
        - Account Payments
      summary: Retrieves the payments made to an account.
      operationId: findAccountPayments
      parameters:
        - name: accountId
          in: path
          description: Account Identification
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
        - name: servicerId
          in: header
          description: Account Servicer Identification (Bank)
          required: false
          schema:
            $ref: '#/components/schemas/Id'
        - name: cursor
          in: query
          description: >
            Specifies an opaque string value ( "no  meaning" string value) at
            which start retrieving transactions. For instance,
            limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >
            Specifies the number of resources to return in one request,
            specified as an integer from 1 to 100.
          required: false
          schema:
            type: string
        - name: Pagination-Cursor
          in: header
          description: Pagination Cursor
          required: false
          schema:
            type: string
        - name: Pagination-Total
          in: header
          description: |
            Total number of resources.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Matching account was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPaymentResponse'
        '400':
          description: Bad Request. Account Id could not be processed due to format errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No matching accounts were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Id:
      maxLength: 300
      minLength: 1
      type: string
      example: 5fb9d4d6-1a3c-11ed-861d-0242ac120002
    PartyName:
      maxLength: 350
      minLength: 1
      type: string
      description: Name by which a party is known and which is usually used to identify that party.
      example: Jane Birkin
    TransactionCharge:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ChargeName'
        description:
          $ref: '#/components/schemas/Description'
        amount:
          description: |
            Amount of payment aplied to principal, if the adjustment value is included; otherwise the total amount of the charge.
          allOf:
            - $ref: '#/components/schemas/Amount'
        adjustment:
          description: |
            Amount of payment aplied to charges.
          allOf:
            - $ref: '#/components/schemas/Amount'
      description: |
        Provides information on a charge included in the entry amount.
    ChargeName:
      maxLength: 60
      minLength: 1
      type: string
      description: "Name of the charge calculation in PascalCase. Possible values: Fee, Overdraft, CardLatePayment, CashAdvance, LatePayment, CashWithdrawal, EarlyWithdrawal, Dormant, EIM, NonSufficientFunds, ATM, BillPayment, FDIC, Overdraft, OverdraftInterest, OverdraftCourtesy, ReturnedItem, DeclinedCheck. Service Charge values: AutomaticActivityCharge, MaintenanceActivityCharge, MaintenanceServiceCharge. ServiceCharge, ServiceChargeCreditBack. Also other external codes to identify the charge. \n"
      example: CardLatePayment
    Date:
      type: string
      description: A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format.
      format: date
      example: 2022-04-17
    AccountNumber:
      maxLength: 30
      type: string
      description: |
        The account number or Basic Bank Account Number (BBAN). A Basic Bank Account Number (BBAN) is a bank account number that includes the domestic bank code, branch identifier, and account number. It is a unique identifier for a bank account within a specific country.
      example: "012345678"
    ServicerBranchId:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Identification of the account servicer institution at branch level or center level. To overlay the codes to produce a unique identifier the following expresion is used: BranchRegionCode-BranchSubdivisionCode.
      example: SEA_1
    AccountDescriptor:
      required:
        - accountId
        - accountType
        - ownershipType
        - parties
      type: object
      properties:
        accountId:
          readOnly: true
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          readOnly: true
          $ref: '#/components/schemas/AccountNumber'
        accountBranchCode:
          readOnly: true
          $ref: '#/components/schemas/ServicerBranchId'
        codes:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/GenericCode'
        identifiers:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/AccountIdentification'
        accountType:
          readOnly: true
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          readOnly: true
          $ref: '#/components/schemas/AccountOwnershipType'
        name:
          readOnly: true
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          readOnly: true
          $ref: '#/components/schemas/Description'
        currency:
          readOnly: true
          $ref: '#/components/schemas/CurrencyCode'
        status:
          readOnly: true
          $ref: '#/components/schemas/AccountStatus'
        parties:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/AccountParty'
        relatedAccounts:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/RelatedAccount'
        balances:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Balance'
        audit:
          readOnly: true
          $ref: '#/components/schemas/Audit'
    AccountId:
      maxLength: 300
      minLength: 1
      type: string
      description: "Identification assigned by the account service institution (Servicer). Could be encoded (UUID). Also may be used as composite account identifier when overlaying the account code parts. <branch-type-subtype-number>   \n\n   \n"
      example: 033-DDA-123456
    GenericCode:
      type: object
      properties:
        name:
          maxLength: 200
          minLength: 1
          type: string
          description: |
            Name of the code in PascalCase.
          example: AccountingGroup
        value:
          maxLength: 35
          minLength: 1
          type: string
          description: Code value.
          example: "195"
        description:
          $ref: '#/components/schemas/Title'
      description: Generic code definition.
    Title:
      maxLength: 200
      minLength: 1
      type: string
      example: This is a Title.
    AccountIdentification:
      type: object
      properties:
        number:
          maxLength: 40
          minLength: 1
          type: string
          description: |
            Identification assigned by an institution or internally to connect to other applications.
        schemeName:
          maxLength: 40
          minLength: 1
          type: string
          description: |
            Name of the identification scheme, in PascalCase. Possible ISO 20022 compliant values names are:
            IssuerIdentificationNumber, BBANIdentifier, CHIPSUniversalIdentifier, UPICIdentifier, IBANIdentifier. Other possible values: CreditBackIdentification, UniversalLoanIdentifier, HMDAUniversalLoanIdentifier, CommitmentNumber, RecordNumber, FlexDataRecordNumber, RegistrationNumber, ExternalAccountId, MortgageNumber, DepartmentNumber.
          example: BBANIdentifier
        issuer:
          maxLength: 35
          minLength: 1
          type: string
          description: Entity that assigns the identification.
    AccountType:
      maxLength: 60
      minLength: 1
      type: string
      description: "Type of the account. Some possible ISO 20022 compliant values are: \n Checking,\n CardAccount,\n CashPayment, \n Charges, \n CashIncome, \n Commission, \n ClearingParticipantSettlementAccount,\n LimitedLiquiditySavingsAccount,\n MarginalLending, \n MoneyMarket, \n NonResidentExternal, \n Overdraft, \n OverNightDeposit, \n Settlement, \n Salary, \n Savings, \n Tax, \n TransactingAccount,\n CashTrading,\n VirtualAccount,\n CreditCard,\n DebitCard,\n Universal, \n Investment, \n EpurseCard,\n CertificateOfDeposit,\n MoneyMarketChecking, \n RetirementAccount, \n RetireeReimbursementAccount, \n StockOrBond,\n PrePaid, \n FleetCard, \n Cash, \n DebitAccount, \n CreditAccount, \n Benefit,\n HealthSavingsAccount,\n FlexibleSpendingAccount,\n ForBenefitOf,\n Estate,\n ClientTrustAccount, \n LawyersTrustAccount,\n KeoghPlanAccount,\n UniformTransfersToMinorsAct,\n UniformGiftsToMinorsAct,\n ReserveFunds,\n SelfDirectedBrokerage,\n IRA,\n Annuity,\n ExternalAccount,\n Loan,\n CommercialLoan,\n MortgageLoan,\n SafeDepositBox\n"
      example: Checking
    AccountOwnershipType:
      maxLength: 100
      minLength: 1
      type: string
      description: |
        Specifies the type of account ownership. Possible ISO 20022 compliant values names are:
         JointAccountWithSurvivorshipRights, JointAccountWithSurvivorshipRightsPayableOnDeath, JointAccountInCommon, CustodialAccount, FinancialInstitution, SingleOwnerAccount, JointAccount, JointAnd, Corporation, Organization, Business, FormalPartnership, FormalTrust, Nominee, NonProfitOrganization, NotForProfitOrganization, ForProfit, EUResidualEntity, USGovernmentOrganization, NonUSGovernmentOrganization,  GovernmentOrganization, LimitedLiabilityCompany, RegisteredInvestmentCompany, Entrepreneurial, Unincorporated, LimitedPartnership, LimitedLiabilityPartnership, BareOwner, Usufructuary, Fiduciary, ServicerEmployeeAccount, BusinessTrust, FamilyTrust, Estate, PublicFunds, NonUSGovernmentOrganization, Church, Club. More general possible values: Direct, Indirect, ConvenienceAccount, CommunityProperty, CommunityPropertyWithSurvivorshipRights, TottenTrust, PayableOnDeath, UniformTransfersToMinorsAct, UniformGiftsToMinorsAct, InTrustFor, RepresentativePayee, ProfessionalAssociation.
      example: SingleOwnerAccount
    AccountName:
      maxLength: 70
      minLength: 1
      type: string
      description: "Name of the account. It provides an additional means of identification, and is designated by the account servicer in agreement with the account owner."
      example: Hermes PD_CA 0002
    Description:
      maxLength: 1025
      minLength: 1
      type: string
      example: This is a description.
    CurrencyCode:
      maxLength: 3
      minLength: 3
      pattern: "^([A-Z]{3})?$"
      type: string
      description: "Three contiguous letters for the representation of currencies and funds. Valid currency codes are registered with the ISO 4217 Maintenance Agency. \n"
      example: USD
    AccountStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: "Specifies the current primary status of an account. Possible values are:\n Enabled, \n Dormant,\n Disable,\n Deleted,\n Pending, \n Form.\n Pending, \n Denied, \n Review,\n Approve,\n ChargeOff,\n Active,\n PaymentPastDue,\n Bankruptcy,\n AuthorizationProhibited,\n InterestProhibited,\n Closed, \n Restricted,\n Assumed,\n New,\n ZeroBalanceAccount.\n"
      example: Active
    PaymentRelatedParty:
      type: object
      properties:
        partyId:
          $ref: '#/components/schemas/Id'
        partyType:
          $ref: '#/components/schemas/PartyType'
        partyName:
          $ref: '#/components/schemas/PartyName'
        partyRelationType:
          $ref: '#/components/schemas/PartyRelationType'
      description: Parties involve in the payment chain.
    AccountParty:
      type: object
      properties:
        partyId:
          $ref: '#/components/schemas/Id'
        partyType:
          $ref: '#/components/schemas/PartyType'
        partyAccountRole:
          $ref: '#/components/schemas/AccountPartyRole'
        partyAccountRoleCode:
          type: string
          description: Bank defined party account role.
          example: "50"
        partyName:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/PartyName'
        employeeIndicator:
          type: boolean
          description: "Indicates whether is a bank employee. \n"
    PartyType:
      type: string
      description: |
        Possible values are:
         Person,
         Organization. Also other types of servicer entities: ServicerOfficer, ExternalOrganization, Referral.
      example: Person
    AccountPartyRole:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Type of the account party role. Some possibles values are: Comaker, Cosigner, AccountOwner, AccountSigner, ATMDebitCardHolder, CreditCardHolder, LiquidityManager, Endorser, LimitManager, PaymentManager, Reader, BackupManager, SettlementManager, FundManagementCompany, TransferAgent, FundAccountant, Registrar, InvestmentManager, Custodian, Auditor, PayingAgent, CashCorrespondent, DataProvider, FinalAgent, Investor, FirstAgent, Intermediary, Distributor, Concentrator, UnderlyingClient1, UnderlyingClient2, TransmittingAgent, FundBroker, FinancialAdvisor, ContactPersonAtInstructingPartyInstitution, ContactPersonAtExecutingPartyInstitution, NameOfAgentToOrder, PrimeBroker, Internal, LegalGuardian, DecisionMaker, Guarantor, LoanLender, LoanBorrower, LoanCoBorrower, PrimaryOwner, Trustee, CustodianForMinor, Minor, Nominee, SecondaryOwner, Executor, Beneficiary, PrimaryServicerOfficer, SecondaryServicerOfficer, AccountOpenningOfficer, CustomerServiceOfficer, PowerOfAttorney, ContingentBeneficiary, Fiduciary, ControlPerson, AuthorizedPerson, Dealer, DoingBusinessAs, Grantor, SecondaryTrustee, RepresentativePayee, RestrictedOwner, InitiatingParty, Counterparty.
      example: AccountOwner
    RelatedAccount:
      type: object
      properties:
        accountRelationType:
          $ref: '#/components/schemas/AccountRelationType'
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/RelatedAccountType'
        name:
          $ref: '#/components/schemas/AccountName'
        productId:
          $ref: '#/components/schemas/Id'
        balances:
          type: array
          description: Account balances
          readOnly: true
          items:
            $ref: '#/components/schemas/Balance'
        codes:
          type: array
          description: |
            Account related codes
          items:
            $ref: '#/components/schemas/GenericCode'
    AccountRelationType:
      type: string
      description: "Account relation role. Possible values are:\n   Parent, EscrowAccount,\n   SubAccount, ControlAccount, CrossAccount, ChargeAccount, AssociatedAccount, IRAAccount, CombinedStatement, SecondaryCombinedStatement, SummaryAccount, FundingSource, CompensatingAccount. Payment related values: Authorized, Counterpart \n"
      example: SubAccount
    RelatedAccountType:
      maxLength: 60
      minLength: 1
      type: string
      description: "Type of the account. Some possible ISO 20022 compliant values are: \n Checking,\n CardAccount,\n CashPayment, \n Charges, \n CashIncome, \n Commission, \n ClearingParticipantSettlementAccount,\n LimitedLiquiditySavingsAccount,\n MarginalLending, \n MoneyMarket, \n NonResidentExternal, \n Overdraft, \n OverNightDeposit, \n Settlement, \n Salary, \n Savings, \n Tax, \n TransactingAccount,\n CashTrading,\n VirtualAccount,\n CreditCard,\n DebitCard,\n Universal, \n Investment, \n EpurseCard,\n CertificateOfDeposit,\n MoneyMarketChecking, \n RetirementAccount, \n StockOrBond,\n PrePaid, \n FleetCard, \n Cash, \n DebitAccount, \n CreditAccount, \n Benefit,\n HealthSavingsAccount,\n FlexibleSpendingAccount,\n ForBenefitOf,\n Estate,\n ClientTrustAccount, \n LawyersTrustAccount,\n KeoghPlanAccount,\n UniformTransfersToMinorsAct,\n UniformGiftsToMinorsAct,\n ReserveFunds,\n SelfDirectedBrokerage,\n Loan,\n Ledger.\n"
      example: Checking
    Balance:
      description: |
        Numerical representation of the net increases and decreases in an account at a specific point in time.
      type: object
      properties:
        fromDateTime:
          description: Date and time at which the period starts.
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          description: Date and time at which the period ends.
          $ref: '#/components/schemas/DateAndTime'
        periodNumber:
          type: integer
          description: Sequence number of the period.
        periodName:
          $ref: '#/components/schemas/PeriodName'
        balanceName:
          $ref: '#/components/schemas/BalanceName'
        amount:
          $ref: '#/components/schemas/Amount'
        count:
          type: integer
          description: |
            Number of units.
        unit:
          description: Unit that describes the duration.
          $ref: '#/components/schemas/TemporalUnit'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        calculationDate:
          description: Specifies the date and time at which the balance is calculated.
          $ref: '#/components/schemas/DateAndTime'
        codes:
          type: array
          description: |
            Bank defined codes to classify balances. Possible values: BalanceCategory, BalanceType, PartyAgreementNumber.
          items:
            $ref: '#/components/schemas/GenericCode'
    Period:
      type: object
      properties:
        fromDateTime:
          description: Date and time at which the period starts.
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          description: Date and time at which the period ends.
          $ref: '#/components/schemas/DateAndTime'
        periodNumber:
          type: integer
          description: Sequence number of the period.
        periodName:
          $ref: '#/components/schemas/PeriodName'
    DateTimePeriod:
      properties:
        fromDateTime:
          description: Date and time at which the period starts.
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          description: Date and time at which the period ends.
          $ref: '#/components/schemas/DateAndTime'
    DateAndTime:
      type: string
      format: date-time
      example: 2022-04-17T08:00:00Z
    PeriodName:
      type: string
      description: "Time of the year or previous. Possible Values: YearToDate, MonthToDate, PreviousYear, PreviousMonth, BeginningPreviousYear, QuarterToDate, PreviousQuarter, YearEnd, Last, Lifetime, SinceLastStatement, SinceLastRate, Initial, LastCycle, CycleToDate, CurrentCycle, \n"
    BalanceName:
      maxLength: 50
      minLength: 1
      type: string
      description: "Specifies the nature of the balance. Possible values: Current, Available, Pending, Opening, Blocked, Previous, RelatedBalance, OnHold, PendingLedger, Collected, LastAnniversary, CurrentAccrued, PreviousAccrued, CurrentWithLastCalculus, CarriedAdjustment, PaidWithPenalties, Accrued, Penalty, Fees, Withholding, CollectionLedger, LastLedger, CurrentLedger, Ledger, MinimumAvailable, MinimumLedger, Withheld, CurrentBooked, CurrentBook, LastDeposit, FloatAmount, Average, RegulationDDAvailable. Loan Balances: CashProceeds, the amount that a customer actually received, exclusive of insurance premiums, fees, and unearned discount; FinancedExpenses, indicates the amount of expenses an institution has financed for a borrower;  TotalInterest; AdditionalInterest, if the date of the first payment is beyond one month from the note date, the interest for the odd days will be earned during the first interest period; DeferredUnsecuredPrincipal, is the outstanding balance of an unsecured debt. The DUPB includes any accrued interest that is yet to be paid by the borrower. The deferral typically occurs due to bankruptcy or debt relief proceedings, which temporarily halt collection efforts by the original creditor; Charge Balances: Earned, RealTimeDeliveryMaximum, Current, Financed, Prepaid, CurrentEarned, CurrentEarnedOtherEscrow, InterestPaidToDate, InterestPaidThisYear, InterestPaidPreviousYear, InterestPaidLastStatement, InterestPaidThisYear, RevolvingCreditPaid, BasePaidToDate, TotalPastDue, Escrow, AppliedEscrow, UnpaidEscrow, EscrowBucket, Principal, Interest, Fees, BilledFees, OtherEscrow, FinalAmount, FinalInterestAmount, Chapter4PreviousYear, Payments: Delinquent, FixPayment, Transaction, LoanPayOff, PrincipalAndInterest, AvailableCash, AvailableCheck, AvailableCredit, Sweep, Float, MemoLedger, Memo, AvailablePending, LedgerPending, NSFTimes \n"
      example: Available
    Amount:
      maxLength: 23
      pattern: "^-?([0]|([1-9][0-9]{0,12}))([.][0-9]{0,8})?$"
      type: string
      description: "Number of monetary units where the size of the decimal part is defined by the currency.\nNote: \ntotal number of digits: 21\nnumber of digits in fractional part: 8\nmaxInclusive: 9999999999999.99999999\nminInclusive: -9999999999999.99999999\n"
      example: "100"
    Audit:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/AuditStatus'
        creationDate:
          $ref: '#/components/schemas/Date'
        creationBranchId:
          $ref: '#/components/schemas/Id'
        creationUser:
          $ref: '#/components/schemas/User'
        lastModificationChannel:
          $ref: '#/components/schemas/CommunicationChannelName'
        lastModificationDate:
          $ref: '#/components/schemas/Date'
        channels:
          type: array
          description: Activity audit throught communication channles
          items:
            $ref: '#/components/schemas/AuditChannel'
      description: |
        Resource Audit Information. Captures the creation, modification and maintenance details.
    AuditStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Maintenance status of a resource. Possible values: Requested, Created, Changed, Deleted
    User:
      type: object
      properties:
        personId:
          $ref: '#/components/schemas/Id'
        userId:
          $ref: '#/components/schemas/Id'
        userName:
          $ref: '#/components/schemas/PartyName'
        purpose:
          $ref: '#/components/schemas/Description'
        audit:
          $ref: '#/components/schemas/Audit'
      description: User information of a person.
    CommunicationChannelName:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Channel used to communicate with a party. Possible Values: Email, Fax, File, Online, PostalService, LiveSupport, ATM, IVR, Kiosk, Mobile, OnlineBanking, Phone, SMS, Card, InPerson, Operator, VRU, Telebanc, Notice, ExceptionReport, Statement, TextMessage, Teller, Walkin, Voice, Web, Retailer, WesternUnion, Electronic, CenterView, Paper, WWW.
      example: Email
    AuditChannel:
      type: object
      properties:
        lastActivityDate:
          $ref: '#/components/schemas/Date'
        name:
          $ref: '#/components/schemas/CommunicationChannelName'
        activityType:
          $ref: '#/components/schemas/AuditActivityType'
        amount:
          $ref: '#/components/schemas/PositiveAmount'
      description: |
        Audit Information by Channel. Captures data, activity and maintenance details.
    AuditActivityType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Maintenance activity of a resource. Possible values: Transaction, Modification, Deposit, Withdrawal, Creation, DirectDeposit, CardActivation, CardActivationByCallerId, CardActivationByCodeAndCallerId, Closure, HSACreation
    PositiveAmount:
      maxLength: 23
      pattern: "^([0]|([1-9][0-9]{0,12}))([.][0-9]{0,8})?$"
      type: string
      description: "Number of monetary units where the size of the decimal part is defined by the currency.\nNote: \ntotal number of digits: 21\nnumber of digits in fractional part: 8\nmaxInclusive: 9999999999999.99999999\nminInclusive: 0\n"
      example: "100"
    Error:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: |
            A broad categorization of the error. A short string indicating the error code reported. Safe for programmatic use.
          example: InvalidRequest
        message:
          type: string
          description: |
            A human-readable representation of the error. This may change over time and is not safe for programmatic use.
          example: Invalid Request
        details:
          type: array
          description: |
            An array of details about specific errors that led to this reported error.
          items:
            $ref: '#/components/schemas/ErrorDetail'
        innerError:
          $ref: '#/components/schemas/InnerError'
        debugMessage:
          type: object
          description: |
            Message used to debug the root cause of the error. Contents should not be used in consumer's business logic. Can change at any time and should only be used for consumer to communicate with the data provider about an issue.
        documentationUrl:
          type: string
          description: |
            URI reference that identifies the
            problem type.  This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type.
          example: /errors/invalid-credentials
    ErrorDetail:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: |
            A short string indicating the error code reported. Safe for programmatic use.
          example: InvalidRequest
        message:
          type: string
          description: |
            A human-readable representation of the error. This may change over time and is not safe for programmatic use.
          example: Invalid Request
        target:
          type: string
          description: |
            The target of the error.
          example: Invalid Request
    InnerError:
      type: object
      properties:
        code:
          type: string
          description: |
            A short string indicating the error code reported. Safe for programmatic use.
        message:
          type: string
          description: |
            The description of the error code
        innerError:
          $ref: '#/components/schemas/InnerError'
      description: |
        An object containing more specific information than the current object about the error.
    AccountRequest:
      required:
        - accountType
        - ownershipType
        - parties
      type: object
      properties:
        payout:
          $ref: '#/components/schemas/AccountPayout'
        securedIndicator:
          type: boolean
          description: |
            Indicates whether the Account is secure.
        securedType:
          $ref: '#/components/schemas/SecuredAccountType'
        payment:
          $ref: '#/components/schemas/AccountPaymentDetails'
        accountBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        balanceType:
          $ref: '#/components/schemas/AccountBalanceType'
        productId:
          $ref: '#/components/schemas/ProductId'
        pricingStrategyId:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        initialAmount:
          $ref: '#/components/schemas/Amount'
        depositDate:
          description: Initial desposit date
          $ref: '#/components/schemas/Date'
        contract:
          $ref: '#/components/schemas/AccountContract'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountDetailedParty'
        maturityDate:
          $ref: '#/components/schemas/Date'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        referenceAccount:
          description: |
            Account used as a reference for the account opening.
          $ref: '#/components/schemas/Id'
        pastDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        initialFundingSource:
          $ref: '#/components/schemas/FundingSource'
        projectedDates:
          type: array
          description: |
            Projected account dates. Possible values: AnticipatedPayOff.
          items:
            $ref: '#/components/schemas/SpotDate'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        statement:
          $ref: '#/components/schemas/FinancialStatement'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculation'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeCalculation'
        taxes:
          type: array
          items:
            $ref: '#/components/schemas/Tax'
        communicationChannels:
          type: array
          items:
            $ref: '#/components/schemas/CommunicationChannel'
        relationshipId:
          description: |
            This id gives the ability to view a party’s total relationship with the bank. The relationship Id ties multiple parties and accounts together. This code is also used to reduce mailing costs during marketing campaigns to avoid sending duplicate materials to parties residing at the same address.
          $ref: '#/components/schemas/Id'
        codes:
          type: array
          items:
            $ref: '#/components/schemas/GenericAccountCode'
        print:
          $ref: '#/components/schemas/AccountPrintOptions'
        bill:
          $ref: '#/components/schemas/AccountBillDetails'
        collateral:
          $ref: '#/components/schemas/Collateral'
        contact:
          $ref: '#/components/schemas/AccountContactDetails'
        renewal:
          $ref: '#/components/schemas/AccountRenewal'
        servicerAlerts:
          type: array
          description: Account alerts to be received by the account servicer.
          items:
            $ref: '#/components/schemas/ServicerAlert'
        history:
          $ref: '#/components/schemas/AccountHistory'
        status:
          $ref: '#/components/schemas/AccountDetailedStatus'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        comments:
          type: array
          description: |
            Bank comnents of the account.
          items:
            $ref: '#/components/schemas/Comment'
        profile:
          $ref: '#/components/schemas/AccountProfile'
        products:
          type: array
          description: Product information at account level.
          items:
            $ref: '#/components/schemas/Product'
        documents:
          type: array
          description: Documents related to the Account.
          items:
            $ref: '#/components/schemas/DocumentDescriptor'
    AccountIdentifiers:
      type: object
      properties:
        accountBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
    RoutingNumber:
      type: object
      properties:
        number:
          $ref: '#/components/schemas/ABANumber'
        routingNumberType:
          $ref: '#/components/schemas/RoutingNumberType'
    ABANumber:
      maxLength: 9
      minLength: 9
      type: string
      description: "The routing number (sometimes referred to as an ABA routing number, regarding the American Bankers Association) is a sequence of nine digits used by banks to identify specific financial institutions within the United States.  \n"
      example: "012345678"
    RoutingNumberType:
      maxLength: 9
      minLength: 9
      type: string
      description: |
        Different types of payments may require different bank routing numbers. Some possible values: ACH, WIRE, ElectronicCheck, PaperCheck
      example: ACH
    CreditAccountDetails:
      type: object
      properties:
        securedIndicator:
          type: boolean
          description: |
            Indicates whether the Account is secure.
        securedType:
          $ref: '#/components/schemas/SecuredAccountType'
        payment:
          $ref: '#/components/schemas/AccountPaymentDetails'
    SecuredAccountType:
      maxLength: 17
      minLength: 1
      type: string
      description: |
        Indicates how the account is secured. Possible Values: Collateral, Agent
      example: Collateral
    AccountPaymentDetails:
      type: object
      properties:
        numberOfPayments:
          type: integer
          description: Number of payments.
        next:
          $ref: '#/components/schemas/RepaymentSchedule'
        last:
          $ref: '#/components/schemas/Repayment'
        alternate:
          $ref: '#/components/schemas/RepaymentSchedule'
        regular:
          $ref: '#/components/schemas/RepaymentSchedule'
        payments:
          type: array
          description: "All the payments done, scheduled or not. \n"
          items:
            $ref: '#/components/schemas/Repayment'
        frequency:
          description: |
            How often principal payments are due.
          $ref: '#/components/schemas/Frequency'
        interestFrequency:
          description: |
            How often interest payments are due.
          $ref: '#/components/schemas/Frequency'
        draftDayAdjuster:
          description: |
            Number of days before or after an automatic payment is debited from an account.
          $ref: '#/components/schemas/Day'
        automaticIndicator:
          type: boolean
          description: |
            Indicates whether, prior to the loan going past due, a payment is automatic generated.
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        firstPaymentDate:
          description: |
            First payment date
          $ref: '#/components/schemas/Date'
        bill:
          $ref: '#/components/schemas/RepaymentBillDetails'
      description: Account payment information.
    RepaymentSchedule:
      type: object
      properties:
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        repaymentScheduleId:
          description: |
            Unique and unambiguous identification of the payment schedule.
          $ref: '#/components/schemas/Id'
        amount:
          description: "Amount to be paid \n"
          $ref: '#/components/schemas/PositiveAmount'
        minimumDueAmount:
          description: |
            Minimum payment amount due for the account
          $ref: '#/components/schemas/PositiveAmount'
        expectedDate:
          description: |
            Expected date whereby the amount must be paid.
          $ref: '#/components/schemas/Date'
        dueDate:
          description: |
            Latest date whereby the amount of money must be paid.
          $ref: '#/components/schemas/Date'
        repaymentType:
          $ref: '#/components/schemas/LoanPaymentType'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        delinquentDays:
          type: integer
          description: Number of days delinquent.
        instruction:
          $ref: '#/components/schemas/CreditTransferDetail'
        balances:
          type: array
          description: Other payment amounts
          items:
            $ref: '#/components/schemas/Balance'
      description: |
        An amount that must be paid no sooner than the expected payment date and no later than the due date.
    TransactionCodes:
      type: object
      properties:
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
      description: Generic transaction code definition.
    GenericTransactionCode:
      type: object
      properties:
        codeType:
          maxLength: 50
          minLength: 1
          type: string
          description: |
            Code type in PascalCase form. Possible values are: DetailBAI, SummaryBAI, TransactionCode, BatchNumber, MICRAccountNumber, CustomerTransferCode, WireTransferScope, WireTransferDirection, CoreTransactionCode
          example: DetailBAI
        name:
          type: string
          description: |
            Name of the code in PascalCase. Possible values: ResponseCode, PromotionCode, Domain, Family, Subfamily, MT940, SourceCode, TaxDeferredContributionCode, International, Domestic, Incoming, Outgoing.
        value:
          maxLength: 35
          minLength: 1
          type: string
          description: Code value.
          example: "195"
        description:
          $ref: '#/components/schemas/Title'
      description: Generic transaction code definition.
    LoanPaymentType:
      maxLength: 35
      minLength: 1
      type: string
      description: "Possible values are: \n Interest,\n Principal,\n Curtailment, LossMitigation.\n"
      example: Principal
    PaymentIdentification:
      required:
        - number
      type: object
      properties:
        number:
          maxLength: 40
          minLength: 1
          type: string
          description: Unique and unambiguous identification of a payment.
        schemeName:
          maxLength: 40
          minLength: 1
          type: string
          description: |
            Name of other payment identificaction. For instance,
            ISOInitiationMessageIdentifier, InstructionIdentification
              (Unique identification, as assigned by the first instructing agent, to unambiguously identify the transaction that is passed on, unchanged, throughout the entire interbank chain Usage: The transaction identification can be used for reconciliation, tracking or to link tasks relating to the transaction on the interbank level. The instructing agent has to make sure that the transaction identification is unique for a pre-agreed period), UETR (Universally unique identifier to provide an end-to-end reference of a payment transaction),  ExecutionIdentification, EndToEndIdentification, InstructionIdentification, TransactionIdentification, ClearingSystemReference, CreditorReference, CounterpartyReference, UniqueTradeIdentifier, ClearingBrokerIdentification, UniqueTradeIdentifier, ClearingBrokerIdentification, CommonIdentification, ReferenceNumber, TracerNumber, DraftNumber.
          example: UETR
        issuer:
          type: string
          description: Entity that assigns the identification.
          example: Baltimore
    CreditTransferDetail:
      required:
        - paymentMethod
        - paymentType
      description: Further details on the credit transfer instruction
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        amount:
          description: |
            Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
          $ref: '#/components/schemas/Amount'
        taxAmount:
          description: |
            Tax amount to be deducted.
          $ref: '#/components/schemas/Amount'
        creditorAccountId:
          $ref: '#/components/schemas/AccountId'
        paymentProcessing:
          $ref: '#/components/schemas/PaymentProcessingDetail'
        chargeBearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        creditor:
          $ref: '#/components/schemas/PartyIdentification'
    PaymentIdentifiers:
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
      description: Set of elements used to reference a payment instruction.
    PaymentMethod:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the means of payment that will be used to move the amount of money. Possible values are:  Check, CreditTransfer. More specific values: ECheck, CreditCard, CommercialCreditCard, CheckCard, BusinessCheck, PinlessDebit, PINDebit, POS, Cash, ACHCredit, LockBox, RemoteCapture, EFTCredit, FedWire, ACHDebit, EFT, MoneyOrder, Coupon.
      example: CreditTransfer
    PaymentType:
      maxLength: 35
      minLength: 1
      type: string
      description: "Specifies the type of Payment. Possible values: LiquidityTransfer, OnUs, ACH, Wire, NotOnUs.   \n"
      example: OnUs
    PaymentProcessingDetail:
      type: object
      properties:
        instructionPriority:
          $ref: '#/components/schemas/InstructionPriority'
        serviceLevel:
          $ref: '#/components/schemas/ServiceLevel'
        clearingChannel:
          $ref: '#/components/schemas/ClearingSystem'
        localInstrument:
          $ref: '#/components/schemas/LocalInstrument'
        categoryPurpose:
          $ref: '#/components/schemas/CategoryPurpose'
      description: Provides further details of the type of payment.
    InstructionPriority:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction. Possible values are: High, Normal.
      example: "123456789"
    ServiceLevel:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies a pre-agreed service between the parties. Some ISO compliant values from ExternalServiceLevel1Code are:
        BookTransaction, TrackedCustomerCreditTransfer, TrackedStopAndRecall, TrackedOutboundCorporateTransfer, TrackedFinancialInstitutionTransfe, NonurgentPriorityPayment, NonurgentPayment, EBAPriorityService, SameDayValue, DomesticChequeClearingAndSettlement, UrgentPayment, UrgentPaymentNetSettlement, InstantCreditTransferOrInstantDirectDebit, ServiceRequestToPay, ScheckVerarbeitungAustria, TrackedCaseManagement, TrackedInboundCustomerCreditTransfer, TrackedInstantCustomerCreditTransfer, TrackedLowValueCrossBorderCustomerCreditTransfer.
      example: BookTransaction
    ClearingSystem:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the clearing system identification. Some ISO compliant values from ExternalCashClearingSystem1Code are:
         USFedACH, USFedNow, USFedwireFunds, ACH, EBAEuro1Step1, CanadaACSS, Albania, Austrian, NewZealand, Azerbaijan, BosniaHerzegovina, SwedenBGC, Ecuador, Barbados, Belgium, Bulgaria, Bahamas, Botswana, Finland, BankOfJapanNet, Italy, Philippines, CanadaCAD, SpainCAM, CentralBankOfArubaCSM, CentraleBankVanCuraçaoEnSintMaartenCSM, Ireland, Peru, USTCHChips,UnitedKingdom, China, CentralInteroperabilityService, ColumbiaCEDEC, ColumbiaCENIT, ColumbiaCUD, DenmarkDDK,Denmark, EBAEuro1, GermanyELS, Germany, ECB, USTCHEPN, EBAStep1, ForeignExchangeYenClearing, FasterPaymentsServices, Ghana, HongKongCHAT, HongKongFPS, Croatia, Greece, Hungary, SpainIberpayInstantPayments, DEandNLEquens, IndiaImmediatePaymentService, Jordan, Kenya, Luxemburg, SriLanka, Latvia, CanadaLVTS, LynxCanada, Singapore, SouthAfrica, MacaoRTGS, Malta, Mauritius, Namibia, Norway, NorwayNICSReal, AustraliaNPP, USNSS, NewZealandRTGS, Switzerland, AustraliaPDS, Egypt, FrancePNS, AustrianCSM, Angola, Venezuela, RomaniaEPO, RomaniaGSRS, RTGS, GermanyRTGSPlus, RTRCanada, RPSAndSEPAClearer, Chili, SwedenSEC, euroSIC, SIC, SICIP, Slovania, SpainES, Portugal, SwedenSSK, EBAClearingSTEP2, UnitedKingdomGBP, FranceFR, USTCHRealTime, Target, Thailand, Thailand-NITMX, Tanzania, Netherlands, TrinidadAndTobago, CanadaUSBE, Uganda, IndiaUnifiedPaymentsInterface, VocaLink, EBASTEP2XCT, Zengin, Zimbabwe, Zambia, Iceland, NorwayRTGS, NGInterswitch, P27RealTime, P27, UnitedKingdomUKD, SingaporeSCRIPS, RIXRTGSSverigesRiksbank
      example: ACH
    LocalInstrument:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        This element is used to specify a local clearing option and/or qualify the service or service level. For ACH service Level offers more detailed information about the authorization method of the ACH transaction. Posible values for ACH Entry Class or SEC code: PPD, CCD, CTX
      example: CCD
    CategoryPurpose:
      maxLength: 35
      minLength: 1
      type: string
      description: "Specifies the high level purpose of the instruction based on a set of pre-defined categories.\n Usage: This is used by the initiating party to provide information concerning the processing of the payment. It is likely to trigger special processing by any of the agents involved in the payment chain. Some ISO compliant values are from ExternalCategoryPurpose1Code: \n  BonusPayment, CashManagementTransfer, CardBulkClearing, CreditCardPayment, TradeSettlementPayment, DebitCardPayment, Dividend, DeliverAgainstPayment, EPayment,FeeCollectionAndInterest, FeeCollection,PersontoPersonPayment, GovernmentPayment, Hedging, IrrevocableCreditCardPayment, IrrevocableDebitCardPayment, IntraCompanyPayment, Interest, LockboxTransactions, Loan, Commercial, Consumer, PensionPayment, Represented, ReimbursementReceivedCreditTransfer, ReceiveAgainstPayment, SalaryPayment, Securities, SocialSecurityBenefit, SupplierPayment, TaxPayment, Trade, TreasuryPayment, ValueAddedTaxPayment, WithHolding, CashManagementSweepAccount, CashManagementTopAccount, CashManagementZeroBalanceAccount\n"
      example: SalaryPayment
    ChargeBearerType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies which party(ies) will pay charges due for processing of the instruction.
        BorneByDebtor, BorneByCreditor,  Shared, FollowingServiceLevel
      example: Shared
    PartyIdentification:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/PartyName'
        account:
          $ref: '#/components/schemas/PaymentAccount'
        paymentReference:
          $ref: '#/components/schemas/Description'
        postalAddress:
          $ref: '#/components/schemas/PostalAddress'
        agent:
          $ref: '#/components/schemas/FinancialInstitution'
        placeAndDateOfBirth:
          $ref: '#/components/schemas/PlaceAndDateOfBirth'
        contact:
          $ref: '#/components/schemas/PaymentPartyContactDetails'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PartyGenericIdentification'
        countryOfResidence:
          $ref: '#/components/schemas/CountryCode'
        notifyPartyIndicator:
          type: boolean
    PaymentAccount:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/AccountName'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        accountBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        routingNumber:
          $ref: '#/components/schemas/ABANumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
    PostalAddress:
      type: object
      properties:
        addressCode:
          type: string
          description: |
            This code is used to identify parties that share the same address or to associate an existing address with a specific party. Providing this code eliminates the need to separately enter the address details.
        addressBookIndicator:
          type: string
          description: |
            If true, the address is kept in the system even if the person is no longer a customer.
        addressType:
          type: string
          description: |
            Specifies the type of address, in PascalCase form. Possible values are:  PhysicalAddress, Postal, POBox, Residential, Permanent, Temporary, Alternative,  Previous.
          example: Postal
        addressPurpose:
          type: string
          description: "Specifies the purpose of an address, in PascalCase form. Possible values are: \nMailTo, \nDeliveryTo,\nBilling,\nTax,\nForeignTaxRecipient\nPlaceOfOperation,\nPlaceOfRegistration,\nplaceOfFormation,\nMarketing, Statements, Business, Administrative, PreviousPlace, Headquarter, BranchStore, Branch, Property, Military, Secondary, Personal, Annex, Inquiry.\n"
          example: Billing
        primaryIndicator:
          $ref: '#/components/schemas/PrimaryContactIndicator'
        careOf:
          maxLength: 100
          minLength: 1
          type: string
          description: |
            Identifies an addressee that is accepting the correspondence for the intended recipient. Using care of ensures the correspondence reaches the right recipient rather than getting returned to the sender.
          example: C/O Company Name
        department:
          maxLength: 70
          minLength: 1
          type: string
          description: Identification of a division of a large Organization or building.
          example: A
        subDepartment:
          maxLength: 70
          minLength: 1
          type: string
          description: Identification of a sub-division of a large Organization or building.
          example: B
        streetName:
          maxLength: 70
          minLength: 1
          type: string
          description: Name of a street or thoroughfare.
          example: First Street
        firstCrossStreetName:
          maxLength: 70
          minLength: 1
          type: string
          description: Name of a the first cross street.
        secondCrossStreetName:
          maxLength: 70
          minLength: 1
          type: string
          description: Name of a the second cross street.
          example: Second Street
        buildingNumber:
          maxLength: 16
          minLength: 1
          type: string
          description: Number that identifies the position of a building or house on a street.
          example: "11407"
        buildingName:
          maxLength: 35
          minLength: 1
          type: string
          description: Name of the building or house.
          example: Tall Tower
        floor:
          maxLength: 70
          minLength: 1
          type: string
          description: Floor or storey within a building.
          example: "20"
        postBox:
          maxLength: 16
          minLength: 1
          type: string
          description: "Numbered box in a post office, assigned to a person or Organization, where letters are kept until called for."
          example: MY779
        room:
          maxLength: 70
          minLength: 1
          type: string
          description: Building room number.
          example: "22"
        postCode:
          $ref: '#/components/schemas/PostCode'
        carrierRoute:
          $ref: '#/components/schemas/CarrierRoute'
        censusTract:
          $ref: '#/components/schemas/CensusTract'
        censusBlock:
          $ref: '#/components/schemas/CensusBlock'
        cBSACode:
          $ref: '#/components/schemas/CBSACode'
        cBSAType:
          $ref: '#/components/schemas/CBSAType'
        foreignIndicator:
          type: boolean
          description: Indicates whether the postal address is from a foreign country.
        townName:
          $ref: '#/components/schemas/TownName'
        townLocationName:
          maxLength: 35
          minLength: 1
          type: string
          description: Specific location name within the town.
          example: Clackamas
        districtName:
          maxLength: 35
          minLength: 1
          type: string
          description: Identifies a subdivision within a country sub-division.
          example: Columbia
        countyName:
          maxLength: 35
          minLength: 1
          type: string
          description: Identifies a county within a country sub-division.
          example: Cook
        countrySubDivision:
          $ref: '#/components/schemas/CountrySubdivision'
        countrySubDivisionCode:
          $ref: '#/components/schemas/CountrySubdivisionCode'
        country:
          $ref: '#/components/schemas/CountryCode'
        addressLine:
          type: array
          description: "Information that locates and identifies a specific address, as defined by postal services, presented in free format text."
          items:
            maxLength: 70
            minLength: 1
            type: string
            example: "11407 Sw Amu st, Suite MY777"
        temporaryIndicator:
          type: boolean
          description: Indicates whether the address is temporary or not.
          example: true
        period:
          description: |
            The period of use of the address information. Could be also used as a recurring anual period.
          $ref: '#/components/schemas/DateTimePeriod'
        codes:
          type: array
          description: |
            Codes related to postal address or internal handling codes associated with the address. Possible Values: HandlingCode, HandlingCodeOption, AddressFormat.
          items:
            $ref: '#/components/schemas/GenericCode'
        identifiers:
          type: array
          description: |
            Postal address identifiers are used to identify parties that share the same address or to associate an existing address with a specific party. Possible scheme name values: AddressIdentifier.
          items:
            $ref: '#/components/schemas/GenericIdentification'
      description: |
        Information that locates and identifies a specific address, as defined by postal services.
    PrimaryContactIndicator:
      type: boolean
      description: "Indicates whether the contact informacion is primary. \n"
    PostCode:
      maxLength: 16
      minLength: 1
      type: string
      description: |
        Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail. In US may consists of two parts: the five-digit ZIP Code '97062' and the ZIP+4 Code '6884'.
      example: 97062-6884
    CarrierRoute:
      maxLength: 4
      minLength: 1
      type: string
      description: |
        A Carrier Route is a designated geographic area assigned to individual postal carriers by the United States Postal Service (USPS) to facilitate efficient mail delivery within specific regions.
      example: C001
    CensusTract:
      maxLength: 5
      minLength: 5
      type: string
      description: |
        A census tract, census area, census district or meshblock is a geographic region defined for the purpose of taking a census
      example: "12345"
    CensusBlock:
      maxLength: 4
      minLength: 4
      type: string
      description: |
        Census blocks are used to partition counties into smaller areas for the purpose of collecting and presenting census data.
      example: "1234"
    CBSACode:
      maxLength: 5
      minLength: 5
      type: string
      description: |
        Core-based statistical area. Metropolitan statistical area (MSA) is the formal definition of a region that consists of a city and surrounding communities that are linked by social and economic factors. Micropolitan Statistical Areas (MISA) are CBSAs associated with at least one urban cluster that has a population of at least 10,000, but less than 50,000.  The micropolitan statistical area comprises the central county or counties or equivalent entities containing the core, plus adjacent outlying counties having a high degree of social and economic integration with the central county as measured through commuting.
      example: "49780"
    CBSAType:
      maxLength: 10
      minLength: 1
      type: string
      description: |
        Type of Core-based statistical area. Possible values: MSA, MISA
      example: MSA
    TownName:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Name of a built-up area, with defined boundaries, and a local government. Also city name.
      example: San Diego
    CountrySubdivision:
      maxLength: 35
      minLength: 1
      type: string
      description: "Name of a country subdivision such as state, region, county."
      example: Oregon
    CountrySubdivisionCode:
      pattern: "^[A-Z]{2,2}\\-[0-9A-Z]{1,3}"
      type: string
      description: |
        Code to identify a name of a unit resulting from the division of a country, dependency, or other area of special geopolitical interest contained in ISO 3166-1, on the basis of country names obtained from the United Nations (ISO 3166-2: Country subdivision code).
      example: AR-B
    CountryCode:
      pattern: "^([A-Z]{2,2})?$"
      type: string
      description: |
        Country name obtained from the United Nations (ISO 3166, Alpha-2 code).
      example: US
    GenericIdentification:
      required:
        - number
        - schemeName
      type: object
      properties:
        number:
          maxLength: 40
          minLength: 1
          type: string
          description: Unique and unambiguous identification.
          example: 123-45-6789
        schemeName:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Name of the identification scheme.
        issuer:
          type: string
          description: Entity that assigns the identification.
          example: UnitedStates
        issueDate:
          $ref: '#/components/schemas/Date'
        expirationDate:
          $ref: '#/components/schemas/Date'
    FinancialInstitution:
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationIdentification'
        clearingSystemMemberIdentification:
          $ref: '#/components/schemas/ClearingSystemIdentification'
        memberIdentification:
          maxLength: 35
          minLength: 1
          type: string
        name:
          maxLength: 35
          minLength: 1
          type: string
        postalAddress:
          $ref: '#/components/schemas/PostalAddress'
    OrganizationIdentifiers:
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationIdentification'
    OrganizationIdentification:
      description: Unique and unambiguous way to identify an Organization.
      type: object
      properties:
        number:
          maxLength: 40
          minLength: 1
          type: string
          description: Unique and unambiguous identification.
          example: 123-45-6789
        country:
          $ref: '#/components/schemas/CountryCode'
        countrySubdivisionCode:
          $ref: '#/components/schemas/CountrySubdivisionCode'
        applyDate:
          $ref: '#/components/schemas/Date'
        verificationDate:
          description: |
            Verification or certification date.
          $ref: '#/components/schemas/Date'
        foreignIDIndicator:
          type: boolean
          description: Indicates whether the identifications is from a foreign country.
        taxIDIndicator:
          type: boolean
          description: Indicates whether the identifications is Tax Id.
        schemeName:
          maxLength: 40
          minLength: 1
          type: string
          description: "Name of the identification scheme, in PascalCase form. Possible values are: \nBankPartyIdentification\nCentralBankIdentificationNumber\nClearingIdentificationNumber\nCertificateOfIncorporationNumber\nCountryIdentificationCode\nCustomerNumber\nDataUniversalNumberingSystem\nEmployerIdentificationNumber\nGS1GLNIdentifier\nSIREN\nSIRET\nTaxIdentificationNumber\nBusinessDomainIdentifier\nBusinessOtherIdentification\nEmployerIdentificationNumber\nBICIdentifier\nLEIIdentifier\nExternalOrganizationNumber,\nExternalOrganizationType, \nExternalOrganizationId,\nMemberNumber,\nUSVisa.\n"
          example: TaxIdentificationNumber
        issuer:
          type: string
          description: Entity that assigns the identification.
          example: UnitedStates
        issueDate:
          $ref: '#/components/schemas/Date'
        expirationDate:
          $ref: '#/components/schemas/Date'
        displayOption:
          $ref: '#/components/schemas/PartyDisplayOption'
    PartyIdInformation:
      type: object
      properties:
        number:
          maxLength: 40
          minLength: 1
          type: string
          description: Unique and unambiguous identification.
          example: 123-45-6789
        issuer:
          type: string
          description: Entity that assigns the identification.
          example: Baltimore
        country:
          $ref: '#/components/schemas/CountryCode'
        countrySubdivisionCode:
          $ref: '#/components/schemas/CountrySubdivisionCode'
        issueDate:
          $ref: '#/components/schemas/Date'
        applyDate:
          $ref: '#/components/schemas/Date'
        expirationDate:
          $ref: '#/components/schemas/Date'
        verificationDate:
          description: |
            Verification or certification date.
          $ref: '#/components/schemas/Date'
        foreignIDIndicator:
          type: boolean
          description: Indicates whether the identifications is from a foreign country.
        taxIDIndicator:
          type: boolean
          description: Indicates whether the identifications is Tax Id.
        displayOption:
          $ref: '#/components/schemas/PartyDisplayOption'
    PartyDisplayOption:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Indicates display options for party attributes. Possible Values: TaxIdMasked
    ClearingSystemIdentification:
      maxLength: 60
      minLength: 1
      type: string
      description: "Specifies the clearing system member identification. Some ISO compliant values from ExternalCashClearingSystem1Code are:\n UnitedStatesRoutingNumberFedwireNACHA, \n AustrianBankleitzahl, AustralianBankStateBranchCodeBSB,CanadianPaymentsAssociationPaymentRoutingNumber,SwissFinancialInstitutionIdentificationShort,SwissFinancialInstitutionIdentificationLong,CNAPSIdentifier, GermanBankleitzahl, SpanishDomesticInterbankingCode, UKDomesticSortCode, HellenicBankIdentificationCode, HongKongBankCode, IrishNationalClearingCode, IndianFinancialSystemCode, ItalianDomesticIdentificationCode, JapanZenginClearingCode, NewZealandNationalClearingCode, PolishNationalClearingCode, PortugueseNationalClearingCode, RussianCentralBankIdentificationCode, SwedenBankgiroClearingCode, IBGSortCode, ThaiCentralBankIdentificationCode, FinancialInstitutionCode, CHIPSParticipantIdentifier, SouthAfricanNationalClearingCode, NewZealandRTGSClearingCode\n"
      example: UnitedStatesRoutingNumberFedwireNACHA
    PlaceAndDateOfBirth:
      description: Date and place of birth of a person.
      type: object
      properties:
        countrySubdivision:
          $ref: '#/components/schemas/CountrySubdivision'
        townName:
          $ref: '#/components/schemas/TownName'
        country:
          $ref: '#/components/schemas/CountryCode'
        birthDate:
          description: Date on which a person is born.
          $ref: '#/components/schemas/Date'
    Place:
      type: object
      properties:
        countrySubdivision:
          $ref: '#/components/schemas/CountrySubdivision'
        townName:
          $ref: '#/components/schemas/TownName'
        country:
          $ref: '#/components/schemas/CountryCode'
      description: "Town, CountrySubdivision and Country ."
    PaymentPartyContactDetails:
      type: object
      properties:
        contactMethods:
          type: array
          items:
            $ref: '#/components/schemas/GenericContact'
        preferredMethod:
          maxLength: 35
          minLength: 1
          type: string
          description: "Preferred method used to reach the contact, in PascalCase form. Possible values are:  \nLetter, Email, Phone, Fax, MobileOrCellPhone.\n"
          example: Email
        preferredLanguage:
          $ref: '#/components/schemas/PreferredLanguage'
      description: Specifies the contact details of a person.
    GenericContact:
      type: object
      properties:
        channelType:
          description: |
            Communication device number or electronic address used for communication: Fax, Email, Mobile, Phone.
          $ref: '#/components/schemas/CommunicationChannelName'
        identification:
          $ref: '#/components/schemas/CommunicationChannelIdentification'
      description: Communication device number or electronic address used for communication.
    CommunicationChannelIdentification:
      maxLength: 128
      minLength: 1
      type: string
      description: Communication value such as phone number or email address.
      example: 011-02010020202
    PreferredLanguage:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Language of the contact person. Names according to the language list provided in the ISO 639-1 codes. Some possible values: Chinese, Spanish, French, English, Japanese, Italian, German, Default.
      example: English
    PartyGenericIdentification:
      required:
        - number
        - schemeName
      type: object
      properties:
        number:
          maxLength: 40
          minLength: 1
          type: string
          description: Unique and unambiguous identification of an organization.
          example: 123-45-6789
        schemeName:
          $ref: '#/components/schemas/PartySchemeName'
        issuer:
          type: string
          description: Entity that assigns the identification.
          example: UnitedStates
        issueDate:
          $ref: '#/components/schemas/Date'
        expirationDate:
          $ref: '#/components/schemas/Date'
      description: Unique and unambiguous way to identify a party.
    PartySchemeName:
      maxLength: 35
      minLength: 1
      type: string
      description: "Name of the identification scheme, in PascalCase form. Possible values are: \nBankPartyIdentification\nCentralBankIdentificationNumber\nClearingIdentificationNumber\nCertificateOfIncorporationNumber\nCountryIdentificationCode\nCustomerNumber\nDataUniversalNumberingSystem\nEmployerIdentificationNumber\nGS1GLNIdentifier\nSIREN\nSIRET\nBusinessDomainIdentifier\nBusinessOtherIdentification\nAlienRegistrationNumber\nResidentAlienCard\nPassportNumber\nCustomerIdentificationNumber\nDriversLicenseNumber\nEmployeeIdentificationNumber\nNationalIdentityNumber\nSocialSecurityNumber\nTelephoneNumber\nTaxIdentificationNumber\nPersonCommercialIdentification\nLEIIdentifier\nBICIdentifier\nPermanentAccountNumberCard\n"
      example: TaxIdentificationNumber
    Repayment:
      type: object
      properties:
        paymentId:
          $ref: '#/components/schemas/PaymentId'
        reversalIndicator:
          $ref: '#/components/schemas/ReversalIndicator'
        remittanceInformation:
          $ref: '#/components/schemas/RemittanceInformation'
        valueDate:
          description: |
            Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit entry.
              Usage: If entry status is pending and value date is present, then the value date refers to an expected/requested value date.
          $ref: '#/components/schemas/DateAndTime'
        bookingDate:
          description: |
            Date and time when an entry is posted to an account on the account servicer's books.
            Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.
          $ref: '#/components/schemas/DateAndTime'
        charges:
          type: array
          description: "All charges and taxes applied to the transaction. Also can include interests if the bank does not discrimate between them. \n"
          items:
            $ref: '#/components/schemas/TransactionCharge'
        interests:
          type: array
          description: All interests included in the transaction amount.
          items:
            $ref: '#/components/schemas/TransactionInterest'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        repaymentScheduleId:
          description: |
            Unique and unambiguous identification of the payment schedule.
          $ref: '#/components/schemas/Id'
        amount:
          description: "Amount to be paid \n"
          $ref: '#/components/schemas/PositiveAmount'
        minimumDueAmount:
          description: |
            Minimum payment amount due for the account
          $ref: '#/components/schemas/PositiveAmount'
        expectedDate:
          description: |
            Expected date whereby the amount must be paid.
          $ref: '#/components/schemas/Date'
        dueDate:
          description: |
            Latest date whereby the amount of money must be paid.
          $ref: '#/components/schemas/Date'
        repaymentType:
          $ref: '#/components/schemas/LoanPaymentType'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        delinquentDays:
          type: integer
          description: Number of days delinquent.
        instruction:
          $ref: '#/components/schemas/CreditTransferDetail'
        balances:
          type: array
          description: Other payment amounts
          items:
            $ref: '#/components/schemas/Balance'
        paymentDate:
          description: |
            Original date on which the payment was posted to the account.
          $ref: '#/components/schemas/Date'
        paymentAmount:
          description: |
            Amount payed.
          $ref: '#/components/schemas/Date'
        cycleDate:
          description: |
            Date of the billing cycle for the account.
          $ref: '#/components/schemas/Date'
        paymentReason:
          $ref: '#/components/schemas/PaymentPurpose'
        paymentName:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Human readable pascal case identifier of the payment concept. Possible values: CurrentLoanNextPayment.
      description: |
        An amount that was already paid.
    TransactionPaymentDetails:
      type: object
      properties:
        paymentId:
          $ref: '#/components/schemas/PaymentId'
        reversalIndicator:
          $ref: '#/components/schemas/ReversalIndicator'
        remittanceInformation:
          $ref: '#/components/schemas/RemittanceInformation'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        valueDate:
          description: |
            Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit entry.
              Usage: If entry status is pending and value date is present, then the value date refers to an expected/requested value date.
          $ref: '#/components/schemas/DateAndTime'
        bookingDate:
          description: |
            Date and time when an entry is posted to an account on the account servicer's books.
            Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.
          $ref: '#/components/schemas/DateAndTime'
        charges:
          type: array
          description: "All charges and taxes applied to the transaction. Also can include interests if the bank does not discrimate between them. \n"
          items:
            $ref: '#/components/schemas/TransactionCharge'
        reason:
          $ref: '#/components/schemas/PaymentPurpose'
        interests:
          type: array
          description: All interests included in the transaction amount.
          items:
            $ref: '#/components/schemas/TransactionInterest'
    PaymentId:
      maxLength: 36
      minLength: 1
      type: string
      description: Identification of the Payment.
      example: 0dd926fe-1ca2-11ed-861d-0242ac120002
    ReversalIndicator:
      type: boolean
      description: |
        Indicates whether or not the transaction is the result of a reversal.
        Usage: This element should only be present if the entry is the result of a reversal.
        If the CreditDebitIndicator is Credit and ReversalIndicator is Yes, the original operation was a debit entry.
        If the CreditDebitIndicator is Debit and ReversalIndicator is Yes, the original operation was a credit entry.
    RemittanceInformation:
      type: object
      properties:
        remittanceNumber:
          maxLength: 60
          minLength: 1
          type: string
          description: |
            Unique and unambiguous identification of the remittance document
        documentType:
          maxLength: 60
          minLength: 1
          type: string
          description: |
            Specifies a type of financial or commercial document. Possible values are: MeteredServiceInvoice, CreditNoteRelatedToFinancialAdjustment, DebitNoteRelatedToFinancialAdjustment, CommercialInvoice, CreditNote, DebitNote, HireInvoice, SelfBilledInvoice, CommercialContract, StatementOfAccount, DispatchAdvice, BillOfLading, Voucher, AccountReceivableOpenItem, TradeServicesUtilityTransaction, PurchaseOrder
        physicalDocument:
          $ref: '#/components/schemas/Document'
      description: |
        Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system.
    Document:
      type: object
      properties:
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        format:
          $ref: '#/components/schemas/DocumentFormat'
        title:
          $ref: '#/components/schemas/Title'
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          description: Signoff date of the document.
          $ref: '#/components/schemas/Date'
        issueDate:
          description: Issue date of the document.
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 100
          minLength: 1
          type: string
          description: Specifies the function of the document.
      description: >
        General information related to a physical document, such as
        identification number and issue date time.
    DocumentFormat:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies a choice of format for a document. Possible Values: PDF, HTML.
      example: PDF
    PaymentPurpose:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Underlying reason for the payment transaction. Possible Values: Allowance, LoanPrincipal, CashManagementTransfer, LoanStandardPayment, LoanPayment, LoanAdditionalPayment, LoanInterest, OverageInterest, OveragePrincipal, EscrowPayment, FeePayment.
      example: CashManagementTransfer
    TransactionInterest:
      required:
        - amount
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/InterestName'
        amount:
          $ref: '#/components/schemas/Amount'
      description: |
        Provides information on an interest included in the entry amount.
    InterestName:
      maxLength: 40
      minLength: 1
      type: string
      description: |
        Name in PascalCase of the interest that applies to the account. For instance, Deposit. Also identifications of the interest or charge.
      example: Deposit
    Frequency:
      description: Specifies an event frequency
      type: object
      properties:
        fromDateTime:
          description: Date and time at which the period starts.
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          description: Date and time at which the period ends.
          $ref: '#/components/schemas/DateAndTime'
        cycleType:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Specifies a cycle type. Possible values: Temporal, AtMaturity, InterestCycle, FromLastStatement, LastDay, AutoPay, Immediate, SkipFirst, SkipLast, TriggeredByMovement, Never, Rate, OnCreditEvent, Upfront, OnExpiry, Shift, EndOfTheMonth
        cycle:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Specifies a temporal cycle. Possible values:  Annual, Monthly, Quarterly, SemiAnnual, Weekly, Daily, Once, IntraDay, Overnight, Fortnightly, Semimonthly, XHours, XDays, XWeeks, XMonths, XYears.
          example: Monthly
        every:
          maximum: 999
          type: integer
          description: "Custom cycle definition. Number of XDays, XWeeks, XMonths, XYears. \n"
          example: 15
        weekDay:
          maxLength: 10
          type: string
          description: |
            Day of the week. Possible Values: Monday, Tuesday, Wednesday, Thursday, Friday.
          example: Tuesday
        weekNumbers:
          type: array
          items:
            maxLength: 3
            type: string
            description: |
              Number to select one week day of a Month. Possible Values: 1st, 2nd, 3th, 4th, 5th
            example: 1st
        days:
          type: array
          items:
            description: |
              Day of the Month
            $ref: '#/components/schemas/Day'
        months:
          type: array
          items:
            description: |
              Month of the Year within an Annual cycle.
            $ref: '#/components/schemas/Month'
        startDay:
          $ref: '#/components/schemas/MonthDay'
        numberOfTimes:
          type: integer
          description: |
            Number of times the event will be repeated.
          example: 4
    Day:
      maximum: 31
      type: integer
      description: Specifies the date in a month.
      example: 30
    Month:
      maxLength: 12
      type: string
      description: Specifies a month number.
      example: "12"
    MonthDay:
      pattern: "([0-9]{2})-([0-9]{2})"
      type: string
      description: A particular point in the year expressed in the MM-DD format.
      example: 04-17
    RepaymentBillDetails:
      type: object
      properties:
        billingOption:
          maxLength: 60
          type: string
          description: "AutomaticPayment, \nLumpSumPayment,\nNegotiatedBillingOptio,\nAcceleratedBillingOption.\n"
        billingDay:
          description: "Identifies the day of the month that billing statements are generated. \n"
          $ref: '#/components/schemas/Day'
        rebillStatus:
          $ref: '#/components/schemas/RepaymentBillStatus'
        rebillInterestIndicator:
          type: boolean
          description: |
            Indicates whether interest will be rebilled  when transactions occur during the forecast period.
        leadDays:
          type: integer
          description: |
            Identifies the time between creating a receivable and the due date.
        interestFromDate:
          description: |
            The statement date interest was billed.
          $ref: '#/components/schemas/Date'
        interestToDate:
          description: |
            The due date of the next interest payment due that is not past due.
          $ref: '#/components/schemas/Date'
        frequency:
          description: |
            How often principal payments are billed.
          $ref: '#/components/schemas/Frequency'
        balances:
          type: array
          description: Bill balances
          items:
            $ref: '#/components/schemas/Balance'
      description: |
        Billing information of the payment
    RepaymentBillStatus:
      maxLength: 40
      minLength: 1
      type: string
      description: "Indicates whether a payment will be recalculated, rebilled and notified to the customer. Possible values: NoRequest, RebillRequest, ReNotifyCustomer.\n\n    \n"
      example: RebillRequest
    PaymentDistributionAccountDetails:
      type: object
      properties:
        payout:
          $ref: '#/components/schemas/AccountPayout'
    AccountPayout:
      description: |
        Distribution of funds or assets to an individual or entity. In relation to investments, loans, insurance policies, and retirement accounts.
      type: object
      properties:
        frequency:
          description: |
            Indicates the schedule for paying to accounts.
          $ref: '#/components/schemas/Frequency'
        paymentType:
          $ref: '#/components/schemas/AccountPaymentMethodType'
        paymentTypeOptions:
          type: array
          items:
            type: string
            description: |
              Options on the payment method or account identifier. Possible values: AllPrimary, Primary, Secondary
            example: Primary
        paymentName:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Human readable pascal case identifier of the payment concept. Possible values: CreditBack, Interest.
        accountId:
          description: |
            The account id that receives interest credits.
          $ref: '#/components/schemas/AccountId'
        referenceNumber:
          description: |
            The reference number of the interest pay to the account.
          $ref: '#/components/schemas/Id'
        paymentDate:
          description: |
            Last payment date
          $ref: '#/components/schemas/Date'
        lastPaid:
          $ref: '#/components/schemas/PositiveAmount'
        codes:
          type: array
          description: |
            Additional payment codes. Posible values: PaymentCalculus, specifies how the credit back portion of an automatic service charge is calculated. PaymentReference, additional payment reference to link with other parts of the system.
          items:
            $ref: '#/components/schemas/GenericCode'
        payoutType:
          $ref: '#/components/schemas/AccountPayoutType'
        payoutName:
          $ref: '#/components/schemas/AccountPayoutName'
        payoutOption:
          $ref: '#/components/schemas/AccountPayoutOption'
        amount:
          $ref: '#/components/schemas/PositiveAmount'
        enableIndicator:
          type: boolean
          description: Indicates whether the account payouts are disbursed or not.
        payoutsNumber:
          type: integer
          description: Total number of payouts
        surrenderAmount:
          description: |
            Cash surrender value (net) available if contract is surrendered
          $ref: '#/components/schemas/PositiveAmount'
        changePercentage:
          description: |
            Percentage of the accumulated value to be paid to the payee each year.
          $ref: '#/components/schemas/Percentage'
        changeAmount:
          description: |
            Amount of the accumulated value to be paid to the payee each year.
          $ref: '#/components/schemas/PositiveAmount'
        temporalPayoutDuration:
          description: |
            Duration of payout frequency
          $ref: '#/components/schemas/TemporalDuration'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
    AccountPayment:
      type: object
      properties:
        frequency:
          description: |
            Indicates the schedule for paying to accounts.
          $ref: '#/components/schemas/Frequency'
        paymentType:
          $ref: '#/components/schemas/AccountPaymentMethodType'
        paymentTypeOptions:
          type: array
          items:
            type: string
            description: |
              Options on the payment method or account identifier. Possible values: AllPrimary, Primary, Secondary
            example: Primary
        paymentName:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Human readable pascal case identifier of the payment concept. Possible values: CreditBack, Interest.
        accountId:
          description: |
            The account id that receives interest credits.
          $ref: '#/components/schemas/AccountId'
        referenceNumber:
          description: |
            The reference number of the interest pay to the account.
          $ref: '#/components/schemas/Id'
        paymentDate:
          description: |
            Last payment date
          $ref: '#/components/schemas/Date'
        lastPaid:
          $ref: '#/components/schemas/PositiveAmount'
        codes:
          type: array
          description: |
            Additional payment codes. Posible values: PaymentCalculus, specifies how the credit back portion of an automatic service charge is calculated. PaymentReference, additional payment reference to link with other parts of the system.
          items:
            $ref: '#/components/schemas/GenericCode'
      description: "Set of attributes related to the account payment. \n"
    AccountPaymentMethodType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the type of interest payment. Possible values are: Compound, Checking, Savings, Check, Capitalize, TransferToAccount, CertificateOfDeposit, Deposit, DepositLoan, Loan.
      example: Compound
    AccountPayoutType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Account payout can be classified into two main categories: immediate and deferred. Possible Values: Immediate, Deferred.
    AccountPayoutName:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Payout nature of the Account. Possible Values: ClubPay.
      example: ClubPay
    AccountPayoutOption:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Distinguishes options in payouts products. Possible values: Fixed, Variable
    Percentage:
      maxLength: 23
      pattern: "[-]{0,1}100|[-]{0,1}(([1-9][0-9]{0,1})([.][0-9]{0,8}){0,1})$"
      type: string
      description: |
        Value expressed as a positive or negative percentage, rate expressed as a percentage, that is, in hundredths, for example, 0.7 is 7/10 of a percent, and 7.0 is 7%.
            total number of digits: 11
            number of digits in fractional part: 10
            Max Value: 100
      example: "25"
    TemporalDuration:
      required:
        - unit
      type: object
      properties:
        unit:
          description: Unit that describes the duration.
          $ref: '#/components/schemas/TemporalUnit'
        value:
          maximum: 999
          type: integer
          description: Value of the duration in number of units.
      description: |
        Describes a temporal duration.
    TemporalUnit:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Specifies a temporal unit. Possible values are: Days, Months, Weeks, Years.
      example: Months
    AccountBalanceType:
      title: Balance Type
      type: string
      description: |
        Account Balance Type. Possible Values: Asset, positive transaction amount increases balance; Liability,  positive transaction amount decreases balance; Equity.
      example: Asset
    ProductId:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Identification of the product offered by a financial institution to its customers.
      example: PD_CA_0002
    AccountContract:
      description: |
        Account contractual details between the owners and the account servicer.
      type: object
      properties:
        fromDateTime:
          description: Date and time at which the period starts.
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          description: Date and time at which the period ends.
          $ref: '#/components/schemas/DateAndTime'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        format:
          $ref: '#/components/schemas/DocumentFormat'
        title:
          $ref: '#/components/schemas/Title'
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          description: Signoff date of the document.
          $ref: '#/components/schemas/Date'
        issueDate:
          description: Issue date of the document.
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 100
          minLength: 1
          type: string
          description: Specifies the function of the document.
        jurisdiction:
          $ref: '#/components/schemas/Jurisdiction'
        contact:
          $ref: '#/components/schemas/ContactDetails'
        parties:
          $ref: '#/components/schemas/AccountContractRelatedParty'
        agreementType:
          $ref: '#/components/schemas/AgreementType'
        agreementSubtype:
          maxLength: 60
          minLength: 1
          type: string
          description: |
            Agreement detailed category.
        documentId:
          $ref: '#/components/schemas/Id'
        identifiers:
          type: array
          description: |
            Unique indentification of the collateral. Possible scheme names: NoteNumber.
          items:
            $ref: '#/components/schemas/GenericIdentification'
        status:
          $ref: '#/components/schemas/AccountContractStatus'
        targetClosingDate:
          description: |
            Date on which the account and related services are expected to cease for the account owner.
          $ref: '#/components/schemas/Date'
        targetGoLiveDate:
          description: |
            Date on which the account and related services are expected to be operational for the account owner.
          $ref: '#/components/schemas/Date'
        masterAgreement:
          $ref: '#/components/schemas/MasterAgreement'
        term:
          description: |
            The payment term for the account premium.
          $ref: '#/components/schemas/AccountContractTerm'
        premium:
          description: |
            Amount of the customer premium.
          $ref: '#/components/schemas/PositiveAmount'
        coverageAmount:
          description: |
            Total amount of money the user is insured for.
          $ref: '#/components/schemas/PositiveAmount'
        productId:
          $ref: '#/components/schemas/ProductId'
        codes:
          type: array
          items:
            $ref: '#/components/schemas/GenericCode'
        projectedDates:
          type: array
          description: |
            Contract dates. Possible values:  LossMitigation
          items:
            $ref: '#/components/schemas/SpotDate'
    Agreement:
      description: Contractual details related to an agreement between parties
      type: object
      properties:
        fromDateTime:
          description: Date and time at which the period starts.
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          description: Date and time at which the period ends.
          $ref: '#/components/schemas/DateAndTime'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        format:
          $ref: '#/components/schemas/DocumentFormat'
        title:
          $ref: '#/components/schemas/Title'
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          description: Signoff date of the document.
          $ref: '#/components/schemas/Date'
        issueDate:
          description: Issue date of the document.
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 100
          minLength: 1
          type: string
          description: Specifies the function of the document.
        jurisdiction:
          $ref: '#/components/schemas/Jurisdiction'
        contact:
          $ref: '#/components/schemas/ContactDetails'
        parties:
          $ref: '#/components/schemas/AccountContractRelatedParty'
        agreementType:
          $ref: '#/components/schemas/AgreementType'
        agreementSubtype:
          maxLength: 60
          minLength: 1
          type: string
          description: |
            Agreement detailed category.
    Jurisdiction:
      description: |
        Area with a set of laws under the control of a system which are different from neighbouring areas
      $ref: '#/components/schemas/Place'
    ContactDetails:
      type: object
      properties:
        structuredName:
          $ref: '#/components/schemas/StructuredName'
        name:
          description: Preferred name to contact the person
          $ref: '#/components/schemas/PartyName'
        firstContactDate:
          $ref: '#/components/schemas/DateAndTime'
        lastContactDate:
          $ref: '#/components/schemas/DateAndTime'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        jobTitle:
          $ref: '#/components/schemas/JobTitle'
        department:
          maxLength: 35
          minLength: 1
          type: string
          description: Identification of a division of a large Organization or building.
          example: Sales
        communicationChannels:
          type: array
          items:
            $ref: '#/components/schemas/CommunicationChannel'
        preferredMethod:
          $ref: '#/components/schemas/CommunicationChannelName'
        preferredLanguage:
          $ref: '#/components/schemas/PreferredLanguage'
      description: Specifies the contact details of a person.
    StructuredName:
      required:
        - firstName
        - lastName
      type: object
      properties:
        firstName:
          maxLength: 200
          minLength: 1
          type: string
          description: |
            Person given first name.
          example: Mary
        middleName:
          maxLength: 200
          minLength: 1
          type: string
          description: |
            Person given middle name.
          example: Joe
        lastName:
          maxLength: 200
          minLength: 1
          type: string
          description: |
            Person surname.
          example: Smith
        middleInitial:
          maxLength: 10
          minLength: 1
          type: string
          description: |
            Person middle initial.
          example: J.
        suffix:
          maxLength: 20
          minLength: 1
          type: string
          description: |
            A name suffix in the Western English-Language naming tradition, follows a person's full name and provides additional information about the person. Possible Values:  PhD, Snr, Jnr. Generation order should be expressed with roman numerals: I, II, III, IV, V.
          example: PhD
        prefix:
          maxLength: 20
          minLength: 1
          type: string
          description: |
            Name prefixes are typically Dr., Mr., Mrs., Ms.
          example: Dr.
      description: |
        The structured name is used to initialize the person name with the format <firstName middleName lastName>
    Phone:
      required:
        - number
      type: object
      properties:
        number:
          $ref: '#/components/schemas/PhoneNumber'
        extension:
          maxLength: 5
          type: string
          description: Phone Number Extension.
        country:
          $ref: '#/components/schemas/CountryCallingCode'
        phoneType:
          maxLength: 35
          minLength: 1
          type: string
          description: "Type of phone address. Possible values are:  \nMobile, Landline, Fax, Pager, Modem.\n"
        phonePurpose:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Purpose of the phone address. Possible values are:   Business, Personal, International, Alternative, PersonalInternational, BusinessInternational
        foreignIndicator:
          type: boolean
          description: Indicates whether is a foreign phone number
        primaryIndicator:
          $ref: '#/components/schemas/PrimaryContactIndicator'
        preferredHourOfDay:
          $ref: '#/components/schemas/TimeOfTheDay'
        comment:
          $ref: '#/components/schemas/Description'
        period:
          description: The period of use of the phone information.
          $ref: '#/components/schemas/DateTimePeriod'
        codes:
          type: array
          items:
            $ref: '#/components/schemas/GenericCode'
        identifiers:
          type: array
          description: |
            Phone identifiers are used to identify parties that share the same phone or to associate an existing phones with a specific party. Possible scheme name values: PhoneIdentifier.
          items:
            $ref: '#/components/schemas/GenericIdentification'
        lastUpdatedDate:
          $ref: '#/components/schemas/DateAndTime'
      description: Collection of information that identifies a phone address.
    PhoneNumber:
      pattern: "^\\+[0-9]{1,3}-[0-9()+\\-]{1,30}$"
      type: string
      description: The collection of information which identifies a specific phone or FAX number as defined by telecom services.
      example: +1-555-1234567
    CountryCallingCode:
      maxLength: 3
      type: string
      description: |
        Country calling codes, country dial-in codes, international subscriber dialing (ISD) codes, or most commonly, telephone country codes. Country codes are defined by the International Telecommunication Union (ITU) in ITU-T standards E.123 and E.164. The prefixes enable international direct dialing (IDD).
    TimeOfTheDay:
      type: object
      properties:
        hour:
          type: string
          format: time-hour
          example: "12"
        timeZone:
          $ref: '#/components/schemas/TimeZone'
        timeOfTheDay:
          type: string
          description: |
            Time of the day. Possible Values: AfterMidnight, after midnight and  before business day; AfterBusinessDay, after business day and before midnight.
    TimeZone:
      maxLength: 30
      minLength: 1
      type: string
      description: |
        A time zone is an area which observes a uniform standard time for legal, commercial and social purposes. Some possible values: Pacific, Mountain, Central, Eastern, GreenwichMean
      example: Pacific
    Email:
      type: object
      properties:
        emailAddress:
          maxLength: 2048
          minLength: 1
          type: string
          description: Address for electronic mail (e-mail).
        emailPurpose:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Purpose of the e-mail address. Possible values:   Marketing, Statements, Business, Administrative, Personal
          example: Statements
        primaryIndicator:
          $ref: '#/components/schemas/PrimaryContactIndicator'
        identifiers:
          type: array
          description: |
            Email identifiers are used to identify parties that share the same email or to associate an existing email with a specific party. Possible scheme name values: EmailIdentifier.
          items:
            $ref: '#/components/schemas/GenericIdentification'
        lastUpdatedDate:
          $ref: '#/components/schemas/DateAndTime'
      description: Collection of information that identifies an electronic mail address.
    JobTitle:
      maxLength: 35
      minLength: 1
      type: string
      description: Title of the function in an organization.
      example: Head of Documentation
    CommunicationChannel:
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannelName'
        channelIdentification:
          $ref: '#/components/schemas/CommunicationChannelIdentification'
        channelPurpose:
          $ref: '#/components/schemas/CommunicationChannelPurpose'
        codeWord:
          type: string
          description: |
            A party is asked for a codeword to verify their identity trought a communication channel
        alertIndicator:
          type: boolean
          description: |
            Indicates whether the channel is used for enterprise alerts to the customer.
        personId:
          description: |
            The party authorized to use the communcation channel
          $ref: '#/components/schemas/Id'
        codes:
          type: array
          description: |
            Codes to determine configurarion options for alerts and notifications. Possible code names: NoticeOption.
          items:
            $ref: '#/components/schemas/GenericCode'
        status:
          $ref: '#/components/schemas/AlertStatus'
        primaryIndicator:
          $ref: '#/components/schemas/PrimaryContactIndicator'
        leadTime:
          description: |
            The lead time between the event and the alert notification.
          $ref: '#/components/schemas/TemporalDuration'
        alertText:
          description: |
            Text to appear in alerts and notices.
          $ref: '#/components/schemas/Description'
        contactDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        contactCount:
          type: integer
          description: Number of contacts.
        frequency:
          $ref: '#/components/schemas/Frequency'
      description: |
        Channel used to communicate with a party.
    CommunicationChannelPurpose:
      maxLength: 40
      minLength: 1
      type: string
      description: |
        Communication purpose of the channel. Possible values: Alerts, PrivacyNotices, NegativeBalance, OverdraftProtection, ACHNotice, ChargeBack, BalanceOnReceipt, RegulationCCNotice, RateChange, MaturityNotice, InterestNotice, RegularNotice, PastDueNotice, HUDNotice, PaymentChange, AutomaticPayment, PastDueFirstNotice, PastDueSecondNotice, PastDueNoticeGuarantor, CardHolderAuthorization, Delivery, DocumentDistribution.
      example: PrivacyNotices
    AlertStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Alert status. Possible values: Sent, SentLastNight, Pending, Enable, Disable, FraudAlert. Possible values for CreditBureauAlert: IdentityTheft.
      example: Warning
    SpotDate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/SpotDateName'
        date:
          $ref: '#/components/schemas/DateAndTime'
      description: Relevant dates.
    SpotDateName:
      maxLength: 40
      minLength: 1
      type: string
      description: |
        Possible values por projected dates: Forecast, Expiration, LastNonFinancial, Escheat. Possible values for past dates: IRALastRollOver. Other possible values: EffectiveDate, ResponseByDate.
      example: Expiration
    AccountContractRelatedParty:
      type: object
      properties:
        partyId:
          $ref: '#/components/schemas/Id'
        partyType:
          $ref: '#/components/schemas/PartyType'
        partyName:
          $ref: '#/components/schemas/PartyName'
    AgreementType:
      type: string
      description: |
        Document or agreement type. Possible values: CardAgreement, AccountContract.
    AccountContractStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the current status of an account contract. Possible values are:
         Active, Expired, GracePeriod, Terminated, Waiver.
      example: Active
    MasterAgreement:
      properties:
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        format:
          $ref: '#/components/schemas/DocumentFormat'
        title:
          $ref: '#/components/schemas/Title'
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          description: Signoff date of the document.
          $ref: '#/components/schemas/Date'
        issueDate:
          description: Issue date of the document.
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 100
          minLength: 1
          type: string
          description: Specifies the function of the document.
        accountId:
          description: |
            Account at Master Agreement level used as a reference for the Loan opening. Payments are auto-debited from this account.
          $ref: '#/components/schemas/Id'
        availableCredit:
          description: |
            Account at Master Agreement level used as a reference for the Loan opening. Payments are auto-debited from this account.
          $ref: '#/components/schemas/PositiveAmount'
      description: |
        A master agreement is a document that outlines the terms and conditions of an agreement between two or more parties. It's common to use a master agreement when there are multiple agreements in place with one company.
    AccountContractTerm:
      type: object
      properties:
        duration:
          $ref: '#/components/schemas/TemporalDuration'
        timesExtended:
          maximum: 100
          type: integer
          description: |
            The number of times the loan has been extended over its term.
        timesRenewed:
          maximum: 100
          type: integer
          description: |
            The number of times the loan has been renewed over its term.
        alternativeTerms:
          type: array
          items:
            $ref: '#/components/schemas/AlternativeTerm'
      description: Term attribute values.
    AlternativeTerm:
      type: object
      properties:
        duration:
          $ref: '#/components/schemas/TemporalDuration'
        name:
          maximum: 100
          type: string
          description: |
            Term name in Pascal Case.
        effectiveDate:
          $ref: '#/components/schemas/DateAndTime'
      description: Alternate term attribute values.
    AccountDetailedParty:
      required:
        - name
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/GenericIdentification'
        codes:
          type: array
          description: |
            Codes to link the party with other systems or to classify the party. Possible values: RemoteDepositRisk.
          items:
            $ref: '#/components/schemas/GenericCode'
        name:
          $ref: '#/components/schemas/PartyName'
        nameTemplateId:
          $ref: '#/components/schemas/NameTemplateId'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        placeAndDateOfBirth:
          $ref: '#/components/schemas/PlaceAndDateOfBirth'
        gender:
          $ref: '#/components/schemas/Gender'
        status:
          $ref: '#/components/schemas/PartyStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        coveredByMilitaryLendingActIndicator:
          type: boolean
          description: |
            Indicates if the borrower is covered under the Military Lending Act.
        militaryMemberIndicator:
          type: boolean
          description: |
            Indicates whether the person is is service member/military.
        militaryPeriod:
          $ref: '#/components/schemas/DateTimePeriod'
        employment:
          $ref: '#/components/schemas/Employment'
        audit:
          $ref: '#/components/schemas/Audit'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        structuredName:
          $ref: '#/components/schemas/StructuredName'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        emails:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Email'
        organizationType:
          $ref: '#/components/schemas/OrganizationType'
        customerType:
          $ref: '#/components/schemas/CustomerType'
        taxReportingIndicator:
          type: boolean
          description: |
            Account tax reporting typically involves obtaining and submitting records related to your tax obligations. For individuals, this may include income, qualifying deductions, and investment gains or losses. Businesses, on the other hand, have additional complexities, such as tracking funds directed towards specific business expenses and shareholders.
        taxStatus:
          type: string
          description: |
            Exempt, Retain, ExemptExpired, VoluntaryWithholding, Chapter3, Chapter4, C-Corp, S-Corp, Certified, W-8Required, NotCertified.
          example: Exempt
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardDescriptor'
        balances:
          type: array
          description: Balances related to the party
          items:
            $ref: '#/components/schemas/Balance'
        spotDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        identityQuestions:
          type: array
          items:
            $ref: '#/components/schemas/IdentityQuestion'
        partyId:
          $ref: '#/components/schemas/Id'
        partyType:
          $ref: '#/components/schemas/PartyType'
        partyAccountRole:
          $ref: '#/components/schemas/AccountPartyRole'
        partyAccountRoleCode:
          type: string
          description: Bank defined party account role.
          example: "50"
        beneficiaryPercentage:
          description: Percentage value of the ownership that the party has in the account.
          $ref: '#/components/schemas/Percentage'
        beneficiaryAmount:
          description: Actual dollar amount of the liability for this account.
          $ref: '#/components/schemas/Percentage'
        accountOwnerRelation:
          description: Identifies how the party is related to the owner of the account.
          $ref: '#/components/schemas/PartyRelationType'
        primaryIndicator:
          type: boolean
          description: Indicates whether the account is primary account for the party.
        restrictions:
          type: array
          description: Party restrictions on the account capabilities
          items:
            $ref: '#/components/schemas/Restriction'
    PartyDescriptor:
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/GenericIdentification'
        codes:
          type: array
          description: |
            Codes to link the party with other systems or to classify the party. Possible values: RemoteDepositRisk.
          items:
            $ref: '#/components/schemas/GenericCode'
        name:
          $ref: '#/components/schemas/PartyName'
        nameTemplateId:
          $ref: '#/components/schemas/NameTemplateId'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        placeAndDateOfBirth:
          $ref: '#/components/schemas/PlaceAndDateOfBirth'
        gender:
          $ref: '#/components/schemas/Gender'
        status:
          $ref: '#/components/schemas/PartyStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        coveredByMilitaryLendingActIndicator:
          type: boolean
          description: |
            Indicates if the borrower is covered under the Military Lending Act.
        militaryMemberIndicator:
          type: boolean
          description: |
            Indicates whether the person is is service member/military.
        militaryPeriod:
          $ref: '#/components/schemas/DateTimePeriod'
        employment:
          $ref: '#/components/schemas/Employment'
        audit:
          $ref: '#/components/schemas/Audit'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        structuredName:
          $ref: '#/components/schemas/StructuredName'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        emails:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Email'
        organizationType:
          $ref: '#/components/schemas/OrganizationType'
        customerType:
          $ref: '#/components/schemas/CustomerType'
        taxReportingIndicator:
          type: boolean
          description: |
            Account tax reporting typically involves obtaining and submitting records related to your tax obligations. For individuals, this may include income, qualifying deductions, and investment gains or losses. Businesses, on the other hand, have additional complexities, such as tracking funds directed towards specific business expenses and shareholders.
        taxStatus:
          type: string
          description: |
            Exempt, Retain, ExemptExpired, VoluntaryWithholding, Chapter3, Chapter4, C-Corp, S-Corp, Certified, W-8Required, NotCertified.
          example: Exempt
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardDescriptor'
        balances:
          type: array
          description: Balances related to the party
          items:
            $ref: '#/components/schemas/Balance'
        spotDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        identityQuestions:
          type: array
          items:
            $ref: '#/components/schemas/IdentityQuestion'
    NameTemplateId:
      maxLength: 36
      minLength: 1
      type: string
      description: "Template used to display the party name. This is an external id provided by the account servicer. \n"
      example: "1"
    PartyShortName:
      maxLength: 35
      minLength: 1
      type: string
      description: Short name or nickname by which a party is known and which is usually used to identify that party.
      example: Jane
    Gender:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Specifies the gender of the person. Possible Values: Female, Male, NonBinary
      example: Female
    PartyStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the current primary status of a party. Possible values are:
         GoodStanding, FraudAlert, BadCustomer, Active, Delinquent, Default, HighRisk, UnderReview, HotCarded, WildCarded. Other possible values: PersonalBankruptcy, GrowingConcern, WatchLoan, InReceivership, Chapter11, Liquidation.
      example: GoodStanding
    Employment:
      type: object
      properties:
        employingPartyName:
          $ref: '#/components/schemas/PartyName'
        jobTitle:
          $ref: '#/components/schemas/JobTitle'
        profession:
          $ref: '#/components/schemas/Profession'
        employmentStatus:
          description: |
            Possible Values: Contract, Employed, Homemaker, Retired, SelfEmployed, Student, Temporary, Unemployed, BankEmployed, FullTime, PartTime, PaidLeave.
          $ref: '#/components/schemas/EmploymentStatus'
        professionCode:
          description: |
            Indicates an internal code used by the bank to determine a profession description.
          $ref: '#/components/schemas/GenericCode'
        employeeTerminationIndicator:
          type: boolean
          example: false
        lengthOfEmployment:
          $ref: '#/components/schemas/TemporalDuration'
        endDate:
          $ref: '#/components/schemas/Date'
        startDate:
          $ref: '#/components/schemas/Date'
        place:
          $ref: '#/components/schemas/Place'
    Profession:
      maxLength: 35
      type: string
      description: |
        Professional designation or occupation of a person. Possible Values: Accountant, ArtsEntertainmentRecreation, AttorneyLawyerJudge, BankingFinanceInsurance, CEOUpperMgmtPrivateCorp, CivilServiceGovernment, ConvenienceStoreOwnerManage, Doctor, EducationalServiceEducator, EngineerArchitect, Entrepreneur, FarmerRancher, GemMetalDealerJeweler, HealthCareSocialServices, Homemaker, HospitalityFoodServices, ImportExportCompany, MilitarEnlisted, ProfessionalScientificTechnicalIT, PublicSafety, RealEstateProfessional, Retail, RetiredStudentNotEmployed, Sales, ServiceIndustry, SeniorPoliticalFigures, TradeIndustry, TravelTransportation.
      example: ArtsEntertainmentRecreation
    EmploymentStatus:
      type: string
      description: |
        Represents available individual employment status. Possible values: Contract, Employed, Homemaker, Retired, SelfEmployed, Student, Temporary, Unemployed, BankEmployed.
    OrganizationType:
      type: string
      description: |
        Specifies the legal standing of the organization. Possible values are: Government, NonGoverment NonUSGovernmentOrganization, USGovernmentOrganization FinancialInstitution, SoleProprietorship, UnincorporatedAssociation,  LimitedLiabilityPartnership, LimitedLiabilityCompany, SingleMemberLimitedLiabilityCompany, LimitedPartnership, FormalPartnership, GeneralPartnership, Business, Corporation, NotForProfit, ForProfit, NonProfitCorporation, NonProfit, Club, Supranational, Sovereign, Municipal, Province, State, County, National, ExemptionTrust, LivingTrust, EmployeeTrust, RevocableTrust, IrrovocableTrust, NakedTrust, FamilyTrust, BussinesTrust, CliffordTrust, FormalTrust, PublicAgency, Association, Church, PublicFunds. International & Foreign Business Entities: PersonaFisica, SociedadCivil, SociedadAnonimaCapitalVariable, SociedadResponsabilidadLimitada, SociedadAnonimaCapitalVariable.
      example: Corporation
    CustomerType:
      type: string
      description: |
        A customer type of a bank account can be classified into different categories based on the account's features, purpose, and benefits. Possible Values: Personal, Business, Consumer, Organization, ThirdParty, Estate, Employee, ForeignConsumer.
      example: Consumer
    PaymentCardDescriptor:
      type: object
      properties:
        cardId:
          $ref: '#/components/schemas/PaymentCardId'
        cardHolder:
          $ref: '#/components/schemas/PersonDescriptor'
        cardHolderName:
          $ref: '#/components/schemas/PartyName'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardIdentification'
        productId:
          $ref: '#/components/schemas/Id'
        number:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        cardHolderType:
          $ref: '#/components/schemas/CardHolderType'
        fundingSourceType:
          $ref: '#/components/schemas/CardFundingSourceType'
        businessIndicator:
          type: boolean
          description: Indicates whether the payment card is business or not.
        cardBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        startDate:
          description: Year and month the card is available for use.
          $ref: '#/components/schemas/Date'
        expiryDate:
          description: Year and month the card expires.
          $ref: '#/components/schemas/YearMonth'
        relatedAccounts:
          type: array
          description: |
            Account that provides the payment card transactions. The account is the funding source for the card. Could be a cash or loan account linked to the debit card or a credit card account. A card can have one or many accounts.
          items:
            $ref: '#/components/schemas/RelatedAccount'
        status:
          $ref: '#/components/schemas/CardStatus'
        statusDate:
          $ref: '#/components/schemas/DateAndTime'
        statusReasons:
          type: array
          items:
            $ref: '#/components/schemas/CardStatusReason'
        codes:
          type: array
          description: |
            Codes to classify payment cards. Possible code names: ClassCode
          items:
            $ref: '#/components/schemas/GenericCode'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
    PaymentCardId:
      maxLength: 36
      minLength: 1
      type: string
      description: "Identification assigned by the card provider. A cardId is a unique identifier associated with a specific cardholder. Establishing the card ID is the first step. The card ID is used as the card reference. When a card is replaced, a new card ID must be requested for the new PAN.  \n"
      example: 0dd926fe-1ca2-11ed-861d-0242ac120002
    PersonDescriptor:
      type: object
      properties:
        personId:
          description: Person identifier code assigned by the account service institution.
          $ref: '#/components/schemas/Id'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PersonIdentification'
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        placeAndDateOfBirth:
          $ref: '#/components/schemas/PlaceAndDateOfBirth'
        gender:
          $ref: '#/components/schemas/Gender'
        status:
          $ref: '#/components/schemas/PartyStatus'
        coveredByMilitaryLendingActIndicator:
          type: boolean
          description: |
            Indicates if the borrower is covered under the Military Lending Act.
        militaryMemberIndicator:
          type: boolean
          description: |
            Indicates whether the person is is service member/military.
        militaryPeriod:
          $ref: '#/components/schemas/DateTimePeriod'
        audit:
          $ref: '#/components/schemas/Audit'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        structuredName:
          $ref: '#/components/schemas/StructuredName'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        employeeIndicator:
          type: boolean
          description: "Indicates whether is a bank employee. \n"
    PersonIdentification:
      required:
        - number
        - schemeName
      type: object
      properties:
        number:
          maxLength: 40
          minLength: 1
          type: string
          description: Unique and unambiguous identification.
          example: 123-45-6789
        issuer:
          type: string
          description: Entity that assigns the identification.
          example: Baltimore
        country:
          $ref: '#/components/schemas/CountryCode'
        countrySubdivisionCode:
          $ref: '#/components/schemas/CountrySubdivisionCode'
        issueDate:
          $ref: '#/components/schemas/Date'
        applyDate:
          $ref: '#/components/schemas/Date'
        expirationDate:
          $ref: '#/components/schemas/Date'
        verificationDate:
          description: |
            Verification or certification date.
          $ref: '#/components/schemas/Date'
        foreignIDIndicator:
          type: boolean
          description: Indicates whether the identifications is from a foreign country.
        taxIDIndicator:
          type: boolean
          description: Indicates whether the identifications is Tax Id.
        displayOption:
          $ref: '#/components/schemas/PartyDisplayOption'
        schemeName:
          maxLength: 40
          minLength: 1
          type: string
          description: "Name of the identification scheme in PascalCase form. Possible values are: \nAlienRegistrationNumber, PassportNumber, USPassportCard, CustomerIdentificationNumber, DriversLicenseNumber, EmployeeIdentificationNumber, USDriversLicenseNumber, NationalIdentityNumber, SocialSecurityNumber, TelephoneNumber, TaxIdentificationNumber, ForeignTaxIdentificationNumber, IndividualTaxpayerIdentificationNumber, PersonCommercialIdentification, StateIdentificationNumber, MilitaryIdCard, BirthMarriageCertificateNumber, MarriageCertificateNumber, BirthCertificateNumber, CountryTerritoriIdCard, DriverLicenseNumber, WageTaxStatementFormNumber, GovernmentDocumentNumber, HealthInsuranceCard, CertificateOfIncorporationNumber, CertificateOfOrganizationNumber, CertificateOfPartnershipNumber, ForwardHealthMedicaIdCard, MexicanConsularIdCard, DLNTaxExemptNumber, PhotoIdCard, PermantResidentCard, TribalIdCard, UtilityBillInvoiceNumber, VoterUniqueIdentifier, WisconsinCRISSearch, PropertyTaxBillNumber, MedicareCardId, OrganizationalDocumentNumber, CertificationOfTrustNumber, EstateDomiciliaryLetterNumber, TaxReturnFormNumber, MinorIdCard, EmploymentAuthorizationCard, StateDocumentNumber, TravelDocumentNumber, StateIssuedPermitNumber, TaxId, MemberNumber.\n"
          example: SocialSecurityNumber
    PaymentCardIdentification:
      type: object
      properties:
        number:
          maxLength: 34
          minLength: 1
          type: string
          description: |
            Identification assigned by an institution or internally to connect to other applications.
        schemeName:
          maxLength: 40
          minLength: 1
          type: string
          description: |
            Name of the identification scheme, in PascalCase. Possible values are: MemberNumber, CardNumber, NonTransToken, CardIdentifier.
          example: MemberNumber
        issuer:
          maxLength: 35
          minLength: 1
          type: string
          description: Entity that assigns the identification.
    PrimaryAccountNumber:
      maxLength: 19
      minLength: 1
      type: string
      description: |
        Primary Account Number (PAN) of the card.
      example: "1234567890123456789"
    CardHolderType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the card holder type of payment card. Possible Values: Primary, Additional, Authorized, Guarantor.
      example: Primary
    CardFundingSourceType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the funding source type of payment card. Possible Values: Credit, Debit, Prepaid, Charge, DeferredDebit, CreditGateway, External.
      example: Credit
    YearMonth:
      maxLength: 7
      pattern: "^\\d{4}-([0]\\d|1[0-2])$"
      type: string
      description: |
        Month within a particular calendar year represented by YYYY-MM (ISO 8601).
      example: 2022-12
    CardStatus:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Specifies the status of payment card. Some possible values are:
        AssignPIN, Active, Blocked, Closed, Expedite, Expired, HotCarded, Renewed, Inactive, Issued, Lost, Restricted, Stolen, Suspended, Denied, Pending.
      example: Active
    CardStatusReason:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Specifies the status reason of payment card. Some possible values are:
        ActivationBeforeAvailableDate, CardRecordNotFound, CardLostOrStolen, NoActivationRequired, ActivationRequired, ExpDateNotMatch, AlreadyActivated, AttemptAfterDeadline, MaxAttemprsExceeded, CallerIdInvalid, ActivationCodeInvalid, PinCheckNotPerformed, InvalidActivationMethod, IvrAuthorizationFailed, FirstPinId
      example: Active
    Limit:
      required:
        - name
      type: object
      description: |
        Value used for risk containment.
      properties:
        fromDateTime:
          description: Date and time at which the period starts.
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          description: Date and time at which the period ends.
          $ref: '#/components/schemas/DateAndTime'
        name:
          maxLength: 60
          minLength: 1
          type: string
          description: "Name of the limit in PascalCase. Possible values: NSF, UncollectedFunds, Overdraft, CreditLimit, CreditCard, Withdraw, CreditCardWithdraw, ForeignFeesWaived, CreditTransactions, DebitTransactions, ATMSurchargeReimbursement, \n  CashAdvance, ACHInTransfers, ACHOutTransfers, OverdraftProgram, Threshold, MinimumTransfer, MinimumAdvance, DomesticWireTransferIn, DomesticWireTransferOut, ForeignWireTransferIn, ForeignWireTransferOut. \n"
          example: CreditLimit
        limitType:
          $ref: '#/components/schemas/LimitType'
        channelType:
          maxLength: 30
          minLength: 1
          type: string
          description: |
            Channel type for which this limit applies. Possible values: OnlineATM, OfflineATM, ATM, SaleTerminal, : Check, ACHDebit, DebitCard, BillPayment.
        amount:
          description: Amount limit
          $ref: '#/components/schemas/Amount'
        currency:
          description: Amount limit currency.
          $ref: '#/components/schemas/CurrencyCode'
        number:
          type: integer
          description: Number limit.
        enableIndicator:
          type: boolean
          description: Indicates whether the limit is enabled or not.
          example: true
        feesConsentIndicator:
          type: boolean
          description: |
            Indicates that the institution received customer consent to assess fees when the limit is exceeded.
          example: true
        percentageIndicator:
          type: boolean
          description: |
            Indicates if the limit is calculated as a percentage.
        percentage:
          $ref: '#/components/schemas/Percentage'
        temporaryIndicator:
          type: boolean
          description: Indicates whether the limit is temporary or not.
          example: true
        validityPeriod:
          $ref: '#/components/schemas/DateTimePeriod'
        periodicity:
          description: Renewal frequency
          $ref: '#/components/schemas/Frequency'
        usedAmount:
          description: Amount limit used
          $ref: '#/components/schemas/Amount'
        usedNumber:
          type: integer
          description: Number limit used.
        usedPercentage:
          $ref: '#/components/schemas/Percentage'
        status:
          $ref: '#/components/schemas/LimitStatus'
        statusDateAndtime:
          $ref: '#/components/schemas/DateAndTime'
        history:
          $ref: '#/components/schemas/LimitHistory'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
        codes:
          type: array
          description: |
            Additional limits codes.
          items:
            $ref: '#/components/schemas/GenericCode'
        accessConditions:
          type: array
          description: |
            Limit access condition. Possible values: BeforeTransfers, AfterTransfers: Overdraft Limit is accessed before or after automatic transfers. Other values: POSTransactions, ATMTransactions, when the customer authorize the payment of ATM or POS transactions, if the transaction was to overdraw the account.
          items:
            $ref: '#/components/schemas/ConditionName'
        notificationOptions:
          type: array
          items:
            type: string
            description: |
              Indicates whether notices are generated for the limit. Possible Values: Notice, Exception, Statement.
            example: Exception
        payments:
          type: array
          description: |
            Payments methods to cover the amount limit overdraft.
          items:
            $ref: '#/components/schemas/AccountPayment'
    LimitType:
      maxLength: 35
      type: string
      description: "Specifies the type of risk management limit. \n       Bilateral, NetBilateral, IndirectBilateral, Global, MandatoryBilateral, DiscretionaryBilateral, DirectDebit, SingleCustomerDirectDebit, SingleFinancialInstitutionDirectDebit, TotalDailyCustomerDirectDebit, TotalDailyFinancialInstitutionDirectDebit, AutoCollateralisation, UnsecuredCredit, ExternalGuarantee, Revolving, NotRevolving.\n"
      example: DirectDebit
    LimitStatus:
      maxLength: 35
      type: string
      description: "Specifies the current status of a limit. \n       Possible values are: Enabled, Disabled, Deleted, Requested, NotAuthorized (The limit is not authorized by the customer). Other values: CustomerEnrolled, CustomerNotEnrolled, InstitutionEnrolled.\n"
      example: Requested
    LimitHistory:
      type: object
      properties:
        originalAmount:
          description: Amount limit
          $ref: '#/components/schemas/Amount'
        originalLimitType:
          $ref: '#/components/schemas/LimitType'
        details:
          type: array
          items:
            $ref: '#/components/schemas/LimitHistoryDetail'
      description: |
        Historic values of a Limit
    LimitHistoryDetail:
      type: object
      properties:
        amount:
          description: Amount limit
          $ref: '#/components/schemas/Amount'
        enabledDate:
          $ref: '#/components/schemas/DateAndTime'
        disableDate:
          $ref: '#/components/schemas/DateAndTime'
      description: |
        Detail of the limit history
    ConditionName:
      maxLength: 36
      minLength: 1
      type: string
      description: "Specifies the name of a condition. Possible values: \nLessThanMinAmount, MoreThanMaximumCredit, PastDueXDays.\n\n    \n"
      example: LessThanMinAmount
    IdentityQuestion:
      type: object
      properties:
        question:
          description: |
            The text with the question.
          $ref: '#/components/schemas/Description'
        questionId:
          description: |
            Unique identifier of the security question used to identify the customer. Possible values: PlaceOfBirth, County, FavoriteColor, FavoriteNumber, FavoriteDate.
          $ref: '#/components/schemas/Id'
        identityQuestionType:
          $ref: '#/components/schemas/IdentityQuestionType'
        answer:
          $ref: '#/components/schemas/Description'
        message:
          $ref: '#/components/schemas/Description'
      description: |
        Additional ways to verify the identity of the customer. This is especially helpful when a customer does not have proper identification with them at the time or when there is a need to request additional identification from a customer.
    IdentityQuestionType:
      maxLength: 130
      type: string
      description: |
        Security questions. Possible Values: MotherMaidenName, CityOfBirth, HighSchoolName, FatherMiddleName, SchoolMascot, ResidenceCounty, MotherBirthMonth, 1stEmployerName, ElementarySchoolName, 1stChildMiddleName, PetName, AnniversaryDate, ResidenceCityIn2000, FirstCar, FavoriteArtist, FavoriteColor, FavoriteHobby, FavoriteMovie, FavoriteSportTeam, FavoriteTeacher
      example: FavoriteColor
    PartyRelationType:
      maxLength: 40
      minLength: 1
      type: string
      description: |
        Type of relation between parties.  Possible values Between Organizations and persons are: ResponsibleParty, Owner, ControlPerson, ControlPersonOwner, AuthorizedPerson, BeneficialOwner, PrimaryContact, SecondaryContact, VicePresident, President, Treasurer, Secretary, Partner, GeneralPartener, CEO, CFO, COO, Conservator, Dealer, Director, MessageReceiver, Employee, Excecutor, GeneralPartner, HumanResourceRepresentative, IOLTAContact, ManagingMember, PrimaryContact, SecondaryContact, Estate. Between Persons and Organizations: Business, Organization, UnclaimedPropertyContact, UtilityContact. For Trusts: Trustor, Trustee.  Between organizations: Subsidiary, ParentOrganization, Branch. Between parties and external entities: AccountOpenningOfficer, CustomerServiceOfficer, PrimaryServicerOfficer,  SecondaryServicerOfficer, SalesPerson, ReferralOfficer. Between financial institutions: AffiliateFinancialInstitution, HoldingCompany. Between persons: Spouse, Aunt, Brother, Companion, Daughter, Father, Friend, Granddaughter, Grandmother, Grandfather, Grandson, Husband, Mother, Nephew, Niece, Sister, Son, Uncle, Wife, Child, Grandparent. Grandchild, Sibling, Parent, Partner, Related, InitiatingParty
      example: PrimaryServicerOfficer
    Restriction:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 60
          minLength: 1
          type: string
          description: "Name of the restriction in PascalCase. Possible values: TransferIn, TransferOut, WireTransferIn, WireTransferOut, \nACHTransferIn, ACHTransferOut, ForeignIncomingWires, ForeignOutgoingWires, ACHTransfers, InternetBankingTransfer, InternetView, InternetInquiry, ForeignOutgoingIran, Withdrawals, Renew, Transfers, AdvanceTransfer, OnlineBanking, ElectronicBanking, InvestmentAllowed, InvestmentSetUpAllowed, DebitCardAllowed, CheckOrderAllowed, AutomaticSweep, AccountManagement\n"
          example: WireTransferIn
        restrictionPurpose:
          $ref: '#/components/schemas/Description'
        enableIndicator:
          type: boolean
          description: Indicates whether the capability is allowed or not.
          example: true
        disableConditions:
          type: array
          description: |
            Conditions that disabel the restriction.
          items:
            $ref: '#/components/schemas/ConditionName'
        validFrom:
          $ref: '#/components/schemas/Date'
        validUntil:
          $ref: '#/components/schemas/Date'
        status:
          $ref: '#/components/schemas/RestrictionStatus'
      description: Restriction on capabilities allowed.
    RestrictionStatus:
      maxLength: 36
      minLength: 1
      type: string
      description: "Specifies the status of a restriction enablement request. Possible values: Enable, Pending, InquiryOnly, Disable, Requested.\n    \n"
      example: Pending
    FundingSource:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Source of funds for the account. Possible values: CreditTransfer, NewCustomer, FundsFromExistingCustomer
      example: CreditTransfer
    FinancialStatement:
      description: |
        Specifies financial statement details.
      type: object
      properties:
        frequency:
          description: |
            The frequency of the regular statement.
          $ref: '#/components/schemas/Frequency'
        nextFrequency:
          description: |
            The next frequency of the regular statement.
          $ref: '#/components/schemas/Frequency'
        communicationMethods:
          type: array
          items:
            $ref: '#/components/schemas/StatementCommunicationChannel'
        format:
          $ref: '#/components/schemas/DocumentFormat'
        codes:
          type: array
          description: |
            Codes related to statements or internal handling codes associated with the statement. Possible Values: CombinedCode, SpecialStatement, DetailsFormat, StatementGroup, ProfitabilityOption.
          items:
            $ref: '#/components/schemas/GenericCode'
        identifiers:
          type: array
          description: |
            Identification of statement instances and related. Possible values: schemeName: LastCombinedStatement, CombinedStatementAccountId
          items:
            $ref: '#/components/schemas/GenericIdentification'
        templateCode:
          $ref: '#/components/schemas/StatementTemplateId'
        lastStatementPeriod:
          $ref: '#/components/schemas/Period'
        nextStatementPeriod:
          $ref: '#/components/schemas/Period'
        lastStatementDate:
          description: |
            The date of the last statement.
          $ref: '#/components/schemas/Date'
        nextStatementDate:
          description: |
            The date of the next statement.
          $ref: '#/components/schemas/Date'
        serviceChargeDate:
          description: |
            The date on which service charges will be applied to an account
          $ref: '#/components/schemas/Date'
        previousStatementDate:
          description: |
            The date of the statement previous from the last.
          $ref: '#/components/schemas/Date'
        lastRegularStatementDate:
          description: |
            The date of the last regular statement.
          $ref: '#/components/schemas/Date'
        truncationOptions:
          type: array
          items:
            type: string
            description: |
              Options to indicate if the physical items are enclosed with an account statement. Possible Values:  ItemsIncluded, ItemsNotIncluded, CIPModuleOnly, NotIcludedDiscrepancyReport, ChecksNotIncluded, DepositsNotIncluded, HandFile
            example: ItemsIncluded
        accountNameIndicator:
          type: boolean
          description: Indicates whether the account name is printed on the statement.
        balances:
          type: array
          description: Statement total amounts
          readOnly: true
          items:
            $ref: '#/components/schemas/Balance'
        preferredLanguage:
          $ref: '#/components/schemas/PreferredLanguage'
        combineType:
          maxLength: 36
          minLength: 1
          type: string
          description: |
            Indicates whether account transactions are printed on a combined statement. Possible combinations: CheckingStatement, SavingsStatement, PrimaryAccount, SecondaryAccount.
          example: SavingsStatement
        category:
          $ref: '#/components/schemas/StatementCategory'
        subcategory:
          $ref: '#/components/schemas/StatementSubcategory'
        profitabilityModelId:
          $ref: '#/components/schemas/StatementModelId'
        lastIRAStatementDate:
          $ref: '#/components/schemas/Date'
    Statement:
      type: object
      properties:
        frequency:
          description: |
            The frequency of the regular statement.
          $ref: '#/components/schemas/Frequency'
        nextFrequency:
          description: |
            The next frequency of the regular statement.
          $ref: '#/components/schemas/Frequency'
        communicationMethods:
          type: array
          items:
            $ref: '#/components/schemas/StatementCommunicationChannel'
        format:
          $ref: '#/components/schemas/DocumentFormat'
        codes:
          type: array
          description: |
            Codes related to statements or internal handling codes associated with the statement. Possible Values: CombinedCode, SpecialStatement, DetailsFormat, StatementGroup, ProfitabilityOption.
          items:
            $ref: '#/components/schemas/GenericCode'
        identifiers:
          type: array
          description: |
            Identification of statement instances and related. Possible values: schemeName: LastCombinedStatement, CombinedStatementAccountId
          items:
            $ref: '#/components/schemas/GenericIdentification'
        templateCode:
          $ref: '#/components/schemas/StatementTemplateId'
        lastStatementPeriod:
          $ref: '#/components/schemas/Period'
        nextStatementPeriod:
          $ref: '#/components/schemas/Period'
        lastStatementDate:
          description: |
            The date of the last statement.
          $ref: '#/components/schemas/Date'
        nextStatementDate:
          description: |
            The date of the next statement.
          $ref: '#/components/schemas/Date'
        serviceChargeDate:
          description: |
            The date on which service charges will be applied to an account
          $ref: '#/components/schemas/Date'
        previousStatementDate:
          description: |
            The date of the statement previous from the last.
          $ref: '#/components/schemas/Date'
        lastRegularStatementDate:
          description: |
            The date of the last regular statement.
          $ref: '#/components/schemas/Date'
        truncationOptions:
          type: array
          items:
            type: string
            description: |
              Options to indicate if the physical items are enclosed with an account statement. Possible Values:  ItemsIncluded, ItemsNotIncluded, CIPModuleOnly, NotIcludedDiscrepancyReport, ChecksNotIncluded, DepositsNotIncluded, HandFile
            example: ItemsIncluded
        accountNameIndicator:
          type: boolean
          description: Indicates whether the account name is printed on the statement.
        balances:
          type: array
          description: Statement total amounts
          readOnly: true
          items:
            $ref: '#/components/schemas/Balance'
        preferredLanguage:
          $ref: '#/components/schemas/PreferredLanguage'
        combineType:
          maxLength: 36
          minLength: 1
          type: string
          description: |
            Indicates whether account transactions are printed on a combined statement. Possible combinations: CheckingStatement, SavingsStatement, PrimaryAccount, SecondaryAccount.
          example: SavingsStatement
      description: |
        Specifies statement details. How often statements will be sent, in which format.
    StatementCommunicationChannel:
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/CommunicationChannelName'
        channelIdentification:
          $ref: '#/components/schemas/CommunicationChannelIdentification'
        format:
          $ref: '#/components/schemas/DocumentFormat'
        printOnNextCycleIndicator:
          type: boolean
          description: "Indicates whether the statement will be produced at the end of the next statement cycle. \n"
        codes:
          type: array
          description: |
            Codes to determine configurarion options for alerts and notifications. Possible code names: NoticeOption.
          items:
            $ref: '#/components/schemas/GenericCode'
      description: |
        Channel used to communicate with a party.
    StatementTemplateId:
      maxLength: 36
      minLength: 1
      type: string
      description: "Template used to create the statement document. This is an external code provided by the account servicer. \n"
      example: "1"
    StatementCategory:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Used to categorize the statement. Possible Values: BalanceSheet, ProfitAndLoss
      example: BalanceSheet
    StatementSubcategory:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Used to subcategorize the statement. Possible Values: Cash, AccountReceivable, Inventory, CurrentAssets
      example: Cash
    StatementModelId:
      maxLength: 36
      minLength: 1
      type: string
      description: "Model used to calculate customer profitability. This is an external id provided by the account servicer. \n"
      example: "1"
    InterestCalculation:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/InterestName'
        interestCode:
          maxLength: 50
          type: string
          description: |
            Interest calculation code used by the account servicer.
        dayCountBasis:
          $ref: '#/components/schemas/InterestDayCountBasis'
        calculationMethodOption:
          $ref: '#/components/schemas/InterestComputationParameter'
        accruedDate:
          description: |
            An accrued date is a hypothetical point in time when the interest should have been paid.
          $ref: '#/components/schemas/Date'
        nextInterestDate:
          $ref: '#/components/schemas/Date'
        lastInterestDate:
          $ref: '#/components/schemas/Date'
        term:
          description: The period funds are earning interest.
          $ref: '#/components/schemas/TemporalDuration'
        enableIndicator:
          type: boolean
          description: |
            Indicates whether the interest is enabled for automatic charge.
          example: true
        compoundingMethod:
          description: |
            Indicates the compounding method used for interest calculations.
          $ref: '#/components/schemas/InterestCompoundingMethod'
        compoundingFrequency:
          description: |
            Frequency of the interest calculation and compounded during the term.
          $ref: '#/components/schemas/Frequency'
        calculationFrequency:
          $ref: '#/components/schemas/Frequency'
        oneDayInterest:
          description: Total interest that has accumulated over a day.
          $ref: '#/components/schemas/PositiveAmount'
        payment:
          description: |
            Details on the interest payment.
          $ref: '#/components/schemas/AccountPayment'
        balances:
          type: array
          description: "Total amounts related to an interest. Possible Values: \nCurrentEarned, 2021AsOfDate, 2020AsOfDate, 2019AsOfDate, CutOffAvailable, CutOffAverageAvailable, CutOffAverageLedger, CutOffAverageMinimumLedger, CutOffLedger, CutOffMinimumLedger\n"
          items:
            $ref: '#/components/schemas/Balance'
        renewal:
          $ref: '#/components/schemas/InterestRenewalDetails'
        cycle:
          $ref: '#/components/schemas/InterestCycle'
        lastCalculus:
          description: |
            The amount of automatic interest that was last posted to the account.
          $ref: '#/components/schemas/PositiveAmount'
        reportingIndicator:
          type: boolean
          description: |
            Identifies whether interest earned or paid is reportable.
        reportingOptions:
          type: array
          items:
            $ref: '#/components/schemas/InterestReportingOption'
        form:
          $ref: '#/components/schemas/TaxForm'
        annualPercentageYieldFrequency:
          description: |
            The frequency used in calculating the Regulation DD Annual Percentage Yield (APY) when the financial institution requires interest to be withdrawn (i.e. compounding interest is not an option.) The Regulation DD Compound Frequency overrides the interest frequency only in computing the APY. For example, an account with interest paid monthly by check but disclosed as annual compounding.
          $ref: '#/components/schemas/Frequency'
        annualPercentageYield:
          description: |
            Annual Percentage Yield (APY) is a measure used in finance to express the total return on an investment, taking into account both the interest earned and the appreciation in the investment's value, over a specified period. It is expressed as a percentage and is often used for fixed income securities such as bonds, and money market accounts.
          $ref: '#/components/schemas/Amount'
        daysSinceLastAnniversary:
          type: integer
          description: |
            The number of calendar days processed since the last anniversary date
        rates:
          type: array
          description: Rates involve on interest calculation.
          items:
            $ref: '#/components/schemas/InterestCalculationRate'
        rateType:
          $ref: '#/components/schemas/InterestRateType'
        rateTieredType:
          $ref: '#/components/schemas/InterestTieredRateType'
        rateAmountType:
          $ref: '#/components/schemas/BalanceName'
        pastDueOptions:
          type: array
          description: |
            Indicates how the Past Due Rate is applied to past due loans. After a loan payment is past due after certain days, interest is earned retroactively from the payment due date.
          items:
            maxLength: 70
            minLength: 1
            type: string
            description: |
              Possible Values: NotChange, indicates interest rate is not changed after it is past due; PastDueRate, indicates loan earn at the interest past due rate after being past due for certain days; RatePlusAdjuster, indicates the rate  adjuster is automatically added to a  interest rate after being past due for certain days; DaysAdjusterAddedAsPercentage, indicates the rate  adjuster is a percentage and it is  automatically added to a  interest rate after being past due for certain days; OverridesFloorOrCeiling, indicates that the adjusted rate can override the floor or ceiling rate.
        variableInterests:
          type: array
          items:
            $ref: '#/components/schemas/VariableInterestChanges'
      description: |
        Set of parameters used to calculate an interest.
    InterestRateDetails:
      type: object
      properties:
        rates:
          type: array
          description: Rates involve on interest calculation.
          items:
            $ref: '#/components/schemas/InterestCalculationRate'
        rateType:
          $ref: '#/components/schemas/InterestRateType'
        rateTieredType:
          $ref: '#/components/schemas/InterestTieredRateType'
        rateAmountType:
          $ref: '#/components/schemas/BalanceName'
        pastDueOptions:
          type: array
          description: |
            Indicates how the Past Due Rate is applied to past due loans. After a loan payment is past due after certain days, interest is earned retroactively from the payment due date.
          items:
            maxLength: 70
            minLength: 1
            type: string
            description: |
              Possible Values: NotChange, indicates interest rate is not changed after it is past due; PastDueRate, indicates loan earn at the interest past due rate after being past due for certain days; RatePlusAdjuster, indicates the rate  adjuster is automatically added to a  interest rate after being past due for certain days; DaysAdjusterAddedAsPercentage, indicates the rate  adjuster is a percentage and it is  automatically added to a  interest rate after being past due for certain days; OverridesFloorOrCeiling, indicates that the adjusted rate can override the floor or ceiling rate.
        variableInterests:
          type: array
          items:
            $ref: '#/components/schemas/VariableInterestChanges'
      description: |
        Set of attributes related to the rate change.
    InterestCalculationRate:
      type: object
      properties:
        rateName:
          $ref: '#/components/schemas/RateName'
        rateTierName:
          $ref: '#/components/schemas/RateName'
        percentage:
          $ref: '#/components/schemas/Percentage'
        amount:
          description: |
            Maximum amount range
          $ref: '#/components/schemas/PositiveAmount'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
      description: "Rate attributes \n"
    RateName:
      maxLength: 40
      minLength: 1
      type: string
      description: |
        Specifies the name of the rate. Possible values: Prior, Original, Actual, LastAnniversary, Effective, Current, Future, Base, Floor, Ceiling, OverSplit, UnderSplit.
      example: Actual
    InterestRateType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the type of interest rate. Some ISO 20022 compliant values are: Fixed, Forfeit, Variable, StepUp, Scheduled, Unscheduled, Discount, FixedRateUnderlyingExposureForLife, FixedRateUnderlyingExposureWithCompulsoryFutureSwitchToFloating, FixedWithFuturePeriodicResets, FloatingLinkedToIndex, FloatingRateUnderlyingExposureForLife, FloatingRateUnderlyingExposureWithCap, FloatingRateUnderlyingExposureWithFloor, FloatingRateUnderlyingExposureWithFloorAndCap, Modular, ObligorSwapped, SwicthOptionality, Tiered, StepFrequency, RateIndex, IndexFrequency.
      example: Fixed
    InterestTieredRateType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the type of tiered interest rate. Possible values:
         Whole, Split, Dynamic.
      example: Whole
    VariableInterestChanges:
      type: object
      properties:
        leadDays:
          description: |
            Number of days prior to the event to do a review.
          $ref: '#/components/schemas/Day'
        nextChangeDate:
          description: |
            Next date at which the interest rate is to be adjusted.
          $ref: '#/components/schemas/Date'
        lastChangeDate:
          description: |
            Last date at which the interest rate was adjusted.
          $ref: '#/components/schemas/Date'
        changes:
          type: array
          items:
            $ref: '#/components/schemas/VariableInterestCalculation'
        referenceRateName:
          description: |
            Identifies the reference index for the debt instrument.
          $ref: '#/components/schemas/BenchmarkCurve'
        rateType:
          $ref: '#/components/schemas/InterestRateType'
        calculationMethod:
          $ref: '#/components/schemas/VariableInterestMethod'
        spread:
          description: |
            Percentage factor used to calculate the rate changes. If the spread entered is 13.000 and the rate in the specification is 11.0000%, the rate over will be 12.4300% (11 x 1.13). If the spread entered is -13.000, the rate over will be 9.5700% (11 x .87).
          $ref: '#/components/schemas/Percentage'
        basisPointSpread:
          type: integer
          description: |
            Provides the number of basis points added to (if positive) or deducted from (if negative) the underlying reference rate to calculate the actual interest rate applicable. Basis points are a unit of measurement used to describe the change in interest rates. One basis point is equal to 0.01%, or one hundredth of a percent. Therefore, 50 basis points is equivalent to 0.50%, and 100 basis points is equivalent to 1%.
        pointSpread:
          description: "Percentage to be added to or deducted from the index rate to calculate the effective rate. If the point spread entered is 1.5000 and the rate in the specification is 11.0000%, the rate over will be 12.5000%. If the point spread entered is -1.5000, the rate over will be 9.5000%. \n"
          $ref: '#/components/schemas/Percentage'
        productId:
          $ref: '#/components/schemas/ProductId'
        effectiveDate:
          description: |
            Date on which the new interest rate change will be effective.
          $ref: '#/components/schemas/DateAndTime'
        frequency:
          description: |
            Date on which the new interest rate change will be effective.
          $ref: '#/components/schemas/Frequency'
        increaseOnlyIndicator:
          type: boolean
          description: |
            Indicates whether the rate only increases.
        ceilingRate:
          description: |
            Rate of interest finalized from the higher range of rates.
          $ref: '#/components/schemas/PositivePercentage'
        floorRate:
          description: |
            Rate of interest finalized from the lower range of rates.
          $ref: '#/components/schemas/PositivePercentage'
      description: |
        Specifies the parameters to be used for variable interest. Details of frequency for interest rate adjustment.
    VariableInterestCalculation:
      type: object
      properties:
        referenceRateName:
          description: |
            Identifies the reference index for the debt instrument.
          $ref: '#/components/schemas/BenchmarkCurve'
        rateType:
          $ref: '#/components/schemas/InterestRateType'
        calculationMethod:
          $ref: '#/components/schemas/VariableInterestMethod'
        spread:
          description: |
            Percentage factor used to calculate the rate changes. If the spread entered is 13.000 and the rate in the specification is 11.0000%, the rate over will be 12.4300% (11 x 1.13). If the spread entered is -13.000, the rate over will be 9.5700% (11 x .87).
          $ref: '#/components/schemas/Percentage'
        basisPointSpread:
          type: integer
          description: |
            Provides the number of basis points added to (if positive) or deducted from (if negative) the underlying reference rate to calculate the actual interest rate applicable. Basis points are a unit of measurement used to describe the change in interest rates. One basis point is equal to 0.01%, or one hundredth of a percent. Therefore, 50 basis points is equivalent to 0.50%, and 100 basis points is equivalent to 1%.
        pointSpread:
          description: "Percentage to be added to or deducted from the index rate to calculate the effective rate. If the point spread entered is 1.5000 and the rate in the specification is 11.0000%, the rate over will be 12.5000%. If the point spread entered is -1.5000, the rate over will be 9.5000%. \n"
          $ref: '#/components/schemas/Percentage'
        productId:
          $ref: '#/components/schemas/ProductId'
        effectiveDate:
          description: |
            Date on which the new interest rate change will be effective.
          $ref: '#/components/schemas/DateAndTime'
        frequency:
          description: |
            Date on which the new interest rate change will be effective.
          $ref: '#/components/schemas/Frequency'
        increaseOnlyIndicator:
          type: boolean
          description: |
            Indicates whether the rate only increases.
        ceilingRate:
          description: |
            Rate of interest finalized from the higher range of rates.
          $ref: '#/components/schemas/PositivePercentage'
        floorRate:
          description: |
            Rate of interest finalized from the lower range of rates.
          $ref: '#/components/schemas/PositivePercentage'
      description: |
        Specifies the parameters to be used for variable interest.
    BenchmarkCurve:
      type: string
      description: "Specifies a benchmark curve name. Possible ISO 20022 compliant values are: WIBOR, Treasury, TIBOR, TELBOR, SWAP, STIBOR, PRIBOR, Pfandbriefe, NIBOR, MuniAAA, MOSPRIM, LIBOR, LIBID, JIBAR, ISDAFIX, GCFRepo, FutureSWAP, EuroSwiss, EURODOLLAR, Euribor, EONIASwaps, EONIA, CIBOR, CDOR, BUBOR, BBSW\n\n\n   \n"
    VariableInterestMethod:
      maxLength: 50
      minLength: 1
      type: string
      description: |
        Specifies the variable interest method. Possible Values:  PointSpread, FactorSpread, PercentageVariance, NotPercentageVariance.
      example: PointSpread
    PositivePercentage:
      maxLength: 23
      pattern: "^100|(([1-9][0-9]{0,1})([.][0-9]{0,8}){0,1})$"
      type: string
      description: |
        Value expressed as a positive percentage, rate expressed as a percentage, that is, in hundredths, for example, 0.7 is 7/10 of a percent, and 7.0 is 7%.
            total number of digits: 11
            number of digits in fractional part: 10
            Max Value: 100
      example: "25"
    InterestDayCountBasis:
      maxLength: 50
      minLength: 1
      type: string
      description: |
        An interest day count basis is a method used to calculate interest accrual over a period of time for loans and bonds. The method involves determining the number of days over which interest is being calculated, known as the accrual period. The resulting accrual period is then divided by a certain number to calculate the daily interest rate, which is applied to the principal balance to determine the interest payment. Possible Values: ActualActual, Actual360, Actual365, 365365, 360360, Monthly78ths, 365360, ActualSchedule, ScheduleSchedule.
      example: Actual360
    InterestComputationParameter:
      maxLength: 50
      minLength: 1
      type: string
      description: "Specifies a parameter that apply at the interest day count basis. Possible Values:  LastInterest,  EqualPayment, InterestAndPrincipal, InterestSeparatedm, Amortized, AddOn, NegativeAmortization, Simple, FHLMC. \n"
      example: LastInterest
    InterestCompoundingMethod:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Inteterst compounding method:  Possible Values: Simple, Daily, Continuous.
      example: Deposit
    InterestRenewalDetails:
      properties:
        maturityNoticeOptions:
          type: array
          description: "Indicates wether the maturity information is printed on the combined Maturity, Interest and Rate Change notification.  \n"
          items:
            maxLength: 70
            minLength: 1
            type: string
            description: |
              Possible Values: MaturityNotPrinted, indicates maturity information is not printed; ForecastMaturity, indicates maturity information is printed for all accounts only when maturity is forecast; AutomaticRenewal, indicates maturity information is printed only for automatically renewable account; AtMaturity, indicates maturity information is printed only at maturity; NonAutomaticRenewal,  indicates maturity information is printed only non-renewable accounts.
        rateAtMaturityOptions:
          type: array
          description: |
            Indicates, for single maturity accounts, the rate used to accrue interest after maturity, and the length of time the rate is in effect.
          items:
            maxLength: 70
            minLength: 1
            type: string
            description: |
              Possible Values: CurrentRate, indicates the  current interest rate is effective after maturity; MaturityPeriod, indicates an account ceases to accrue after the Maturity Rate Period: CurrentRateInPeriod; MaturityRate.
        changeNoticeOption:
          maxLength: 70
          minLength: 1
          type: string
          description: |
            Indicates whether rate change notices are produced. Possible Values: Default; NoNotifications, indicates that rate change notices are not produced; RateChanges, indicates that Rate Change Notices are produced;  RateForecast,  indicates that Rate Change Notices are produced during rate change forecasting.
        noticePrintOptions:
          type: array
          description: |
            Indicates rate change notice print options. Notification will include information about FloorRate, CeilingRate, PreviousRate, CapRate, IndexDescription.
          items:
            maxLength: 70
            minLength: 1
            type: string
            description: |
              Possible Values: FloorRate, CeilingRate, PreviousRate, CapRate, IndexDescription.
        maturityRateDays:
          type: integer
          description: "The number of days after maturity that single maturity accounts accrue interest. \n"
        maturityRate:
          description: |
            The interest rate effective after maturity.
          $ref: '#/components/schemas/Percentage'
        renewalType:
          maxLength: 70
          minLength: 1
          type: string
          description: |
            The renewal type indicates whether an account automatically renews at maturity. Possible Values: NoTerm, indicates the account has no term; Automatic, indicates automatically renewal; SingleMaturity, indicates not automatically renewed.
        rateFrequency:
          $ref: '#/components/schemas/Frequency'
        term:
          $ref: '#/components/schemas/TemporalDuration'
        productId:
          $ref: '#/components/schemas/ProductId'
      description: |
        Detailed interest attributes related to rate change at maturity.
    InterestCycle:
      type: object
      properties:
        firstDateRate:
          $ref: '#/components/schemas/Percentage'
        daysProcessed:
          type: integer
          description: |
            The number of calendar days processed during the current interest cycle.
        totalDays:
          type: integer
          description: |
            The total number of days into the current interest period.
        balances:
          type: array
          description: Total amounts related to an interest cycle.
          items:
            $ref: '#/components/schemas/Balance'
      description: |
        Set of parameters used to calculate an interest cycle.
    InterestReportingOption:
      maxLength: 35
      minLength: 1
      type: string
      description: "Identifies options for the interest payment. Possible values: ToGovernment, ToBorrower. \n"
      example: Deposit
    TaxForm:
      required:
        - formName
      type: object
      properties:
        formName:
          maxLength: 10
          minLength: 1
          type: string
          description: |
            Form name requested. Possible Values: W-8BEN, W-8BEN-E, W-8ECI, W-8EXP, W-8IMY, W-9, W-8, 1042-S, 1099-INT, 1099-OID.
          example: W-8
        taxRate:
          description: Indicates the tax rate provided by the IRS on the form.
          $ref: '#/components/schemas/PositiveAmount'
        onFileIndicator:
          type: boolean
          description: |
            Indicates weather the bank establish the appropriate tax treatment of any interest or other income earned on the account related to the form.
        taxStatus:
          type: string
          description: |
            Exempt, Expired, Certified, Signed
          example: Exempt
        certificationDate:
          $ref: '#/components/schemas/Date'
        expirationDate:
          $ref: '#/components/schemas/Date'
      description: "Information of the form requested by the tax payer. \n"
    ChargeCalculation:
      description: Calculation of a service charge or fee.
      type: object
      properties:
        fromDateTime:
          description: Date and time at which the period starts.
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          description: Date and time at which the period ends.
          $ref: '#/components/schemas/DateAndTime'
        chargeId:
          description: "Unique identifier of charge. \n"
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/ChargeName'
        status:
          $ref: '#/components/schemas/ChargeStatus'
        amount:
          description: Amount charged for the service.
          $ref: '#/components/schemas/PositiveAmount'
        currency:
          description: |
            Charge currency
          $ref: '#/components/schemas/CurrencyCode'
        rate:
          description: |
            Rate applied on a basis amount to calculate the service charge.
          $ref: '#/components/schemas/Percentage'
        chargeType:
          $ref: '#/components/schemas/ChargeType'
        exemptIndicator:
          type: boolean
          description: |
            Indicates whether the account is exempt of the charge.
        exemptPeriodsNumber:
          type: integer
          description: |
            Indicates the number of charge periods that the account is exempt from charges.
        codes:
          type: array
          description: |
            Additional charge codes. Possible values: CalculationCodeNumber, ServiceChargePrefix, ServiceChargeCode.
          items:
            $ref: '#/components/schemas/GenericCode'
        calculationMethodCode:
          maxLength: 60
          minLength: 1
          type: string
          description: "Servicer charge calculation code in Pascal Case. Possible values: FIFO, older payment past due. LIFO, most recent payment past due. Also could be a Bank defined string. \n"
        calculationMethodOptions:
          type: array
          description: |
            Indicates other calculation method options for charge calculation.
          items:
            $ref: '#/components/schemas/ChargeCalculationMethodOption'
        options:
          type: array
          items:
            $ref: '#/components/schemas/ChargeOptions'
        calculationBasis:
          $ref: '#/components/schemas/CalculationBasis'
        bearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        maximumAmount:
          description: |
            Maximum amount of money asked or paid for the charge.
          $ref: '#/components/schemas/PositiveAmount'
        maximumNumber:
          type: integer
          description: |
            Maximum Number of charges.
        minimumAmount:
          description: |
            Minimum amount of money asked or paid for the charge.
          $ref: '#/components/schemas/PositiveAmount'
        enableIndicator:
          type: boolean
          description: |
            Indicates whether the charge is enabled for automatic charge.
          example: true
        relatedInterest:
          $ref: '#/components/schemas/InterestCalculationDescriptor'
        debitIndicator:
          type: boolean
          description: |
            Indicates whether the charge is automatically debited from the defined account.
        payments:
          type: array
          description: |
            Payments methods to waive o to pay back the charge.
          items:
            $ref: '#/components/schemas/AccountPayment'
        periodicity:
          $ref: '#/components/schemas/Frequency'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
        description:
          $ref: '#/components/schemas/Description'
    ChargeStatus:
      maxLength: 40
      type: string
      description: "Specifies the current status of the charge. \n       Possible values are: Charged, Waived, AnalysisAddenda, AddendaCharged, AddendaChargedOnCycleDay.\n"
      example: Charged
    ChargeType:
      maxLength: 35
      minLength: 1
      type: string
      description: "Type of service for which a charge is asked or paid. Some possible ISO 20022 compliant values are:\n    BrokerageFee, Commission, BackEndLoad, FrontEndLoad, Switch, DilutionLevy, Discount, ManagementFee, TransferFee, MatchingFees, PostageCharge, RegulatoryFee, ShippingCharge, ServiceProvisionFee, SpecialConcessions, PartAcquis, Penalty, ContingencyDeferredSalesCharge, Equalisation, CorrespondentBankCharge, Premium, Initial, AdvisoryFee, CustodyFee, PublicationFee, AccountingFee, SignatureService, StorageAtDestination, StorageAtOrigin, Packaging, PickUp, DangerousGoodsFee, SecurityCharge, InsurancePremium, CollectFreight, ClearanceAndHandlingAtOrigin, ClearanceAndHandlingAtDestination, AirWayBillFee, TransportCharges, UCITSCommission, SpeciallyAgreedFrontEndLoad, ADRFee, IssuanceCancellationFee, MiscellaneousFee, IssuanceFee, Fee, Insurance, NonTaxable, Recurring, Taxable.\n    \n    \n"
      example: ManagementFee
    ChargeCalculationMethodOption:
      maxLength: 70
      minLength: 1
      type: string
      description: "Possible Values: Default, ScheduledBalance, 365Days, 12DaysInPeriod, OmitCurrentInterest, 12DaysInPeriod, IncludeInterestDueDate, CurrentBalance, 360Days,  RuleOf78, AddOn, \nPercentageByPrincipalAndInterest: Indicates the late charge percent is multiplied by the principal and interest of the payment past due and compared with the Minimum Amount and/or Maximum Amount. If a minimum and maximum are not defined, the calculated amount is charged. If a minimum is defined with no maximum, the greater of either the calculated amount or the minimum amount is charged. If a maximum is defined with no minimum, the lesser of either the calculated amount or the maximum amount is charged. If both a minimum and maximum are defined, the calculated amount is charged if it falls between the minimum and maximum amounts. If the calculated amount is less than the minimum, the minimum amount is charged. If the calculated amount is greater than the maximum, the maximum amount is charged, PercentageByEscrow: Indicates the late charge percent is multiplied by the escrow of the payment past due to calculate the late charge, PrincipalDividedByFrequency : The late charge percentage is divided by the payment frequency, then multiplied by the outstanding principal balance and the result is the late charge.\n  PercentageByOutstandingPrincipal: The late charge percentage is multiplied by the outstanding principal balance and the result is the late charge.\n"
    ChargeOptions:
      maxLength: 50
      minLength: 1
      type: string
      description: |
        Specifies charge options for NSF and Notices in PascalCase. Possible values names are: NSFDefault, NSFRemainPosted, PostedNonNSFDisregarded, NSFPaid, NonPostedNSFReturned, PostedNSFReturned, NonPostedNSFPaid, OneNotice, PrintCurrentBalance, SeparateNotices, NoNoticeForChargeBacks. ExemptNSFFees, ExemptNegativeBalanceFees, ExemptExcessDebitFees.
      example: NSFDefault
    CalculationBasis:
      maxLength: 35
      minLength: 1
      type: string
      description: "Specifies the calculation basis of a charge or fee. Some possible ISO 20022 compliant values are:\n    Average, Daily, Monthly, Annual, FullTerm, RemainingTerm, Monthly78th\n\n    \n    \n    \n"
      example: Monthly
    InterestCalculationDescriptor:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/InterestName'
        code:
          maxLength: 50
          type: string
          description: |
            Interest code used by the account servicer.
        enableIndicator:
          type: boolean
          description: |
            Indicates whether the interest is enabled for automatic charge.
          example: true
        dayCountBasis:
          $ref: '#/components/schemas/InterestDayCountBasis'
        calculationMethodOption:
          $ref: '#/components/schemas/InterestComputationParameter'
        nextInterestDate:
          $ref: '#/components/schemas/Date'
        term:
          description: The period funds are earning interest.
          $ref: '#/components/schemas/TemporalDuration'
        calculationFrequency:
          $ref: '#/components/schemas/Frequency'
        balances:
          type: array
          description: Total amounts related to an interest
          items:
            $ref: '#/components/schemas/Balance'
        rateName:
          $ref: '#/components/schemas/RateName'
        rateTierName:
          $ref: '#/components/schemas/RateName'
        percentage:
          $ref: '#/components/schemas/Percentage'
        amount:
          description: |
            Maximum amount range
          $ref: '#/components/schemas/PositiveAmount'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
      description: |
        Set of parameters used to calculate an interest.
    Tax:
      type: object
      properties:
        taxType:
          $ref: '#/components/schemas/TaxType'
        name:
          $ref: '#/components/schemas/TaxName'
        rate:
          description: |
            Rate applied on a basis amount to calculate the withholding.
          $ref: '#/components/schemas/PositivePercentage'
        debitIndicator:
          type: boolean
          description: |
            Indicates whether the tax is automatically debited from the defined account.
        taxReportingIndicator:
          type: boolean
          description: |
            Flag to indicate that the tax should be reported to the party.
        balances:
          type: array
          description: Total amounts related to the tax type
          items:
            $ref: '#/components/schemas/Balance'
      description: |
        Tax levied on income, at an established tax rate.
    TaxType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the type of tax. Possible ISO values are:
        ValueAddedTaxOfZeroRate, Provincial, NationalTax, StateTax, WithholdingTax, CapitalGainTax, InterimProfitTax, StampDuty, WealthTax, InheritanceTax, SolidaritySurcharge, TaxCredit, Equalisation, GiftTax, ConsumptionTax, AlternativeMinimumTax, LocalTax, NationalFederalTax, PaymentLevyTax, StockExchangeTax, TransactionTax, TransferTax, ValueAddedTax, LocalBrokerCommission, ExecutingBrokerCommission, EUTaxRetention, Aktiengewinn1, Aktiengewinn2, Zwischengewinn, CustomsTax, Mietgewinn, GermanLocalTax3, GermanLocalTax4, GermanLocalTax2, WithholdingOfForeignTax, WithholdingOfLocalTax, CapitalLossCredit, FederalWithholding, StatelWithholding.
      example: TaxCredit
    TaxName:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Name of the tax in PascalCase. Possible values: Sales.
      example: Sales
    GenericAccountCode:
      required:
        - value
      type: object
      properties:
        name:
          maxLength: 50
          type: string
          description: |
            Name of the code. Possible values are: AccountingGroup, CostCenter, DistributionGroup. Also values that may be overlayed on the identification: AccountSubtype, AccountType. Also MICR numbers: MicrAccountNumber, The account number portion of a draft or line of credit MICR line. Other possible values: TaxIncentiveType, Preferredlanguage, FundsDelayedReason, DeliveryMethod.
          example: AccountingGroup
        value:
          maxLength: 35
          minLength: 1
          type: string
          description: Code value.
          example: "195"
        description:
          $ref: '#/components/schemas/Title'
      description: Generic account code definition.
    AccountPrintOptions:
      type: object
      properties:
        accountTitle:
          $ref: '#/components/schemas/Title'
        accountTitleOption:
          $ref: '#/components/schemas/AccountTitlePrintOption'
        checkNameOption:
          $ref: '#/components/schemas/CheckPrintOption'
        balanceOnReceiptOverride:
          $ref: '#/components/schemas/BalanceOnReceiptOptions'
        nameIndicator:
          type: boolean
          description: |
            Indicates whether the account name is printed on account statements.
        handlingLevels:
          type: array
          items:
            $ref: '#/components/schemas/PrintHandlingLevel'
        printOptions:
          type: array
          items:
            $ref: '#/components/schemas/GenericPrintOption'
    AccountTitlePrintOption:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Options to indicate the multiple lists of account owner names. Possible Values: TitleNotPrinted, TitlePrintsBeforeNames, TitlePrintsAfterNames
    CheckPrintOption:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Options to indicate the multiple lists of account owner names. Possible Values: JointAnd, JointOr.
    BalanceOnReceiptOptions:
      maxLength: 35
      minLength: 1
      type: string
      description: "Indicates whether the account balance is printed on teller terminal and ATM receipts. Possible Values: PrintWhenPositive, PrintWhenNegative, AlwaysPrint, NotPrint\n\n    \n"
    PrintHandlingLevel:
      maxLength: 35
      minLength: 1
      type: string
      description: "Indicates the handling level established. \n"
    GenericPrintOption:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/PrintOptionName'
        options:
          type: array
          items:
            $ref: '#/components/schemas/PrintOption'
      description: Print options for the account or parties
    PrintOptionName:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Name of the print Option. Possible Values: ACHTransaction
    PrintOption:
      maxLength: 35
      minLength: 1
      type: string
      description: "Print Option. Possible Values for ACHTransaction: Name, SocialSecurityNumber. \n"
    AccountBillDetails:
      type: object
      properties:
        billingDay:
          description: "Identifies the day of the month that billing statements are generated. \n"
          $ref: '#/components/schemas/Day'
        billOption:
          type: string
          description: |
            Indicates whether billing occurs for the account at the company level (consolidated) or at the individual account level. Possible values: Consolidated, Individual.
          example: Individual
        balances:
          type: array
          description: Bill balances
          items:
            $ref: '#/components/schemas/Balance'
      description: |
        Billing information of the payment
    Collateral:
      type: object
      properties:
        collateralId:
          $ref: '#/components/schemas/Id'
        value:
          description: |
            Value of the collateral as an amount.
          $ref: '#/components/schemas/PositiveAmount'
        ineligibleAmount:
          description: |
            The Ineligible Amount is a non-lien dollar amount that is subtracted from the Collateral Value or Net Appraised Value.
          $ref: '#/components/schemas/PositiveAmount'
        ceilingAmount:
          description: |
            The collateral dollar amount that cannot be exceeded when calculating the Loan Amount.
          $ref: '#/components/schemas/PositiveAmount'
        netAppraisedValue:
          description: |
            The Collateral Net Appraised Value (CNAV) is a critical aspect of real estate appraisal and mortgage financing. It represents the difference between the fair market value (FMV) of the collateral and the outstanding mortgage debt on the property.
          $ref: '#/components/schemas/PositiveAmount'
        lastAppraisedDate:
          description: |
            The date the property was last appraised.
          $ref: '#/components/schemas/DateAndTime'
        lastReviewDate:
          description: |
            The last time the collateral was reviewed.
          $ref: '#/components/schemas/DateAndTime'
        nextReviewDate:
          description: |
            The next time the collateral will be reviewed.
          $ref: '#/components/schemas/DateAndTime'
        purchasePrice:
          description: "The price paid for the property. \n"
          $ref: '#/components/schemas/PositiveAmount'
        collateralType:
          $ref: '#/components/schemas/CollateralType'
        disposalCostPercentage:
          description: |
            Identifies disposal (selling) costs as a percentage of the Net Appraised Value and Collateral Value. Disposal costs are subtracted from the Net Appraised Value to calculate the net disposal value. The costs are also subtracted from the Collateral Value to calculate the net collateral value.
          $ref: '#/components/schemas/Percentage'
        maximumLoanAmountPercentage:
          description: |
            The percentage of the Collateral Value used to determine the Loan Amount. This percentage cannot be greater than 100.00%
          $ref: '#/components/schemas/Percentage'
        marketMarginPercentage:
          description: |
            A percentage subtracted from the Market Price to calculate the Collateral Value.
          $ref: '#/components/schemas/Percentage'
        underwritingRatioFormulas:
          type: array
          items:
            $ref: '#/components/schemas/LoanCollateralRatioFormula'
        liens:
          type: array
          items:
            $ref: '#/components/schemas/LoanCollateralLien'
        codes:
          type: array
          description: |
            Codes to classify collaterals. Possible code names: MarketPricing, OwnerOccupied, PropertyType, Location.
          items:
            $ref: '#/components/schemas/GenericCode'
        numberOfUnits:
          type: integer
          description: |
            A collateral number of units refers to the number of individual properties that are being used as security for the loan.
        contract:
          description: |
            Agreement between two trading parties that contains information about their relative duties and rights regarding collateral.
          $ref: '#/components/schemas/Agreement'
        postalAddress:
          description: |
            Postal address of the collateral residential building.
          $ref: '#/components/schemas/PostalAddress'
        identifiers:
          type: array
          description: |
            Unique indentification of the collateral. Possible scheme names: CollateralNumber, UCCFileNumber.
          items:
            $ref: '#/components/schemas/GenericIdentification'
        status:
          $ref: '#/components/schemas/CollateralStatus'
        statusDate:
          $ref: '#/components/schemas/DateAndTime'
        descriptionLines:
          type: array
          items:
            maxLength: 200
            minLength: 1
            type: string
            example: This is a description.
        collateralOwnershipId:
          description: |
            Specifies who is the owner of the collateral.
          $ref: '#/components/schemas/Id'
      description: |
        Assets pledged by a debtor to secure a loan or an exposure and subject to seizure in the event of default.
    CollateralType:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Specifies the type of collateral. Some possible values are:  LetterOfCredit, Cash, Securities, PhysicalEntities, Insurance, StockCertificate, Bond, BankGuarantee, Commodity, Automobile, IndustrialVehicle, CommercialTruck, RailVehicle, NauticalCommercialVehicle, NauticalLeisureVehicle, Airplane, MachineTool, IndustrialEquipment, OfficeEquipment, ITEquipment, MedicalEquipment, EnergyRelatedEquipment, CommercialBuilding, ResidentialBuilding. IndustrialBuilding, OtherVehicle, OtherEquipment, OtherRealEstate, OtherGoodsOrInventory, Guarantee, OtherFinancialAsset, MixedCategories.
    LoanCollateralRatioFormula:
      type: object
      properties:
        name:
          type: string
          description: |
            Name of the formula.
        ratio:
          description: |
            The ratio used to determine underwriting criteria of the property.
          $ref: '#/components/schemas/PositiveAmount'
      description: |
        The underlying ratio formula refers to the method used by financial institutions to determine the collateral required for a loan. This method takes into account the borrower's financial health, the collateral provided, and the market conditions.
    LoanCollateralLien:
      type: object
      properties:
        name:
          type: string
          description: |
            Name of the lien.
        amount:
          description: |
            The amount of the lien.
          $ref: '#/components/schemas/PositiveAmount'
      description: |
        Legal claim against a piece of property. It represents a debt, which the lender can enforce by taking legal action against the property.
    CollateralStatus:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Specifies the collateral status. Possible Values: Secured, UnderSecured, OverSecured, Repossessed, PartiallySecured.
      example: Secured
    AccountContactDetails:
      type: object
      properties:
        structuredName:
          $ref: '#/components/schemas/StructuredName'
        name:
          description: Preferred name to contact the person
          $ref: '#/components/schemas/PartyName'
        firstContactDate:
          $ref: '#/components/schemas/DateAndTime'
        lastContactDate:
          $ref: '#/components/schemas/DateAndTime'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        jobTitle:
          $ref: '#/components/schemas/JobTitle'
        department:
          maxLength: 35
          minLength: 1
          type: string
          description: Identification of a division of a large Organization or building.
          example: Sales
        preferredMethod:
          $ref: '#/components/schemas/CommunicationChannelName'
        preferredLanguage:
          $ref: '#/components/schemas/PreferredLanguage'
      description: Specifies the contact details of a person.
    AccountRenewal:
      type: object
      properties:
        renewalType:
          $ref: '#/components/schemas/AccountRenewalType'
        frequency:
          description: Renewal frequency
          $ref: '#/components/schemas/Frequency'
        rate:
          description: |
            Account renewal rate.
          $ref: '#/components/schemas/PositivePercentage'
        productId:
          description: Renewal product
          $ref: '#/components/schemas/ProductId'
        graceDays:
          type: integer
          description: The time period when customer can cancel renewal
        gracePeriodIndicator:
          type: boolean
          description: |
            Indicates whether the account is within the grace period.
        lastRenewalDate:
          $ref: '#/components/schemas/DateAndTime'
      description: |
        Information related to the account renewal
    AccountRenewalType:
      maxLength: 70
      minLength: 1
      type: string
      description: |
        The renewal type indicates whether an account automatically renews at maturity. Possible Values: NoTerm, indicates the account has no term; Automatic, indicates automatically renewal; SingleMaturity, indicates not automatically renewed; NoRenewalAllowed.
    ServicerAlert:
      type: object
      properties:
        alertName:
          $ref: '#/components/schemas/AlertName'
        alertType:
          $ref: '#/components/schemas/AlertType'
        alertCode:
          maxLength: 36
          minLength: 1
          type: string
          description: |
            Service alert identifier or code, used to arrange multiple alerts and warnings in a sequence.
        message:
          $ref: '#/components/schemas/Description'
        lastAlertDate:
          $ref: '#/components/schemas/Date'
        validFrom:
          $ref: '#/components/schemas/Date'
        validUntil:
          $ref: '#/components/schemas/Date'
      description: |
        Customer alerts to be received by the account servicer.
    AlertName:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Service alert human readable identifier in Pascal case. An alert notification received by the bank. Possible values: CreditBureauAlert, CustomerAlert,  PaymentCard, LostBook, TwoSignaturesRequired, PledgedAsCollateral, DeathOnAccount, Bankruptcy, NoDisclosure, Caution, DuplicateBookIssued, PowerOfAttorney, DoNotReopen.
      example: CreditBureauAlert
    AlertType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        An alert notification type. Possible values: Warning, Urgent, Teller.
      example: Warning
    AccountHistory:
      type: object
      properties:
        originalOpenDate:
          $ref: '#/components/schemas/Date'
        originalTerm:
          $ref: '#/components/schemas/TemporalDuration'
        originalMaturityDate:
          $ref: '#/components/schemas/Date'
        lastMaturedDate:
          $ref: '#/components/schemas/Date'
      description: History attribute values.
    AccountDetailedStatus:
      type: object
      properties:
        statusName:
          $ref: '#/components/schemas/AccountStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        reason:
          $ref: '#/components/schemas/StatusReason'
        reasonDescription:
          $ref: '#/components/schemas/Description'
        details:
          type: array
          description: |
            Detailed account status. Possible Values: RegulationDD, Analysis, NewClassCode
          items:
            $ref: '#/components/schemas/GenericStatus'
        processEvents:
          type: array
          description: |
            Account process event list defined by the account servicer.
          items:
            $ref: '#/components/schemas/ProcessEvent'
        openDate:
          $ref: '#/components/schemas/Date'
        closeDate:
          $ref: '#/components/schemas/Date'
        externalAccountIndicator:
          type: boolean
          description: Indicates whether an account is an external entity.
        collateralIndicator:
          type: boolean
          description: Indicates whether an account has been pledged as collateral.
        negotiableIndicator:
          type: boolean
          description: Indicates whether an account is a negotiable instrument.
        closeOption:
          maxLength: 34
          minLength: 1
          type: string
          description: |
            Option for closing an account. Possible Values: DoNotCloseAutomatically, CloseAutomatically
        profitabilityAnalysisStatus:
          maxLength: 34
          minLength: 1
          type: string
          description: "Profit analysis status. Possible values: High, Low, NotAnalyzed, Analyzed, SystemClosed. \n"
        nonSufficientFundsInstruction:
          maxLength: 34
          minLength: 1
          type: string
          description: |
            Manual NSF decision.
        nonSufficientFunds:
          maxLength: 34
          minLength: 1
          type: string
          description: |
            Automatic NSF decision.
      description: Specifies the current state of an account.
    StatusReason:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Reason for the status. Possible Values: AbortedClearingTimeout, AbortedClearingFatalError, AbortedSettlementTimeout, AbortedSettlementFatalError,TimeoutCreditorAgent, TimeoutInstructedAgent, OfflineAgent, OfflineCreditorAgent, ErrorCreditorAgent, ErrorInstructedAgent, TimeoutDebtorAgent,IncorrectAccountNumber, InvalidDebtorAccountNumber,InvalidCreditorAccountNumber, ClosedAccountNumber,ClosedDebtorAccountNumber, BlockedAccount,ClosedCreditorAccountNumber, InvalidBranchCode,InvalidAccountCurrency, InvalidDebtorAccountCurrency,InvalidCreditorAccountCurrency, InvalidAccountType,InvalidDebtorAccountType,InvalidCreditorAccountType,AccountDetailsChanged, CardNumberInvalid, TransactionForbidden, InvalidBankOperationCode, TransactionNotSupported, InvalidAgentCountry, InvalidDebtorAgentCountry, InvalidCreditorAgentCountry, UnsuccesfulDirectDebit, InvalidAccessRights,PaymentNotReceived, AgentSuspended,CreditorAgentSuspended, NotAllowedBookTransfer, ForbiddenReturnPayment, IncorrectAgent, ZeroAmount, NotAllowedAmount, NotAllowedCurrency, InsufficientFunds, Duplication, TooLowAmount, BlockedAmount, WrongAmount, InvalidControlSum, InvalidTransactionCurrency, InvalidAmount, AmountExceedsClearingSystemLimit, AmountExceedsAgreedLimit, AmountBelowClearingSystemMinimum, InvalidGroupControlSum, InvalidPaymentInfoControlSum, InvalidNumberOfTransactions,InvalidGroupNumberOfTransactions, InvalidPaymentInfoNumberOfTransactions, LimitExceeded, ZeroAmountNotApplied, AmountExceedsSettlementLimit, InconsistenWithEndCustomer, MissingCreditorAddress, UnrecognisedInitiatingParty, UnknownEndCustomer, MissingDebtorAddress, MissingDebtorName, InvalidCountry, InvalidDebtorCountry, InvalidCreditorCountry, InvalidCountryOfResidence, InvalidDebtorCountryOfResidence, InvalidCreditorCountryOfResidence, InvalidIdentificationCode, InvalidDebtorIdentificationCode, InvalidCreditorIdentificationCode, InvalidContactDetails, InvalidChargeBearerCode, InvalidNameLength, MissingName, MissingCreditorName, AccountProxyInvalid, CheckERI, RequestedExecutionDateOrRequestedCollectionDateTooFarInFuture, RequestedExecutionDateOrRequestedCollectionDateTooFarInPast, ElementIsNotToBeUsedAtB-andC-Level, MandateChangesNotAllowed, InformationOnMandateChangesMissing, CreditorIdentifierIncorrect, CreditorIdentifierNotUnambiguouslyAtTransaction-Level, OriginalDebtorAccountIsNotToBeUsed, OriginalDebtorAgentIsNotToBeUsed, ElementContentIncludesMoreThan140Characters, ElementContentFormallyIncorrect, ElementNotAdmitted, ValuesWillBeSetToNextTARGETday, DecimalPointsNotCompatibleWithCurrency, RequiredCompulsoryElementMissing, COREandB2BwithinOnemessage, ChequeSettledOnCreditorAccount, CreditorBankIsNotRegistered, IncorrectCurrency, RequestedByCustomer, DebtorBankIsNotRegistered,ElectronicSignaturesCorrect, OrderCancelled, OrderNotCancelled, OrderRejected, OrderForwardedForPostprocessing, TransferOrder, ProcessingOK, DecompressionError, DecryptionError, DataSignRequested, UnknownDataSignFormat, SignerCertificateRevoked, SignerCertificateNotValid, IncorrectSignerCertificate, SignerCertificationAuthoritySignerNotValid, NotAllowedPayment, NotAllowedAccount, NotAllowedNumberOfTransaction, Signer1CertificateRevoked, Signer1CertificateNotValid, IncorrectSigner1Certificate, SignerCertificationAuthoritySigner1NotValid, UserDoesNotExist, IdenticalSignatureFound, PublicKeyVersionIncorrect, DifferentOrderDataInSignatures, RepeatOrder, ElectronicSignatureRightsInsufficient, Signer2CertificateRevoked, Signer2CertificateNotValid, IncorrectSigner2Certificate, SignerCertificationAuthoritySigner2NotValid, WaitingTimeExpired, OrderFileDeleted, UserSignedMultipleTimes, UserNotYetActivated, InvalidDate, InvalidCreationDate, InvalidNonProcessingDate, FutureDateNotSupported, InvalidCutOffDate, ExecutionDateChanged, DuplicateMessageID, DuplicatePaymentInformationID, DuplicateTransaction, DuplicateEndToEndID, DuplicateInstructionID, DuplicatePayment, CorrespondentBankNotPossible, BalanceInfoRequest, SettlementFailed, SettlementSystemNotAvailable, ERIOptionNotSupported, InvalidFileFormat, SyntaxError, InvalidPaymentTypeInformation, InvalidServiceLevelCode, InvalidLocalInstrumentCode, InvalidCategoryPurposeCode, InvalidPurpose, InvalidEndToEndId, InvalidChequeNumber, BankSystemProcessingError, ClearingRequestAborted, PaymentTransferredAndTracked, PaymentTransferredAndNotTracked, CreditDebitNotConfirmed, CreditPendingDocuments, CreditPendingFunds, DeliveredWithServiceLevel, DeliveredWIthoutServiceLevel, CorrespondingOriginalFileStillNotSent, NoMandate, MissingMandatoryInformationInMandate, CollectionNotDue, RefundRequestByEndCustomer, EndCustomerDeceased, NotSpecifiedReasonCustomerGenerated, NotSpecifiedReasonAgentGenerated, Narrative, NoERI, BankIdentifierIncorrect, InvalidBankIdentifier, InvalidDebtorBankIdentifier, InvalidCreditorBankIdentifier, InvalidBICIdentifier, InvalidDebtorBICIdentifier, InvalidCreditorBICIdentifier, InvalidClearingSystemMemberIdentifier, InvalidDebtorClearingSystemMemberIdentifier, InvalidCreditorClearingSystemMemberIdentifier, InvalidIntermediaryAgent, MissingCreditorSchemeId, RMessageConflict, ReceiverCustomerInformation,NotUniqueTransactionReference, MissingDebtorAccountOrIdentification, MissingDebtorNameOrAddress, MissingCreditorNameOrAddress, RegulatoryReason, RegulatoryInformationInvalid, TaxInformationInvalid, RemittanceInformationInvalid, RemittanceInformationTruncated, InvalidStructuredCreditorReference, InvalidCharacterSet, InvalidDebtorAgentServiceID, InvalidPartyID, ValidRequestForCancellationAcknowledged, UETRFlaggedForCancellation, NetworkStopOfUETR, RequestForCancellationForwarded, RequestForCancellationDeliveryAcknowledgement, SpecificServiceOfferedByDebtorAgent, SpecificServiceOfferedByCreditorAgent, ServiceofClearingSystem, CreditorNotOnWhitelistOfDebtor, CreditorOnBlacklistOfDebtor, MaximumNumberOfDirectDebitTransactionsExceeded, MaximumDirectDebitTransactionAmountExceeded, TransmissonAborted, NoDataAvailable, FileNonReadable, IncorrectFileStructure, TokenInvalid, SenderTokenNotFound, ReceiverTokenNotFound, TokenMissing, TokenCounterpartyMismatch, TokenSingleUse, TokenSuspended, TokenValueLimitExceeded, TokenExpired, InvalidCutOffTime, TransmissionSuccessful, TransferToSignByHand, AuthorisationCancelled, FollowingCancellationRequest, Fraud, NotCompliantGeneric, NoAnswerFromCustomer, ReturnUponUnableToApply, UnduePayment, AlreadyAcceptedRTP, AlreadyExpiredRTP, AlreadyRefusedRTP, AlreadyRejectedRTP, AttachementsNotSupported, ExpiryDateTimeReached, ExpiryDateTooLong, FraudulentOrigin, IncorrectExpiryDateTime, InitialRTPNeverReceived, NonAgreedRTP, NoPaymentGuarantee, PayerOrPayerRTPSPNotReachable, RTPNotSupportedForDebtor, RTPReceivedCanBeProcessed, RTPServiceProviderIdentifierIncorrect, TypeOfPaymentInstrumentNotSupported, UnknownCreditor, OriginalTransactionNotEligibleForRequestedReturn, RequestForCancellationNotFound, SettlementNotReceived
      example: BlockedAccount
    GenericStatus:
      type: object
      properties:
        statusType:
          maxLength: 50
          minLength: 1
          type: string
          description: |
            Pascal case status type. Possible Values: NSFInstruction, RegulationDD, IRA. Pays, InBox, CashReserve, ChargeOff, RestrictedAccount, AccountVerification, ClassCode, LegalEntity, PrivacyNoticed
          example: RegulationDD
        statusName:
          maxLength: 50
          minLength: 1
          type: string
          description: |
            Pascal case status name. Possibles Values for IRA status type: NotEligible, Eligible, DistributionDisability, DistributionDeath, DistributionNormal, AccountLinked, AccountNotLinked. Possible values for Pays: Enable, Disable; InBox: NewMessage, Empty; CashReserve: HasCashReserve, DoNotHave; RestrictedAccount: IsRestricted, NotRestricted; ChargeOff: BankSubmitted, Automatic, IntegratedProcessingAutomatic, IntegratedProcessingClosed. PassbookSavings: NotOnline, Online, Manual. AccountVerification: Valid, NotValid. OverdraftProtection: Enable, Disable. ClassCode: New, NotNew. DefaultStatus: Inminent, NotDefault. LegalEntity: LegalEntityCustomer. PrivacyNoticed:  CustomerCanBeDisclosed, CustomerOptOut, CustomerNotOptOut
          example: Active
        dateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        reasonComment:
          $ref: '#/components/schemas/Description'
        statusReason:
          maxLength: 50
          minLength: 1
          type: string
          description: |
            Pascal case status reason. Possible Values: NSFInstruction, RegulationDD, IRA.
          example: RegulationDD
      description: Generic status definition.
    ProcessEvent:
      properties:
        name:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Human readable pascal case identifier of the process event. Possible list values: YearEndProcessed, MonthEndProcessed, ManuallyControlled
        description:
          $ref: '#/components/schemas/Title'
        spotDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        codes:
          type: array
          description: |
            Codes related to the external provider account. Possible Values: LookUpReference
          items:
            $ref: '#/components/schemas/GenericCode'
      description: |
        Account process event list defined by the account servicer.
    SupplementaryData:
      type: object
      description: |
        Additional information that cannot be captured in the structured elements and/or any other specific block. If this information need to be converted in ISO Messages, must be ISO 20022 compliant: it requires development of a compliant message extension model and its components must be registered in the ISO 20022 Data Dictionary. https://www.iso20022.org/catalogue-messages/additional-content-messages/supplementary-data
    Comment:
      type: object
      properties:
        name:
          maxLength: 35
          minLength: 1
          type: string
        text:
          $ref: '#/components/schemas/Description'
      description: |
        Free text labeled with a name.
    AccountProfile:
      type: object
      properties:
        profileType:
          maxLength: 40
          minLength: 1
          type: string
          description: "Account profile category. Possible Values: Personal, NonPersonal. \n"
          example: Personal
        riskLevel:
          description: Laundering risk level
          $ref: '#/components/schemas/RiskLevel'
        qualityScore:
          $ref: '#/components/schemas/QualityScore'
        riskMeasures:
          type: array
          items:
            $ref: '#/components/schemas/RiskMeasure'
        creditRankingScales:
          type: array
          description: "Borrower credit ranking scores \n"
          items:
            $ref: '#/components/schemas/CreditRankingScale'
        bankruptcy:
          $ref: '#/components/schemas/BankruptcyProfile'
        paymentHistoryFrequency:
          description: |
            Indicates the frequency that the history profile payment status is established. Values are dependent upon credit bureau standards.
          $ref: '#/components/schemas/Frequency'
        paymentHistoryOption:
          maxLength: 40
          minLength: 1
          type: string
          description: |
            Indicates whether the Payment History Profile will be recalculated. Possible Values: Default, NotRecalculate, RecalculateAndSetToDefault, RecalculateAndSetToNot.
          example: NotRecalculate
        balances:
          type: array
          description: |
            Amount balances related to the credit profile. Possible Values: CreditHighBalance.
          items:
            $ref: '#/components/schemas/Balance'
        customerType:
          $ref: '#/components/schemas/CustomerType'
        creditReview:
          $ref: '#/components/schemas/CreditReview'
        eCOACode:
          type: string
          description: |
            The ECOA code indicates how customer account information is reported to the Credit Bureau in keeping with the Equal Credit Opportunity Act.
    RiskLevel:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the customer’s money laundering risk. Possible values: VeryLow, Low, Medium, Medium toHigh, ModerateHigh, High, ExtremelyHigh, NoDetermine.
      example: High
    QualityScore:
      maxLength: 10
      minLength: 2
      type: string
      description: |
        The quality score is based on a borrower's credit history, collateral, and the likelihood of repayment.
    RiskMeasure:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/CreditRankingScaleName'
        level:
          $ref: '#/components/schemas/RiskLevel'
        date:
          $ref: '#/components/schemas/DateAndTime'
        codes:
          type: array
          description: |
            Additional risk measure codes. Possible values: RiskRatingCode
          items:
            $ref: '#/components/schemas/GenericCode'
      description: "Laundry risk measure of an individual. \n"
    CreditRankingScaleName:
      maxLength: 35
      minLength: 1
      type: string
      description: "Most commonly used credit ranking scales. Possible Values: StandardAndPoors, MoodysInvestors. Also other values: Original, 1, 2, 3, Current. \n"
      example: StandardAndPoors
    CreditRankingScale:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/CreditRankingScaleName'
        score:
          maxLength: 10
          minLength: 2
          type: string
          example: AAA
        date:
          $ref: '#/components/schemas/DateAndTime'
        codes:
          type: array
          description: |
            Additional ranking scale codes. Possible values: RiskRatingCode
          items:
            $ref: '#/components/schemas/GenericCode'
      description: |
        A Credit Ranking Scale is a system used to evaluate the creditworthiness of a borrower, which can be an individual, a business, a government, or a corporation.
    BankruptcyProfile:
      type: object
      properties:
        chapter:
          maxLength: 10
          minLength: 1
          type: string
          description: |
            The section on the Bankruptcy Code that sets out the rules and procedures for a particular type of bankruptcy. Possible Values: 7, 11, 13, 12, and 9.
          example: "11"
        status:
          maxLength: 40
          minLength: 1
          type: string
          description: |
            Bankruptcy status. Possible values: Petition, Discharged, DebtReaffirmation, DebtReaffirmationRescinded, PlanConfirmed, PlanCompleted, Withdrawn.
          example: Petition
        statementOption:
          maxLength: 40
          minLength: 1
          type: string
          description: |
            Statement option. Possible Values: RegularBillingStatement,  BankruptcyBillingStatement
          example: RegularBillingStatement
    CreditReview:
      type: object
      properties:
        frequency:
          $ref: '#/components/schemas/Frequency'
        lastReviewDate:
          description: |
            Date and time if the last credit review.
          $ref: '#/components/schemas/DateAndTime'
        nextReviewDate:
          description: |
            Date and time if the next credit review.
          $ref: '#/components/schemas/DateAndTime'
        creditQuality:
          $ref: '#/components/schemas/CreditQuality'
        creditRankingScales:
          type: array
          items:
            $ref: '#/components/schemas/CreditRankingScale'
        creditReportAddressIndicatorCode:
          type: string
          description: |
            is a code or marker used by credit reporting agencies to indicate a match or mismatch between the address supplied in an inquiry and the address they have on file for a consumer.
        creditReportAddressIndicatorDate:
          $ref: '#/components/schemas/DateAndTime'
        consumerCreditReportInformation:
          description: |
            Information provided by the Consumer Credit Report.
          $ref: '#/components/schemas/Description'
        consumerCreditReportDate:
          $ref: '#/components/schemas/DateAndTime'
      description: |
        A credit review is a periodic assessment of an individual’s or businesses' credit profile.
    CreditQuality:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Credit quality rating of an issuer or financial obligation. Possible Values: DefaultImminent, ExtremelySpeculative, HighGrade, HighlySpeculative, InDefault, LowerMediumGrade, NonInvestmentGradeSpeculative, Prime, SubstantialRisk, UpperMediumGrade
      example: UpperMediumGrade
    Product:
      required:
        - name
        - productId
      type: object
      properties:
        productId:
          description: Unique identification of a product within a product type.
          $ref: '#/components/schemas/Id'
        pricingStrategyId:
          $ref: '#/components/schemas/Id'
        name:
          maxLength: 40
          minLength: 1
          type: string
          description: Commercial product name within a product type.
          example: Visa Business Card
        description:
          $ref: '#/components/schemas/Description'
        productType:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Type or nature of a product. Possible Values: Loan, PaymentCard, CheckingAccount, HealthSavingsAccount, RepricingPlan.
          example: PaymentCard
        productSubType:
          maxLength: 35
          minLength: 1
          type: string
          description: Commercial product subtype within a product type.
          example: BusinessCard
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        projectedDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeCalculation'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/ProductPartyRelationType'
        status:
          $ref: '#/components/schemas/ProductStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        codes:
          type: array
          description: |
            Product configuration codes. Possible Values: WebBrand, WaterfieldService, MajorAccountType: Major Account Type code for Employee Qualified Plan, MinorAccountType: Minor Account Type code to use for Employee Qualified Plan, CheckingMajor: Checking Major to be used and linked to Employee Qualified Plan account, CheckingMinor: Checking Minor to be used and linked to Employee Qualified Plan account. Other values: NationalCreditUnionAdministration.
          items:
            $ref: '#/components/schemas/GenericCode'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
    ProductPartyRelationType:
      maxLength: 40
      minLength: 1
      type: string
      description: |
        Type of relation between parties and a Financial Product.  Possible values: ParentProvider
      example: ParentProvider
    ProductStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Specifies the current status of a product. Possible values are:
         Enable, Disable.
      example: GoodStanding
    DocumentDescriptor:
      type: object
      properties:
        documentId:
          $ref: '#/components/schemas/Id'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        title:
          $ref: '#/components/schemas/Title'
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          description: Signoff date of the document.
          $ref: '#/components/schemas/Date'
        issueDate:
          description: Issue date of the document.
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 100
          minLength: 1
          type: string
          description: Specifies the function of the document.
      description: |
        General information related to a document, such as identification number and issue date time.
    Account:
      required:
        - accountId
        - status
        - accountType
        - ownershipType
        - parties
      description: |
        Record of transactions in specific types of assets, maintained by a servicing party on behalf of one or more owning parties. Business relationship between an account servicer and one or more account owners.
      type: object
      properties:
        plasticCount:
          type: integer
          description: |
            Number of plastic cards issued which are associated to the account.
        cards:
          type: array
          description: |
            Payment cards related to the account. Debit cards, for loans or current accounts. Credit cards, for credit card accounts.
          items:
            $ref: '#/components/schemas/RelatedCard'
        amountCalculationDate:
          description: Specifies the date and time at which all the balances amount were calculated.
          $ref: '#/components/schemas/DateAndTime'
        transactionDates:
          type: array
          description: Specifies the date and time of transaction events.
          items:
            $ref: '#/components/schemas/SpotDate'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
        payout:
          $ref: '#/components/schemas/AccountPayout'
        securedIndicator:
          type: boolean
          description: |
            Indicates whether the Account is secure.
        securedType:
          $ref: '#/components/schemas/SecuredAccountType'
        payment:
          $ref: '#/components/schemas/AccountPaymentDetails'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        balanceType:
          $ref: '#/components/schemas/AccountBalanceType'
        productId:
          $ref: '#/components/schemas/ProductId'
        pricingStrategyId:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        initialAmount:
          $ref: '#/components/schemas/Amount'
        depositDate:
          description: Initial desposit date
          $ref: '#/components/schemas/Date'
        contract:
          $ref: '#/components/schemas/AccountContract'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountDetailedParty'
        maturityDate:
          $ref: '#/components/schemas/Date'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        referenceAccount:
          description: |
            Account used as a reference for the account opening.
          $ref: '#/components/schemas/Id'
        pastDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        projectedDates:
          type: array
          description: |
            Projected account dates. Possible values: AnticipatedPayOff.
          items:
            $ref: '#/components/schemas/SpotDate'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        statement:
          $ref: '#/components/schemas/FinancialStatement'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculation'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeCalculation'
        taxes:
          type: array
          items:
            $ref: '#/components/schemas/Tax'
        communicationChannels:
          type: array
          items:
            $ref: '#/components/schemas/CommunicationChannel'
        relationshipId:
          description: |
            This id gives the ability to view a party’s total relationship with the bank. The relationship Id ties multiple parties and accounts together. This code is also used to reduce mailing costs during marketing campaigns to avoid sending duplicate materials to parties residing at the same address.
          $ref: '#/components/schemas/Id'
        codes:
          type: array
          items:
            $ref: '#/components/schemas/GenericAccountCode'
        print:
          $ref: '#/components/schemas/AccountPrintOptions'
        bill:
          $ref: '#/components/schemas/AccountBillDetails'
        collateral:
          $ref: '#/components/schemas/Collateral'
        contact:
          $ref: '#/components/schemas/AccountContactDetails'
        renewal:
          $ref: '#/components/schemas/AccountRenewal'
        servicerAlerts:
          type: array
          description: Account alerts to be received by the account servicer.
          items:
            $ref: '#/components/schemas/ServicerAlert'
        history:
          $ref: '#/components/schemas/AccountHistory'
        status:
          $ref: '#/components/schemas/AccountDetailedStatus'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        comments:
          type: array
          description: |
            Bank comnents of the account.
          items:
            $ref: '#/components/schemas/Comment'
        profile:
          $ref: '#/components/schemas/AccountProfile'
        accountBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
        accountId:
          readOnly: true
          $ref: '#/components/schemas/AccountId'
        standingOrders:
          type: array
          description: |
            Instructions given by an account holder to an account servicer to make regular transfers on given dates to the same beneficiary.
          items:
            $ref: '#/components/schemas/StandingOrder'
        audit:
          $ref: '#/components/schemas/Audit'
    AccountBalance:
      type: object
      properties:
        amountCalculationDate:
          description: Specifies the date and time at which all the balances amount were calculated.
          $ref: '#/components/schemas/DateAndTime'
        transactionDates:
          type: array
          description: Specifies the date and time of transaction events.
          items:
            $ref: '#/components/schemas/SpotDate'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
    PaymentCardDetail:
      type: object
      properties:
        plasticCount:
          type: integer
          description: |
            Number of plastic cards issued which are associated to the account.
        cards:
          type: array
          description: |
            Payment cards related to the account. Debit cards, for loans or current accounts. Credit cards, for credit card accounts.
          items:
            $ref: '#/components/schemas/RelatedCard'
    RelatedCard:
      type: object
      properties:
        cardId:
          $ref: '#/components/schemas/PaymentCardId'
        cardHolder:
          $ref: '#/components/schemas/PersonDescriptor'
        cardHolderName:
          $ref: '#/components/schemas/PartyName'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardIdentification'
        productId:
          $ref: '#/components/schemas/Id'
        number:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        cardHolderType:
          $ref: '#/components/schemas/CardHolderType'
        fundingSourceType:
          $ref: '#/components/schemas/CardFundingSourceType'
        businessIndicator:
          type: boolean
          description: Indicates whether the payment card is business or not.
        cardBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        startDate:
          description: Year and month the card is available for use.
          $ref: '#/components/schemas/Date'
        expiryDate:
          description: Year and month the card expires.
          $ref: '#/components/schemas/YearMonth'
        relatedAccounts:
          type: array
          description: |
            Account that provides the payment card transactions. The account is the funding source for the card. Could be a cash or loan account linked to the debit card or a credit card account. A card can have one or many accounts.
          items:
            $ref: '#/components/schemas/RelatedAccount'
        status:
          $ref: '#/components/schemas/CardStatus'
        statusDate:
          $ref: '#/components/schemas/DateAndTime'
        statusReasons:
          type: array
          items:
            $ref: '#/components/schemas/CardStatusReason'
        codes:
          type: array
          description: |
            Codes to classify payment cards. Possible code names: ClassCode
          items:
            $ref: '#/components/schemas/GenericCode'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
    StandingOrder:
      description: |
        Instruction given by an account holder to an account servicer to make regular transfers on given dates to the same beneficiary.
      type: object
      properties:
        standingOrderId:
          description: |
            Unique and unambiguous identification for a standing order, as assigned by the account servicer or the account owner.
          readOnly: true
          $ref: '#/components/schemas/Id'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        cancellationReason:
          $ref: '#/components/schemas/Description'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        standingOrderType:
          $ref: '#/components/schemas/StandingOrderType'
        amountType:
          $ref: '#/components/schemas/StandingOrderAmountType'
        recurrenceDateType:
          $ref: '#/components/schemas/StandingOrderDateType'
        paymentReasons:
          type: array
          items:
            $ref: '#/components/schemas/PaymentPurpose'
        orderSequence:
          type: integer
          description: |
            Specifies the sequence in which the system will execute the liquidity transfers standing order within the set.
          example: 1
        frequency:
          description: |
            Dates during which the standing order is in effect
          $ref: '#/components/schemas/Frequency'
        eventDescription:
          description: |
            Describes the event which triggers the exercise of a standing order for instance the reception of a report or the closing of an account.
          $ref: '#/components/schemas/Description'
        timeOfDay:
          description: |
            Specifies the hour of the day for the time event.
          $ref: '#/components/schemas/TimeOfTheDay'
        paymentInstruction:
          $ref: '#/components/schemas/CreditTransferDetail'
        lastPaymentDate:
          description: |
            Date of the last payment.
          $ref: '#/components/schemas/DateAndTime'
        nextPaymentDate:
          description: |
            Date of the next payment.
          $ref: '#/components/schemas/Date'
        failedCount:
          type: integer
          description: |
            The number of times a standing order payment has failed to be processed.
        delayDays:
          description: |
            Period between when a standing order is set to be executed and when it actually processes.
          $ref: '#/components/schemas/Day'
        authorizationChannel:
          $ref: '#/components/schemas/CommunicationChannelName'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        convenienceFeeRefundAmount:
          description: |
            A convenience fee refund amount refers to the money that is returned to a customer when a convenience fee is refunded. A convenience fee is an additional charge for making a payment through a particular method, such as online or over the phone, as opposed to a standard method like cash or check.
          $ref: '#/components/schemas/Amount'
        enableIndicator:
          type: boolean
          description: Indicates whether the standing order is enabled.
        minimumIndicator:
          type: boolean
          description: |
            Indicates whether the standing order pays the least amount required to keep the account in good standing.
        depositMatchIndicator:
          type: boolean
          description: |
            Indicates whether a transaction qualifies for promotional offer.
        status:
          $ref: '#/components/schemas/StandingOrderStatus'
        statusReasonDescription:
          $ref: '#/components/schemas/Description'
        statusReason:
          $ref: '#/components/schemas/StatusReason'
        codes:
          type: array
          description: |
            Codes related to the standing order. Possible values: ACHRecurringCalendarDay, AutoPaymentChargeDda, AutoPaymentEnrollType.
          items:
            $ref: '#/components/schemas/GenericCode'
        paymentDescription:
          $ref: '#/components/schemas/Description'
        balances:
          type: array
          description: "Transference blances. \n"
          items:
            $ref: '#/components/schemas/Balance'
    StandingOrderRequest:
      type: object
      properties:
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        standingOrderType:
          $ref: '#/components/schemas/StandingOrderType'
        amountType:
          $ref: '#/components/schemas/StandingOrderAmountType'
        recurrenceDateType:
          $ref: '#/components/schemas/StandingOrderDateType'
        paymentReasons:
          type: array
          items:
            $ref: '#/components/schemas/PaymentPurpose'
        orderSequence:
          type: integer
          description: |
            Specifies the sequence in which the system will execute the liquidity transfers standing order within the set.
          example: 1
        frequency:
          description: |
            Dates during which the standing order is in effect
          $ref: '#/components/schemas/Frequency'
        eventDescription:
          description: |
            Describes the event which triggers the exercise of a standing order for instance the reception of a report or the closing of an account.
          $ref: '#/components/schemas/Description'
        timeOfDay:
          description: |
            Specifies the hour of the day for the time event.
          $ref: '#/components/schemas/TimeOfTheDay'
        paymentInstruction:
          $ref: '#/components/schemas/CreditTransferDetail'
        lastPaymentDate:
          description: |
            Date of the last payment.
          $ref: '#/components/schemas/DateAndTime'
        nextPaymentDate:
          description: |
            Date of the next payment.
          $ref: '#/components/schemas/Date'
        failedCount:
          type: integer
          description: |
            The number of times a standing order payment has failed to be processed.
        delayDays:
          description: |
            Period between when a standing order is set to be executed and when it actually processes.
          $ref: '#/components/schemas/Day'
        authorizationChannel:
          $ref: '#/components/schemas/CommunicationChannelName'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        convenienceFeeRefundAmount:
          description: |
            A convenience fee refund amount refers to the money that is returned to a customer when a convenience fee is refunded. A convenience fee is an additional charge for making a payment through a particular method, such as online or over the phone, as opposed to a standard method like cash or check.
          $ref: '#/components/schemas/Amount'
        enableIndicator:
          type: boolean
          description: Indicates whether the standing order is enabled.
        minimumIndicator:
          type: boolean
          description: |
            Indicates whether the standing order pays the least amount required to keep the account in good standing.
        depositMatchIndicator:
          type: boolean
          description: |
            Indicates whether a transaction qualifies for promotional offer.
        status:
          $ref: '#/components/schemas/StandingOrderStatus'
        statusReasonDescription:
          $ref: '#/components/schemas/Description'
        statusReason:
          $ref: '#/components/schemas/StatusReason'
        codes:
          type: array
          description: |
            Codes related to the standing order. Possible values: ACHRecurringCalendarDay, AutoPaymentChargeDda, AutoPaymentEnrollType.
          items:
            $ref: '#/components/schemas/GenericCode'
        paymentDescription:
          $ref: '#/components/schemas/Description'
        balances:
          type: array
          description: "Transference blances. \n"
          items:
            $ref: '#/components/schemas/Balance'
      description: |
        Instruction given by an account holder to an account servicer to make regular transfers on given dates to the same beneficiary.
    StandingOrderType:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Standing order category. Possible values: OneTime, Recurring, Predefined, Overdraw, Dividend, Maturity, SweepIn, SweepOut, SweepInOut.
      example: OneTime
    StandingOrderAmountType:
      maxLength: 36
      minLength: 1
      type: string
      description: "Type of amount of the payment. \n  Possible values: MinimumDue, CurrentBalance, FullStatement, FixedAmount.\n"
      example: OneTime
    StandingOrderDateType:
      maxLength: 36
      minLength: 1
      type: string
      description: "Type of recurrence date of the payment. Possible values: \n OnTimeDue, SpecificDay.\n"
      example: OneTime
    StandingOrderStatus:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Specifies the status of a standing order request. Possible values: Cancelled, Pending, Sent.
      example: Sent
    AccountResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Account'
        metadata:
          $ref: '#/components/schemas/Metadata'
      description: Account response data and metadata.
    Metadata:
      type: object
      properties:
        error:
          description: |
            An error the data may have during a permissive validation.
          readOnly: true
          $ref: '#/components/schemas/Error'
        storage:
          $ref: '#/components/schemas/Metadata_storage'
      description: |
        A set of data that describes and gives information about other data.
    DepositRequest:
      required:
        - amount
        - transactionType
      type: object
      properties:
        transactionType:
          $ref: '#/components/schemas/DepositTransactionType'
        amount:
          $ref: '#/components/schemas/Amount'
        exchange:
          $ref: '#/components/schemas/Exchange'
        check:
          $ref: '#/components/schemas/Check'
      description: |
        Deposit transaction request to an account for cash, check deposits, or merchandise payments.
    DepositTransactionType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Type of Credit Transaction: Cash, Check, Merchandise, MemoPosted
      example: Cash
    Exchange:
      type: object
      properties:
        currency:
          description: |
            Currency in which the rate of exchange is expressed in a currency exchange.
          $ref: '#/components/schemas/CurrencyCode'
        exchangeFactor:
          $ref: '#/components/schemas/BaseOneRate'
    BaseOneRate:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Rate expressed as a decimal, for example, 0.7 is 7/10 and 70%.
               total number of digits: 11
               number of digits in fractional part: 10
               base value: 1
      example: "0.7"
    Check:
      type: object
      properties:
        checkType:
          type: string
          description: "Specifies the type of the check. Possible values are: \nCustomerCheque, CertifiedCustomerCheque, BankCheque, Draft, ElectronicDraft.\n"
        amount:
          description: |
            Check amount
          $ref: '#/components/schemas/PositiveAmount'
        currency:
          description: |
            Check currency
          $ref: '#/components/schemas/CurrencyCode'
        checkNumber:
          maxLength: 35
          type: string
          description: |
            The number on the face of the check indicating the id of that check in a series.
        issuer:
          type: string
          description: Party that issued the check.
          example: Jhon Smith
        availabilityDate:
          description: |
            Indicates when the amount of money will become available. Usage: This type of information is used in the US and is linked to particular instruments such as cheques.
             Example: When a cheque is deposited, it will be booked on the deposit day, but the amount of money will only be accessible as of the indicated availability day (according to national banking regulations).
          $ref: '#/components/schemas/DateAndTime'
        availabilityFloat:
          type: string
          description: |
            It refers to the time delay between when a check is deposited and when the funds become available for withdrawal. Possible Values: ImmediateWithdrawal, LocalCheck, NonLocalCheck
        identifiers:
          type: array
          description: |
            Check identifiers. Possible scheme names: Reference.
          items:
            $ref: '#/components/schemas/GenericIdentification'
        imageSequence:
          type: array
          description: |
            Series of images that are related and sequentially ordered.
          items:
            $ref: '#/components/schemas/FileName'
        codes:
          type: array
          description: |
            Codes to classify the check. Possible code names: AccountCode
          items:
            $ref: '#/components/schemas/GenericCode'
        printer:
          type: string
          description: |
            Check printer used.
      description: Characteristics of a check
    FileName:
      maxLength: 255
      pattern: "^[a-zA-Z0-9_\\- ]+\\.[a-zA-Z0-9]+$"
      type: string
      description: |
        File name with an extension.
      example: image003.png
    Transaction:
      description: |
        Posting to an account that results in an increase or decrease to a balance.
      type: object
      properties:
        transactionId:
          $ref: '#/components/schemas/TransactionId'
        creationDate:
          description: |
            Date and time at which the transaction is created.
          $ref: '#/components/schemas/DateAndTime'
        amount:
          $ref: '#/components/schemas/Amount'
        creditDebitIndicator:
          $ref: '#/components/schemas/CreditDebitIndicator'
        description:
          $ref: '#/components/schemas/Description'
        descriptionLines:
          type: array
          items:
            maxLength: 200
            minLength: 1
            type: string
            example: This is a description.
        status:
          $ref: '#/components/schemas/TransactionStatus'
        statusDescription:
          $ref: '#/components/schemas/Title'
        codes:
          type: array
          description: Transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        relatedAccounts:
          type: array
          description: Accounts involved in the internal transfer
          items:
            $ref: '#/components/schemas/RelatedAccount'
        parties:
          type: array
          description: Parties involve in the payment chain.
          items:
            $ref: '#/components/schemas/AccountParty'
        balances:
          type: array
          description: Partial balances after the transfer
          items:
            $ref: '#/components/schemas/Balance'
        transactionDates:
          type: array
          description: Specifies the date and time of transaction events.
          items:
            $ref: '#/components/schemas/SpotDate'
        paymentId:
          $ref: '#/components/schemas/PaymentId'
        reversalIndicator:
          $ref: '#/components/schemas/ReversalIndicator'
        remittanceInformation:
          $ref: '#/components/schemas/RemittanceInformation'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        valueDate:
          description: |
            Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit entry.
              Usage: If entry status is pending and value date is present, then the value date refers to an expected/requested value date.
          $ref: '#/components/schemas/DateAndTime'
        bookingDate:
          description: |
            Date and time when an entry is posted to an account on the account servicer's books.
            Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.
          $ref: '#/components/schemas/DateAndTime'
        charges:
          type: array
          description: "All charges and taxes applied to the transaction. Also can include interests if the bank does not discrimate between them. \n"
          items:
            $ref: '#/components/schemas/TransactionCharge'
        interests:
          type: array
          description: All interests included in the transaction amount.
          items:
            $ref: '#/components/schemas/TransactionInterest'
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        postingType:
          $ref: '#/components/schemas/PostingType'
        check:
          $ref: '#/components/schemas/Check'
        cash:
          $ref: '#/components/schemas/Cash'
        dispenser:
          type: string
          description: |
            Cash or check dispenser used.
        card:
          $ref: '#/components/schemas/PaymentCardTransactionDetail'
    TransactionDetails:
      properties:
        transactionId:
          $ref: '#/components/schemas/TransactionId'
        creationDate:
          description: |
            Date and time at which the transaction is created.
          $ref: '#/components/schemas/DateAndTime'
        amount:
          $ref: '#/components/schemas/Amount'
        creditDebitIndicator:
          $ref: '#/components/schemas/CreditDebitIndicator'
        description:
          $ref: '#/components/schemas/Description'
        descriptionLines:
          type: array
          items:
            maxLength: 200
            minLength: 1
            type: string
            example: This is a description.
        status:
          $ref: '#/components/schemas/TransactionStatus'
        statusDescription:
          $ref: '#/components/schemas/Title'
        codes:
          type: array
          description: Transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        relatedAccounts:
          type: array
          description: Accounts involved in the internal transfer
          items:
            $ref: '#/components/schemas/RelatedAccount'
        parties:
          type: array
          description: Parties involve in the payment chain.
          items:
            $ref: '#/components/schemas/AccountParty'
        balances:
          type: array
          description: Partial balances after the transfer
          items:
            $ref: '#/components/schemas/Balance'
        transactionDates:
          type: array
          description: Specifies the date and time of transaction events.
          items:
            $ref: '#/components/schemas/SpotDate'
      description: |
        Common transaction details.
    TransactionId:
      maxLength: 36
      minLength: 1
      type: string
      description: Unique reference as assigned by the account servicing institution to unambiguously identify the transaction.
      example: 0dd926fe-1ca2-11ed-861d-0242ac120002
    CreditDebitIndicator:
      maxLength: 17
      minLength: 1
      type: string
      description: |
        Specifies if an operation is an increase or a decrease. Possible values names are:
        Credit,
        Debit.
      example: Credit
    TransactionStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: "Specifies the status of an entry on the books of the account servicer. Some possible ISO 20022 compliant values are: \n Booked, Future, Information, Pending, MemoPosted, HardPosted, Cleared.\n"
      example: Booked
    TransactionType:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Indicates the type of transaction. Possible values: PaymentSent, PaymentReceived.
      example: PaymentReceived.
    PostingType:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Indicates the type of posting. Possible values: MemoPosted,  HardPosted, ForcePost, PostAuthorizationSucceeds, AuthorizationOnly.
      example: HardPosted
    Cash:
      type: object
      properties:
        amount:
          type: string
          description: |
            Total amount in cash.
        uSCurrencyIndicator:
          type: boolean
        cashNotes:
          type: array
          items:
            $ref: '#/components/schemas/CashNote'
      description: Cashnotes detail
    CashNote:
      type: object
      properties:
        amount:
          type: string
          description: |
            Amount in cash
        denomination:
          type: integer
          description: |
            The face value of each cash note, such as $1, $5, $10, $20, etc.
          example: 100
        count:
          type: integer
          description: |
            Number of cash notes
          example: 100
        currency:
          description: |
            Amount currency
          $ref: '#/components/schemas/CurrencyCode'
      description: Cashnotes detail
    PaymentCardTransactionDetail:
      type: object
      properties:
        cardId:
          $ref: '#/components/schemas/PaymentCardId'
        cardNumber:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        merchantCategoryCode:
          $ref: '#/components/schemas/MerchantCategoryCode'
        merchantName:
          description: Merchant Name
          $ref: '#/components/schemas/PartyShortName'
          example: Food Store
        merchantAddress:
          $ref: '#/components/schemas/PostalAddress'
        offerId:
          $ref: '#/components/schemas/OfferId'
        offerTitle:
          $ref: '#/components/schemas/OfferTitle'
      description: |
        Payment Card Transaction details.
    MerchantCategoryCode:
      pattern: "^[0-9]{4,4}"
      type: string
      description: |
        Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.
      example: "482"
    OfferId:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Card provider unique reference to the card payment offer.
      example: "101854"
    OfferTitle:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Short description of the offer
      example: Save 20%
    WithdrawalRequest:
      required:
        - amount
      type: object
      properties:
        transactionType:
          $ref: '#/components/schemas/WithdrawalTransactionType'
        amount:
          $ref: '#/components/schemas/Amount'
        check:
          $ref: '#/components/schemas/Check'
      description: |
        Debit transaction request to an account for cash, check deposits, or merchandise payments.
    WithdrawalTransactionType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Type of Debit Transaction: Cash, MemoPosted.
      example: Cash
    AccountBalanceResponse:
      required:
        - accountId
        - accountNumber
        - accountType
        - balances
        - ownershipType
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        balances:
          type: array
          description: Account balance information provided on the response.
          items:
            $ref: '#/components/schemas/Balance'
      description: |
        Account balance response
    AccountTransactionsResponse:
      required:
        - accountId
        - transactions
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        currentBalance:
          $ref: '#/components/schemas/Amount'
        availableBalance:
          $ref: '#/components/schemas/Amount'
        count:
          type: integer
          description: |
            Number of transactions added to the amount.
        transactions:
          type: array
          description: Account Transactions
          items:
            $ref: '#/components/schemas/Transaction'
    AccountIdentifiersResponse:
      required:
        - accountId
        - accountNumber
        - accountType
        - identifiers
        - ownershipType
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        accountBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
    AccountPartyResponse:
      required:
        - accountId
        - parties
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountDetailedParty'
    AccountOwnerResponse:
      required:
        - accountId
        - owners
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/AccountDetailedParty'
    AccountPaymentCardResponse:
      required:
        - accountId
        - accountNumber
        - accountType
        - cards
        - ownershipType
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardDescriptor'
    AccountHoldResponse:
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        numberOfHolds:
          type: integer
          description: |
            Number of holds related to the account
        holds:
          type: array
          items:
            $ref: '#/components/schemas/AccountHold'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
      description: |
        An account hold restricts an account holder from accessing funds. A hold prevents access to an account or restricts some transactions from occurring in the account. A deposit of a large check, an out-of-state check, or a foreign check may trigger an account hold. A hold may occur when there is suspicious activity detected on the account.
    AccountHold:
      description: |
        An account hold restricts an account holder from accessing funds. A hold prevents access to an account or restricts some transactions from occurring in the account. A deposit of a large check, an out-of-state check, or a foreign check may trigger an account hold. A hold may occur when there is suspicious activity detected on the account.
      type: object
      properties:
        holdId:
          $ref: '#/components/schemas/Id'
        accountId:
          $ref: '#/components/schemas/AccountId'
        status:
          $ref: '#/components/schemas/AccountHoldStatus'
        statusReason:
          $ref: '#/components/schemas/StatusReason'
        statusReasonDescription:
          $ref: '#/components/schemas/Description'
        availableCredit:
          description: |
            Account available credit.
          $ref: '#/components/schemas/PositiveAmount'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        holdType:
          $ref: '#/components/schemas/AccountHoldType'
        valueDate:
          description: |
            Date/time that the hold was created or should take effect.
          $ref: '#/components/schemas/DateAndTime'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        relatedAccounts:
          type: array
          description: Accounts involved in the account hold
          items:
            $ref: '#/components/schemas/RelatedAccount'
        parties:
          type: array
          description: Parties involve in the account hold
          items:
            $ref: '#/components/schemas/AccountParty'
        balances:
          type: array
          description: Partial balances after the account hold
          items:
            $ref: '#/components/schemas/Balance'
        bookingDate:
          description: |
            Date and time when an entry is posted to an account on the account servicer's books.
            Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.
          $ref: '#/components/schemas/DateAndTime'
        releaseDate:
          description: "Date/time that the hold should be released. \n"
          $ref: '#/components/schemas/DateAndTime'
        ageOffDate:
          description: |
            Date by when the payment will age off and no longer be searchable.
          $ref: '#/components/schemas/DateAndTime'
        exclusionDate:
          description: |
            Date by when the account will be excluded from payment float processing.
          $ref: '#/components/schemas/DateAndTime'
        expirationDate:
          description: |
            Date the payment float process expires.
          $ref: '#/components/schemas/DateAndTime'
        actualReleaseDate:
          description: "Date/time that the hold was actually released. \n"
          $ref: '#/components/schemas/DateAndTime'
        floatAmount:
          description: Payment amount that entered the payment float process
          $ref: '#/components/schemas/PositiveAmount'
        amount:
          description: Payment amount
          $ref: '#/components/schemas/PositiveAmount'
        check:
          $ref: '#/components/schemas/Check'
        card:
          $ref: '#/components/schemas/PaymentCardTransactionDetail'
    AccountHoldRequest:
      description: |
        An account hold restricts an account holder from accessing funds. A hold prevents access to an account or restricts some transactions from occurring in the account. A deposit of a large check, an out-of-state check, or a foreign check may trigger an account hold. A hold may occur when there is suspicious activity detected on the account.
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        holdId:
          $ref: '#/components/schemas/Id'
        holdType:
          $ref: '#/components/schemas/AccountHoldType'
        valueDate:
          description: |
            Date/time that the hold was created or should take effect.
          $ref: '#/components/schemas/DateAndTime'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        relatedAccounts:
          type: array
          description: Accounts involved in the account hold
          items:
            $ref: '#/components/schemas/RelatedAccount'
        parties:
          type: array
          description: Parties involve in the account hold
          items:
            $ref: '#/components/schemas/AccountParty'
        balances:
          type: array
          description: Partial balances after the account hold
          items:
            $ref: '#/components/schemas/Balance'
        bookingDate:
          description: |
            Date and time when an entry is posted to an account on the account servicer's books.
            Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.
          $ref: '#/components/schemas/DateAndTime'
        releaseDate:
          description: "Date/time that the hold should be released. \n"
          $ref: '#/components/schemas/DateAndTime'
        ageOffDate:
          description: |
            Date by when the payment will age off and no longer be searchable.
          $ref: '#/components/schemas/DateAndTime'
        exclusionDate:
          description: |
            Date by when the account will be excluded from payment float processing.
          $ref: '#/components/schemas/DateAndTime'
        expirationDate:
          description: |
            Date the payment float process expires.
          $ref: '#/components/schemas/DateAndTime'
        actualReleaseDate:
          description: "Date/time that the hold was actually released. \n"
          $ref: '#/components/schemas/DateAndTime'
        floatAmount:
          description: Payment amount that entered the payment float process
          $ref: '#/components/schemas/PositiveAmount'
        amount:
          description: Payment amount
          $ref: '#/components/schemas/PositiveAmount'
        check:
          $ref: '#/components/schemas/Check'
        card:
          $ref: '#/components/schemas/PaymentCardTransactionDetail'
    AccountHoldType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Possible Values: Amount, holds any amount for any purpose; Check, holds the entire amount of a check or a partial amount until the check clears; StopPayment, stop payment on a check; Caution, a hold occurs when there is suspicious activity detected on the account. Values for payments: Payments, PaymentReversal, PaymentAdjustment, PaymentAuthorization.
    AccountHoldStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Possible Values: Release, Active, Changed, Cleared, Exclusion, Decisioned, Matched, Total, Reversal, Transferred.
    PersonsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PersonDescriptor'
        metadata:
          $ref: '#/components/schemas/Metadata'
    PersonRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        legalName:
          description: |
            Official name under which the party is registered.
          $ref: '#/components/schemas/PartyName'
        nameTemplateId:
          $ref: '#/components/schemas/NameTemplateId'
        nameSoundExId:
          $ref: '#/components/schemas/SoundExId'
        partyBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        customerSinceDate:
          $ref: '#/components/schemas/DateAndTime'
        comments:
          type: array
          description: |
            Bank comnents of the party.
          items:
            $ref: '#/components/schemas/Comment'
        relatedParties:
          type: array
          items:
            $ref: '#/components/schemas/DetailedRelatedParty'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        relationshipId:
          description: |
            Customer principal relationship. This entity gives the ability to view a party’s total relationship with the bank. The relationship Id ties multiple parties together. This code is also used to reduce mailing costs during marketing campaigns to avoid sending duplicate materials to parties residing at the same address.
          $ref: '#/components/schemas/Id'
        relationshipLeadIndicator:
          type: boolean
          description: |
            The relationship lead is often the primary account owner or the party with whom the bank have the most contact.
        residenceType:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Specifies the type of residence where the party has its permanent home or principal establishment.  Possible ISO Complaian values are:
            Domestic, Foreign, Mixed
          example: Domestic
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        powerOfAttorney:
          $ref: '#/components/schemas/PowerOfAttorney'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        excludeMarketingIndicator:
          type: boolean
        audit:
          $ref: '#/components/schemas/Audit'
        restrictions:
          type: array
          description: "Access and operation restrictions at Party level. \n"
          items:
            $ref: '#/components/schemas/Restriction'
        codes:
          type: array
          description: |
            Codes to classify parties. Possible code names: Priority. For Organizations: StandardIndustryClassification, StandardIndustrySubClass AccountingGroup, CurrentRoutingNumber.
          items:
            $ref: '#/components/schemas/GenericCode'
        webPage:
          description: Party web page
          $ref: '#/components/schemas/URL'
        print:
          $ref: '#/components/schemas/PartyPrintOptions'
        products:
          type: array
          description: Products related with the party
          items:
            $ref: '#/components/schemas/Product'
        statement:
          $ref: '#/components/schemas/FinancialStatement'
        documents:
          type: array
          description: Documents related to the party.
          items:
            $ref: '#/components/schemas/DocumentDescriptor'
        uSDocumentedIndicator:
          type: boolean
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PersonIdentification'
        placeAndDateOfBirth:
          $ref: '#/components/schemas/PlaceAndDateOfBirth'
        signature:
          $ref: '#/components/schemas/DigitalSignature'
        signatureVerificationId:
          $ref: '#/components/schemas/SignatureVerificationId'
        contact:
          $ref: '#/components/schemas/ContactDetails'
        headOfHousehold:
          type: boolean
          description: Indicates whether the person pay the costs of supporting a house.
          example: true
        civilStatus:
          $ref: '#/components/schemas/CivilStatus'
        structuredName:
          $ref: '#/components/schemas/StructuredName'
        gender:
          $ref: '#/components/schemas/Gender'
        race:
          $ref: '#/components/schemas/Race'
        profession:
          $ref: '#/components/schemas/Profession'
        jobTitle:
          $ref: '#/components/schemas/JobTitle'
        educationLevel:
          $ref: '#/components/schemas/EducationLevel'
        residentialStatus:
          $ref: '#/components/schemas/ResidentialStatus'
        immigrationStatus:
          $ref: '#/components/schemas/ImmigrationStatus'
        minorIndicator:
          $ref: '#/components/schemas/MinorIndicator'
        citizenships:
          type: array
          items:
            $ref: '#/components/schemas/Citizenship'
        countryOfResidence:
          $ref: '#/components/schemas/CountryCode'
        profile:
          $ref: '#/components/schemas/PersonProfile'
    PersonIdentifiers:
      type: object
      properties:
        uSDocumentedIndicator:
          type: boolean
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PersonIdentification'
    Party:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        legalName:
          description: |
            Official name under which the party is registered.
          $ref: '#/components/schemas/PartyName'
        nameTemplateId:
          $ref: '#/components/schemas/NameTemplateId'
        nameSoundExId:
          $ref: '#/components/schemas/SoundExId'
        partyBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        customerSinceDate:
          $ref: '#/components/schemas/DateAndTime'
        comments:
          type: array
          description: |
            Bank comnents of the party.
          items:
            $ref: '#/components/schemas/Comment'
        relatedParties:
          type: array
          items:
            $ref: '#/components/schemas/DetailedRelatedParty'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        relationshipId:
          description: |
            Customer principal relationship. This entity gives the ability to view a party’s total relationship with the bank. The relationship Id ties multiple parties together. This code is also used to reduce mailing costs during marketing campaigns to avoid sending duplicate materials to parties residing at the same address.
          $ref: '#/components/schemas/Id'
        relationshipLeadIndicator:
          type: boolean
          description: |
            The relationship lead is often the primary account owner or the party with whom the bank have the most contact.
        residenceType:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Specifies the type of residence where the party has its permanent home or principal establishment.  Possible ISO Complaian values are:
            Domestic, Foreign, Mixed
          example: Domestic
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        powerOfAttorney:
          $ref: '#/components/schemas/PowerOfAttorney'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        excludeMarketingIndicator:
          type: boolean
        audit:
          $ref: '#/components/schemas/Audit'
        restrictions:
          type: array
          description: "Access and operation restrictions at Party level. \n"
          items:
            $ref: '#/components/schemas/Restriction'
        codes:
          type: array
          description: |
            Codes to classify parties. Possible code names: Priority. For Organizations: StandardIndustryClassification, StandardIndustrySubClass AccountingGroup, CurrentRoutingNumber.
          items:
            $ref: '#/components/schemas/GenericCode'
        webPage:
          description: Party web page
          $ref: '#/components/schemas/URL'
        print:
          $ref: '#/components/schemas/PartyPrintOptions'
        products:
          type: array
          description: Products related with the party
          items:
            $ref: '#/components/schemas/Product'
        statement:
          $ref: '#/components/schemas/FinancialStatement'
        documents:
          type: array
          description: Documents related to the party.
          items:
            $ref: '#/components/schemas/DocumentDescriptor'
    SoundExId:
      maxLength: 36
      minLength: 1
      type: string
      description: "Identification of a SoundEx method develop for search attribute. SoundEx is a method used to find strings when the sound is known but the precise spelling is not. It searches out words with similar sounds based on phonetic assumptions about how certain letters are pronounced. It can be used to search names in a database, for example, where spellings and pronunciations for similar names may vary. \n\n\n \n"
      example: "1"
    DetailedRelatedParty:
      required:
        - name
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/GenericIdentification'
        codes:
          type: array
          description: |
            Codes to link the party with other systems or to classify the party. Possible values: RemoteDepositRisk.
          items:
            $ref: '#/components/schemas/GenericCode'
        name:
          $ref: '#/components/schemas/PartyName'
        nameTemplateId:
          $ref: '#/components/schemas/NameTemplateId'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        placeAndDateOfBirth:
          $ref: '#/components/schemas/PlaceAndDateOfBirth'
        gender:
          $ref: '#/components/schemas/Gender'
        status:
          $ref: '#/components/schemas/PartyStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        coveredByMilitaryLendingActIndicator:
          type: boolean
          description: |
            Indicates if the borrower is covered under the Military Lending Act.
        militaryMemberIndicator:
          type: boolean
          description: |
            Indicates whether the person is is service member/military.
        militaryPeriod:
          $ref: '#/components/schemas/DateTimePeriod'
        employment:
          $ref: '#/components/schemas/Employment'
        audit:
          $ref: '#/components/schemas/Audit'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        structuredName:
          $ref: '#/components/schemas/StructuredName'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        emails:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Email'
        organizationType:
          $ref: '#/components/schemas/OrganizationType'
        customerType:
          $ref: '#/components/schemas/CustomerType'
        taxReportingIndicator:
          type: boolean
          description: |
            Account tax reporting typically involves obtaining and submitting records related to your tax obligations. For individuals, this may include income, qualifying deductions, and investment gains or losses. Businesses, on the other hand, have additional complexities, such as tracking funds directed towards specific business expenses and shareholders.
        taxStatus:
          type: string
          description: |
            Exempt, Retain, ExemptExpired, VoluntaryWithholding, Chapter3, Chapter4, C-Corp, S-Corp, Certified, W-8Required, NotCertified.
          example: Exempt
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardDescriptor'
        balances:
          type: array
          description: Balances related to the party
          items:
            $ref: '#/components/schemas/Balance'
        spotDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        identityQuestions:
          type: array
          items:
            $ref: '#/components/schemas/IdentityQuestion'
        partyId:
          $ref: '#/components/schemas/Id'
        partyType:
          $ref: '#/components/schemas/PartyType'
        partyName:
          readOnly: true
          $ref: '#/components/schemas/PartyName'
        partyRelationType:
          $ref: '#/components/schemas/PartyRelationType'
        effectiveDate:
          description: |
            Person’s relation became effective.
          $ref: '#/components/schemas/DateAndTime'
        inactiveDate:
          description: |
            Person’s relation became inactive.
          $ref: '#/components/schemas/DateAndTime'
        partyRelationDescription:
          $ref: '#/components/schemas/Description'
        ownershipPercentage:
          description: |
            Company Ownership Percentage. If the relation Type is BeneficialOwner the ownership percentage could be added. Ownership means any person with more than 25% equity in the legal entity.
          $ref: '#/components/schemas/PositivePercentage'
    RelatedParty:
      type: object
      properties:
        partyId:
          $ref: '#/components/schemas/Id'
        partyType:
          $ref: '#/components/schemas/PartyType'
        partyName:
          readOnly: true
          $ref: '#/components/schemas/PartyName'
        partyRelationType:
          $ref: '#/components/schemas/PartyRelationType'
        effectiveDate:
          description: |
            Person’s relation became effective.
          $ref: '#/components/schemas/DateAndTime'
        inactiveDate:
          description: |
            Person’s relation became inactive.
          $ref: '#/components/schemas/DateAndTime'
        partyRelationDescription:
          $ref: '#/components/schemas/Description'
        ownershipPercentage:
          description: |
            Company Ownership Percentage. If the relation Type is BeneficialOwner the ownership percentage could be added. Ownership means any person with more than 25% equity in the legal entity.
          $ref: '#/components/schemas/PositivePercentage'
    TaxPartyInformation:
      type: object
      properties:
        tIN:
          type: string
          description: |
            A Taxpayer Identification Number
          example: 778-62-8144
        taxIdType:
          maxLength: 50
          minLength: 1
          type: string
          description: |
            Identifies what type of tax ID is in the TIN field. Possible Values: SocialSecurityNumber, SocialInsuranceNumber, EmployerIdentificationNumber, IndividualTaxpayerIdentificationNumber, AdoptionTaxpayerIdentificationNumber, PreparerTaxpayerIdentificationNumber, ForeignTaxID
          example: SocialSecurityNumber
        financialReportingIndicator:
          type: boolean
          description: "Whether the financial income for this party should be reported to the U.S. government (IRS) when related to an account in a way which requires reporting (for example, primary, joint ownership). Defaults to true if not specified. "
        taxReportingIndicator:
          type: boolean
          description: |
            Account tax reporting typically involves obtaining and submitting records related to your tax obligations. For individuals, this may include income, qualifying deductions, and investment gains or losses. Businesses, on the other hand, have additional complexities, such as tracking funds directed towards specific business expenses and shareholders.
        interestReportingIndicator:
          type: boolean
          description: |
            Indicates whether or interest should be reported.
        tINStatus:
          type: string
          description: |
            'The tax ID has been verified by the IRS. Possible values: Valid, NotValid, NotVerified, IRSWarning, TINApplied, NonTaxIdentifier.
          example: Valid
        tINVerification:
          $ref: '#/components/schemas/TINVerification'
        taxStatus:
          type: string
          description: |
            Exempt, Retain, ExemptExpired, VoluntaryWithholding, Chapter3, Chapter4, C-Corp, S-Corp, NonProfit, Government.
          example: Exempt
        exemptionCode:
          maxLength: 4
          type: string
          description: "Indicates the reason why taxes were not withheld from the gross income being reported for a NRA. These codes are used to specify the type of income, the applicable tax treaty, or the Internal Revenue Code section that allows for the exemption from withholding. The use of these codes is subject to certain conditions and limitations, and withholding agents are responsible for verifying the NRA's eligibility for the exemption and for reporting the income and exemption codes accurately to the IRS. \n"
          example: "0"
        exemptionReason:
          type: string
          description: "Human readable reason why taxes were not withheld. \n"
          $ref: '#/components/schemas/Description'
        forms:
          type: array
          description: Forms applied by the party
          items:
            $ref: '#/components/schemas/TaxForm'
        regulations:
          type: array
          items:
            $ref: '#/components/schemas/TaxRegulation'
        withholdings:
          type: array
          items:
            $ref: '#/components/schemas/WithholdingTax'
        foreignIndicator:
          type: boolean
          description: |
            Indicates whether the party is a non-residen alien or a foreign entity.
        codes:
          type: array
          description: Codes provided by the IRS on forms.
          items:
            $ref: '#/components/schemas/TaxFormCode'
        recipientGIIN:
          $ref: '#/components/schemas/GIIN'
        recipientPostCode:
          type: string
          description: Code provided by the IRS on forms.
        recipientTownName:
          $ref: '#/components/schemas/TownName'
        countrySubDivisionCode:
          $ref: '#/components/schemas/CountrySubdivisionCode'
        country:
          maxLength: 2
          type: string
          description: IRS country code table.
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
      description: |
        Taxation parameters which apply to an individual person or to an organization.
    TINVerification:
      type: object
      properties:
        verificationAttemps:
          maximum: 10
          type: integer
          description: |
            The Tax Identification Verification Attempts is the number of times attempts have been made to verify the tax ID number.
          example: 1
        bNoticeDates:
          type: array
          items:
            $ref: '#/components/schemas/Date'
        tINResultCode:
          maxLength: 3
          type: string
          description: TIN matching result codes
        verificationDate:
          description: |
            Verification or certification date.
          $ref: '#/components/schemas/Date'
        applicationDate:
          $ref: '#/components/schemas/Date'
        expirationDate:
          $ref: '#/components/schemas/Date'
      description: |
        IRS information about the TIN provided.
    TaxRegulation:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 35
          minLength: 1
          type: string
          example: Chapter4
        section:
          maxLength: 10
          minLength: 1
          type: string
          description: |
            String that represent the section number.
          example: "1471"
      description: |
        Tax regulations that are deemed to comply by the tax payer. Possible values: Chapter3, Chapter4
    WithholdingTax:
      required:
        - withholdingTaxType
      type: object
      properties:
        withholdingTaxType:
          $ref: '#/components/schemas/WithholdingTaxType'
        withholdingRate:
          description: |
            Rate applied on a basis amount to calculate the withholding.
          $ref: '#/components/schemas/Percentage'
        taxStatus:
          type: string
          description: |
            Exempt, Expired, Certified, Retain.
        withholdingAmount:
          description: |
            Withholding amount.
          $ref: '#/components/schemas/Amount'
      description: |
        Withholding is a tax that is levied on income, at an established tax rate
    WithholdingTaxType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Type of Withholding. Possible Values:
        ForeignAccountTaxComplianceAct, NonResidentAlienTax, BackUpWithholding, VoluntaryWithholding, Federal, State, Local, W-4, NRATax, Chapter3, Chapter4.
      example: NonResidentAlienTax
    TaxFormCode:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/TaxFormName'
        value:
          maxLength: 50
          type: string
          description: >
            Indicates the code number provided by the IRS on the form. Possible
            Values: Chapter4FATCAStatus, Chapter3Status, ForeignTaxForms.
      description: Indicates a code provided by the IRS on the form.
    TaxFormName:
      maxLength: 35
      minLength: 1
      type: string
      description: "Indicates a code name provided by the IRS on the form. Possible Values:\nChapter3, Chapter4, Income, Exempt, Province, CountryResidence, AmendedNumber, CountryTax \n"
    GIIN:
      maxLength: 34
      minLength: 1
      pattern: "^([A-N,P-Z,0-9]){6}\\.([A-N,P-Z,0-9]){5}\\.(LE|SL|ME|BR|SP)\\.[0-9]{3}$"
      type: string
      description: |
        Global intermediary identification number (GIIN).
      example: ADN123.FG4FE3.LE.999
    PowerOfAttorney:
      description: |
        Document that transfers specific rights from a party to a person.
      type: object
      properties:
        fromDateTime:
          description: Date and time at which the period starts.
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          description: Date and time at which the period ends.
          $ref: '#/components/schemas/DateAndTime'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        format:
          $ref: '#/components/schemas/DocumentFormat'
        title:
          $ref: '#/components/schemas/Title'
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          description: Signoff date of the document.
          $ref: '#/components/schemas/Date'
        issueDate:
          description: Issue date of the document.
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 100
          minLength: 1
          type: string
          description: Specifies the function of the document.
        jurisdiction:
          $ref: '#/components/schemas/Jurisdiction'
        contact:
          $ref: '#/components/schemas/ContactDetails'
        parties:
          $ref: '#/components/schemas/AccountContractRelatedParty'
        agreementType:
          $ref: '#/components/schemas/AgreementType'
        agreementSubtype:
          maxLength: 60
          minLength: 1
          type: string
          description: |
            Agreement detailed category.
        authorizedPerson:
          description: |
            Person which is the holder of the power of attorney.
          $ref: '#/components/schemas/Id'
        authorizedAccount:
          description: |
            Specifies the account on which the power of attorney applies.
          $ref: '#/components/schemas/AccountId'
    URL:
      pattern: "^[(http(s)?):\\/\\/(www\\.)?a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)"
      type: string
      description: The address of a web page.
      example: http://portx.io
    PartyPrintOptions:
      type: object
      properties:
        displayOptions:
          type: array
          items:
            $ref: '#/components/schemas/PartyDisplayOption'
        printOptions:
          type: array
          items:
            $ref: '#/components/schemas/GenericPrintOption'
    DigitalSignature:
      maxLength: 13654
      minLength: 1
      type: string
      description: |
        Binary data of 10K maximum, base64 encoded.
      format: byte
      example: SmFuZSBCaXJraW4=
    SignatureVerificationId:
      maxLength: 36
      minLength: 1
      type: string
      description: "This field contains the key of the CISA validation record. \n"
      example: 0dd926fe-1ca2-11ed-861d-0242ac120002
    CivilStatus:
      maxLength: 17
      minLength: 1
      type: string
      description: |
        Specifies the civil status of a person. Possible ISO 20022 compliant values names are:
        Single,
        Married,
        LegallyDivorced,
        Divorced,
        Widowed,
        StableUnion
      example: Single
    Race:
      maxLength: 35
      minLength: 1
      type: string
      description: "Categorization of humans based on shared physical qualities.\nPossible Values:  NativeAmerican, African, Hispanic, White, Asian, NativeHawaiian, NativeAlaskan, Mixed.\n  \n"
      example: Director
    EducationLevel:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Possible education levels: NoFormalEducation, ElementarySchool, MiddleSchool, HighSchool, VocationalSchool, AssociateDegree, BachelorDegree, MasterDegree, DoctorateDegree, ProfessionalDegree, LessThanHighSchool, College
      example: null
    ResidentialStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Residential status of an individual. Possible values: Rents, Owns, Lease.
      example: Permanent
    ImmigrationStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Immigration status of an individual. Possible values: Resident, NonResident, ResidentAlien, NonResidentAlien.
      example: Permanent
    MinorIndicator:
      type: boolean
      description: |
        Indicates whether the person is a legal minor.
    Citizenship:
      description: Specifies the country and a period where a person is legally accepted as belonging to the country.
      type: object
      properties:
        fromDateTime:
          description: Date and time at which the period starts.
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          description: Date and time at which the period ends.
          $ref: '#/components/schemas/DateAndTime'
        periodNumber:
          type: integer
          description: Sequence number of the period.
        periodName:
          $ref: '#/components/schemas/PeriodName'
        country:
          $ref: '#/components/schemas/CountryCode'
    PersonProfile:
      description: Information to support Know Your Customer (KYC) processes.
      type: object
      properties:
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
        riskCategories:
          type: array
          items:
            $ref: '#/components/schemas/RiskMeasure'
        bSARiskCode:
          $ref: '#/components/schemas/BSARiskCode'
        creditReview:
          $ref: '#/components/schemas/CreditReview'
        creditBureauReportCode:
          type: string
          description: "Code used for reporting to the credit bureaus. This code is used to report the trade line of a credit account to the credit bureau agencies. \n"
          example: "30"
        eCOACode:
          type: string
          description: |
            The ECOA code indicates how customer account information is reported to the Credit Bureau in keeping with the Equal Credit Opportunity Act.
        cTRExemptIndicator:
          type: boolean
          description: |
            Currency transaction report (CTR) exemption. A CTR is a report that must be filed by banks for any transaction involving currency of $10,000 or more. However, certain entities and transactions are exempt from this reporting requirement.
        oFACReportingIndicator:
          type: boolean
          description: |
            Indicates whether the party is to be excluded from OFAC Reporting.
        previousFinancialInstitution:
          $ref: '#/components/schemas/PartyName'
        moneyLaunderingCheck:
          $ref: '#/components/schemas/MoneyLaunderingCheck'
        knowYourCustomerCheck:
          $ref: '#/components/schemas/KnowYourCustomerCheckType'
        timeAtCurrentAddress:
          $ref: '#/components/schemas/TemporalDuration'
        dateAtCurrentAddress:
          description: |
            Date of Residence in the current household.
          $ref: '#/components/schemas/Date'
        yearsAtCurrentAddress:
          type: integer
        sourceOfWealth:
          description: Indicates the main sources of the money.
          $ref: '#/components/schemas/Description'
        politicalAffiliation:
          type: string
          description: |
            Indicates the political affiliation of the Party. Possible values could be: Democrat, Independent, Republican.
        lostCustomerDate:
          $ref: '#/components/schemas/Date'
        lostCustomerReason:
          $ref: '#/components/schemas/LostCustomerReason'
        customerType:
          $ref: '#/components/schemas/CustomerType'
        servicerAlerts:
          type: array
          description: Customer alerts to be received by the account servicer.
          items:
            $ref: '#/components/schemas/ServicerAlert'
        insiderType:
          $ref: '#/components/schemas/InsiderType'
        privacyNoticedIndicator:
          type: boolean
          description: |
            Indicates whether the person allow distributing  personal information to third parties. This field is used to identify customers that opt-out of distributing nonpublic personal information about them to third parties.
          example: true
        privacyNoticeOption:
          $ref: '#/components/schemas/PrivacyNoticeOption'
        customerIdentificationProgram:
          $ref: '#/components/schemas/CustomerIdentificationProgram'
        customerConductClassification:
          $ref: '#/components/schemas/CustomerConductClassification'
        familyMedicalInsuranceIndicator:
          type: boolean
          description: Indicates if the person has family medical insurance coverage available.
          example: true
        militaryMemberIndicator:
          type: boolean
          description: |
            Indicates whether the person is is service member/military.
        militaryPeriod:
          $ref: '#/components/schemas/DateTimePeriod'
        salaryRange:
          $ref: '#/components/schemas/AmountRange'
        residenceValue:
          $ref: '#/components/schemas/PositiveAmount'
        residenceMortgage:
          $ref: '#/components/schemas/PositiveAmount'
        referredByWhom:
          $ref: '#/components/schemas/PartyName'
        employmentStatus:
          $ref: '#/components/schemas/EmploymentStatus'
        vIPStatus:
          $ref: '#/components/schemas/VIPStatus'
        employments:
          type: array
          items:
            $ref: '#/components/schemas/Employment'
        employeeIndicator:
          type: boolean
          description: "Indicates whether is a bank employee. \n"
        annualIncome:
          $ref: '#/components/schemas/PositiveAmount'
        monthlyIncome:
          $ref: '#/components/schemas/PositiveAmount'
        grossMonthPayAmount:
          $ref: '#/components/schemas/PositiveAmount'
        netMonthPayAmount:
          $ref: '#/components/schemas/PositiveAmount'
        monthPayDate:
          $ref: '#/components/schemas/DateAndTime'
        yearsOfEducation:
          type: integer
        graduationDate:
          $ref: '#/components/schemas/DateAndTime'
        politicallyExposedPerson:
          type: boolean
          description: |
            Indicates whether the person is a politically exposed person (PEP). Is one who has been entrusted with a prominent public function. A PEP generally presents a higher risk for potential involvement in bribery and corruption.
          example: true
        identityTheftServiceIndicator:
          type: boolean
          description: Indicates whether the person has subscribed to an Identity Theft service.
          example: true
        identityQuestions:
          type: array
          items:
            $ref: '#/components/schemas/IdentityQuestion'
        coveredByMilitaryLendingActIndicator:
          type: boolean
          description: |
            Indicates if the borrower is covered under the Military Lending Act.
    PartyProfile:
      type: object
      properties:
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
        riskCategories:
          type: array
          items:
            $ref: '#/components/schemas/RiskMeasure'
        bSARiskCode:
          $ref: '#/components/schemas/BSARiskCode'
        creditReview:
          $ref: '#/components/schemas/CreditReview'
        creditBureauReportCode:
          type: string
          description: "Code used for reporting to the credit bureaus. This code is used to report the trade line of a credit account to the credit bureau agencies. \n"
          example: "30"
        eCOACode:
          type: string
          description: |
            The ECOA code indicates how customer account information is reported to the Credit Bureau in keeping with the Equal Credit Opportunity Act.
        cTRExemptIndicator:
          type: boolean
          description: |
            Currency transaction report (CTR) exemption. A CTR is a report that must be filed by banks for any transaction involving currency of $10,000 or more. However, certain entities and transactions are exempt from this reporting requirement.
        oFACReportingIndicator:
          type: boolean
          description: |
            Indicates whether the party is to be excluded from OFAC Reporting.
        previousFinancialInstitution:
          $ref: '#/components/schemas/PartyName'
        referredByWhom:
          $ref: '#/components/schemas/PartyName'
        moneyLaunderingCheck:
          $ref: '#/components/schemas/MoneyLaunderingCheck'
        knowYourCustomerCheck:
          $ref: '#/components/schemas/KnowYourCustomerCheckType'
        timeAtCurrentAddress:
          $ref: '#/components/schemas/TemporalDuration'
        dateAtCurrentAddress:
          description: |
            Date of Residence in the current household.
          $ref: '#/components/schemas/Date'
        yearsAtCurrentAddress:
          type: integer
        sourceOfWealth:
          description: Indicates the main sources of the money.
          $ref: '#/components/schemas/Description'
        politicalAffiliation:
          type: string
          description: |
            Indicates the political affiliation of the Party. Possible values could be: Democrat, Independent, Republican.
        lostCustomerDate:
          $ref: '#/components/schemas/Date'
        lostCustomerReason:
          $ref: '#/components/schemas/LostCustomerReason'
        customerType:
          $ref: '#/components/schemas/CustomerType'
        servicerAlerts:
          type: array
          description: Customer alerts to be received by the account servicer.
          items:
            $ref: '#/components/schemas/ServicerAlert'
        insiderType:
          $ref: '#/components/schemas/InsiderType'
    BSARiskCode:
      maximum: 10
      type: integer
      description: |
        Used to identify customers that present a risk to the bank as defined by the Bank Secrecy Act. For example, use this code to identify and monitor accounts suspected of fraud, kiting or money laundering.
      example: 0
    MoneyLaunderingCheck:
      type: string
      description: |
        Specifies the status of money laundering identification procedures. Possible Values: PassedNotChecked, ExemptBelowLimit, ClientMoneyTypeExempt, AuthorizedCredit, PostalOrElectronicPaymentExempt
      example: AuthorizedCredit
    KnowYourCustomerCheckType:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Specifies the type of Know Your Customer (KYC) or anti-money laundering due diligence to which the investor has been subjected. Possible Values: Ordinary, Simple, Enhanced.
      example: Ordinary
    LostCustomerReason:
      maxLength: 35
      minLength: 1
      type: string
      description: "Used for regulatory purposes by the bank to track how long closed account history has been maintained for a customer. Possible values are: \n Competition, Deceased, Dissatisfied, Moved, MergedEntity, CeasedOperation\n"
      example: Deceased
    InsiderType:
      maxLength: 35
      minLength: 1
      type: string
      description: "The insider type information is used to provide info to Regulation 0.  The Regulation 0 is a Federal Reserve regulation that places limits and stipulations on the credit extensions a member bank can offer to its executive officers, principal shareholders, and directors. Possible values: \n   Director, Employee, Officer, PrincipalShareholder, Shareholder, Executive, ServiceCorporationEmployee, Child, Spouse, Parent, Relative, AffiliateFinancialInstitution, HoldingCompany, MainShareHolder, RelationshipInterest.\n   \n   \n"
      example: Director
    PrivacyNoticeOption:
      maxLength: 40
      minLength: 1
      type: string
      description: |
        Privacy notice option. Possible Values: CustomerCanBeDisclosed, CustomerOptOut
    CustomerIdentificationProgram:
      type: object
      properties:
        certificateDocument:
          type: array
          description: Documents used to certify the customer identity
          items:
            $ref: '#/components/schemas/CertificateDocumentName'
        certificationStatus:
          $ref: '#/components/schemas/CertificationStatus'
        certificationDate:
          $ref: '#/components/schemas/DateAndTime'
        certificationFrequency:
          $ref: '#/components/schemas/Frequency'
      description: |
        CIP requires that financial firms must obtain four pieces of identifying information about a client.
    CertificateDocumentName:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Specifies the type of certificate. Possible values: AntiMoneyLaundering, DrivingLicense, DueFormationAndOrganisation, GoodStanding, IdentityCard, Incumbency, LetterOfReference, Passport, ProofOfAddress, PublicKeyInfrastructureCertificate
      example: IdentityCard
    CertificationStatus:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Customer Identification Program (CIP) status. Designates the type of verification used for Customer Identification. This status could be obtained from a specific software the bank is using. Possible Values: NotCertified, CertifiedLevel1, CertifiedLevel2, CertifiedLevel3, FraudCheckOnly, Level1Check, Level2FraudCheck.
      example: CertifiedLevel1
    CustomerConductClassification:
      maxLength: 35
      minLength: 1
      type: string
      description: "Assessment of the customer’s behaviour at the time of the account opening application. Possible Values: Standard, NonStandard, Reluctant. \n"
    AmountRange:
      type: object
      properties:
        minAmount:
          $ref: '#/components/schemas/PositiveAmount'
        maxAmount:
          $ref: '#/components/schemas/PositiveAmount'
      description: |
        Range an amount
    VIPStatus:
      type: string
      description: |
        Very Important People Program Status. Possible Values: Novice, Pro, Elite
      example: Elite
    Person:
      required:
        - personId
      description: |
        Human entity, as distinguished from a corporate entity.
      type: object
      properties:
        personId:
          description: Person identifier code assigned by the account service institution.
          readOnly: true
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/PartyStatus'
        users:
          type: array
          description: Person users information.
          items:
            $ref: '#/components/schemas/User'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardDescriptor'
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        legalName:
          description: |
            Official name under which the party is registered.
          $ref: '#/components/schemas/PartyName'
        nameTemplateId:
          $ref: '#/components/schemas/NameTemplateId'
        nameSoundExId:
          $ref: '#/components/schemas/SoundExId'
        partyBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        customerSinceDate:
          $ref: '#/components/schemas/DateAndTime'
        comments:
          type: array
          description: |
            Bank comnents of the party.
          items:
            $ref: '#/components/schemas/Comment'
        relatedParties:
          type: array
          items:
            $ref: '#/components/schemas/DetailedRelatedParty'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        relationshipId:
          description: |
            Customer principal relationship. This entity gives the ability to view a party’s total relationship with the bank. The relationship Id ties multiple parties together. This code is also used to reduce mailing costs during marketing campaigns to avoid sending duplicate materials to parties residing at the same address.
          $ref: '#/components/schemas/Id'
        relationshipLeadIndicator:
          type: boolean
          description: |
            The relationship lead is often the primary account owner or the party with whom the bank have the most contact.
        residenceType:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Specifies the type of residence where the party has its permanent home or principal establishment.  Possible ISO Complaian values are:
            Domestic, Foreign, Mixed
          example: Domestic
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        powerOfAttorney:
          $ref: '#/components/schemas/PowerOfAttorney'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        excludeMarketingIndicator:
          type: boolean
        audit:
          $ref: '#/components/schemas/Audit'
        restrictions:
          type: array
          description: "Access and operation restrictions at Party level. \n"
          items:
            $ref: '#/components/schemas/Restriction'
        codes:
          type: array
          description: |
            Codes to classify parties. Possible code names: Priority. For Organizations: StandardIndustryClassification, StandardIndustrySubClass AccountingGroup, CurrentRoutingNumber.
          items:
            $ref: '#/components/schemas/GenericCode'
        webPage:
          description: Party web page
          $ref: '#/components/schemas/URL'
        print:
          $ref: '#/components/schemas/PartyPrintOptions'
        products:
          type: array
          description: Products related with the party
          items:
            $ref: '#/components/schemas/Product'
        statement:
          $ref: '#/components/schemas/FinancialStatement'
        documents:
          type: array
          description: Documents related to the party.
          items:
            $ref: '#/components/schemas/DocumentDescriptor'
        uSDocumentedIndicator:
          type: boolean
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PersonIdentification'
        placeAndDateOfBirth:
          $ref: '#/components/schemas/PlaceAndDateOfBirth'
        signature:
          $ref: '#/components/schemas/DigitalSignature'
        signatureVerificationId:
          $ref: '#/components/schemas/SignatureVerificationId'
        contact:
          $ref: '#/components/schemas/ContactDetails'
        headOfHousehold:
          type: boolean
          description: Indicates whether the person pay the costs of supporting a house.
          example: true
        civilStatus:
          $ref: '#/components/schemas/CivilStatus'
        structuredName:
          $ref: '#/components/schemas/StructuredName'
        gender:
          $ref: '#/components/schemas/Gender'
        race:
          $ref: '#/components/schemas/Race'
        profession:
          $ref: '#/components/schemas/Profession'
        jobTitle:
          $ref: '#/components/schemas/JobTitle'
        educationLevel:
          $ref: '#/components/schemas/EducationLevel'
        residentialStatus:
          $ref: '#/components/schemas/ResidentialStatus'
        immigrationStatus:
          $ref: '#/components/schemas/ImmigrationStatus'
        minorIndicator:
          $ref: '#/components/schemas/MinorIndicator'
        citizenships:
          type: array
          items:
            $ref: '#/components/schemas/Citizenship'
        countryOfResidence:
          $ref: '#/components/schemas/CountryCode'
        profile:
          $ref: '#/components/schemas/PersonProfile'
    PersonAccountResponse:
      required:
        - accounts
        - personId
      type: object
      properties:
        personId:
          $ref: '#/components/schemas/Id'
        personName:
          $ref: '#/components/schemas/PartyName'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/PartyRelatedAccount'
    PartyRelatedAccount:
      required:
        - accountId
        - accountType
        - ownershipType
        - parties
      type: object
      properties:
        accountId:
          readOnly: true
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          readOnly: true
          $ref: '#/components/schemas/AccountNumber'
        accountBranchCode:
          readOnly: true
          $ref: '#/components/schemas/ServicerBranchId'
        codes:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/GenericCode'
        identifiers:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/AccountIdentification'
        accountType:
          readOnly: true
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          readOnly: true
          $ref: '#/components/schemas/AccountOwnershipType'
        name:
          readOnly: true
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          readOnly: true
          $ref: '#/components/schemas/Description'
        currency:
          readOnly: true
          $ref: '#/components/schemas/CurrencyCode'
        status:
          readOnly: true
          $ref: '#/components/schemas/AccountStatus'
        parties:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/AccountParty'
        relatedAccounts:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/RelatedAccount'
        balances:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Balance'
        audit:
          readOnly: true
          $ref: '#/components/schemas/Audit'
        partyAccountRole:
          $ref: '#/components/schemas/AccountPartyRole'
        primaryIndicator:
          type: boolean
          description: |
            Indicates whether the account related is primary.
    PersonStatementResponse:
      type: object
      properties:
        personId:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/PartyName'
        legalName:
          description: |
            Official name under which a party is registered.
          $ref: '#/components/schemas/PartyShortName'
        numberOfStatements:
          type: integer
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PersonIdentification'
        tINStatus:
          type: string
          description: |
            'The tax ID has been verified by the IRS. Possible values: Valid, NotValid, NotVerified, IRSWarning, TINApplied, NonTaxIdentifier.
        postalAddress:
          $ref: '#/components/schemas/PostalAddress'
        statements:
          type: array
          items:
            $ref: '#/components/schemas/AccountStatement'
    AccountStatement:
      description: |
        Information about account financial statement processing, including whether it is part of a combined statement relationship. A combined financial statement aggregates the financial data of different entities (such as subsidiaries, divisions, or affiliates) under common ownership or control.
      type: object
      properties:
        frequency:
          description: |
            The frequency of the regular statement.
          $ref: '#/components/schemas/Frequency'
        nextFrequency:
          description: |
            The next frequency of the regular statement.
          $ref: '#/components/schemas/Frequency'
        communicationMethods:
          type: array
          items:
            $ref: '#/components/schemas/StatementCommunicationChannel'
        format:
          $ref: '#/components/schemas/DocumentFormat'
        codes:
          type: array
          description: |
            Codes related to statements or internal handling codes associated with the statement. Possible Values: CombinedCode, SpecialStatement, DetailsFormat, StatementGroup, ProfitabilityOption.
          items:
            $ref: '#/components/schemas/GenericCode'
        identifiers:
          type: array
          description: |
            Identification of statement instances and related. Possible values: schemeName: LastCombinedStatement, CombinedStatementAccountId
          items:
            $ref: '#/components/schemas/GenericIdentification'
        templateCode:
          $ref: '#/components/schemas/StatementTemplateId'
        lastStatementPeriod:
          $ref: '#/components/schemas/Period'
        nextStatementPeriod:
          $ref: '#/components/schemas/Period'
        lastStatementDate:
          description: |
            The date of the last statement.
          $ref: '#/components/schemas/Date'
        nextStatementDate:
          description: |
            The date of the next statement.
          $ref: '#/components/schemas/Date'
        serviceChargeDate:
          description: |
            The date on which service charges will be applied to an account
          $ref: '#/components/schemas/Date'
        previousStatementDate:
          description: |
            The date of the statement previous from the last.
          $ref: '#/components/schemas/Date'
        lastRegularStatementDate:
          description: |
            The date of the last regular statement.
          $ref: '#/components/schemas/Date'
        truncationOptions:
          type: array
          items:
            type: string
            description: |
              Options to indicate if the physical items are enclosed with an account statement. Possible Values:  ItemsIncluded, ItemsNotIncluded, CIPModuleOnly, NotIcludedDiscrepancyReport, ChecksNotIncluded, DepositsNotIncluded, HandFile
            example: ItemsIncluded
        accountNameIndicator:
          type: boolean
          description: Indicates whether the account name is printed on the statement.
        balances:
          type: array
          description: Statement total amounts
          readOnly: true
          items:
            $ref: '#/components/schemas/Balance'
        preferredLanguage:
          $ref: '#/components/schemas/PreferredLanguage'
        combineType:
          maxLength: 36
          minLength: 1
          type: string
          description: |
            Indicates whether account transactions are printed on a combined statement. Possible combinations: CheckingStatement, SavingsStatement, PrimaryAccount, SecondaryAccount.
          example: SavingsStatement
        category:
          $ref: '#/components/schemas/StatementCategory'
        subcategory:
          $ref: '#/components/schemas/StatementSubcategory'
        profitabilityModelId:
          $ref: '#/components/schemas/StatementModelId'
        lastIRAStatementDate:
          $ref: '#/components/schemas/Date'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        accountStatus:
          $ref: '#/components/schemas/AccountStatus'
        productId:
          $ref: '#/components/schemas/Id'
        productName:
          maxLength: 40
          minLength: 1
          type: string
          description: Account product name.
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/StatementRelatedParty'
        accountAnalysisFrequency:
          description: |
            The analysis frequency.
          $ref: '#/components/schemas/Frequency'
        pendingFrequency:
          description: "Identifies the pending statement cycle assigned to the account. \n"
          $ref: '#/components/schemas/Frequency'
    StatementRelatedParty:
      type: object
      properties:
        partyId:
          $ref: '#/components/schemas/Id'
        partyType:
          $ref: '#/components/schemas/PartyType'
        partyName:
          $ref: '#/components/schemas/PartyName'
        partyRelationType:
          $ref: '#/components/schemas/PartyRelationType'
        priorityIndicator:
          type: boolean
          description: |
            Indicates whether the related party is a priority.
    PersonLoanResponse:
      required:
        - loans
        - personId
        - personName
      type: object
      properties:
        personId:
          $ref: '#/components/schemas/Id'
        personName:
          $ref: '#/components/schemas/PartyName'
        personStatus:
          $ref: '#/components/schemas/PartyStatus'
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        creditRankingScales:
          type: array
          description: "Borrower credit ranking scores \n"
          items:
            $ref: '#/components/schemas/CreditRankingScale'
        balances:
          type: array
          description: Loan total amounts
          readOnly: true
          items:
            $ref: '#/components/schemas/Balance'
        loans:
          type: array
          items:
            $ref: '#/components/schemas/LoanDescriptor'
    LoanDescriptor:
      type: object
      properties:
        loanId:
          $ref: '#/components/schemas/AccountId'
        status:
          $ref: '#/components/schemas/LoanStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        qualityScore:
          $ref: '#/components/schemas/QualityScore'
        openDate:
          $ref: '#/components/schemas/Date'
        fundedDate:
          description: Date on which the loan was funded or closed
          $ref: '#/components/schemas/Date'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        productId:
          $ref: '#/components/schemas/ProductId'
        name:
          $ref: '#/components/schemas/AccountName'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountParty'
        principalAmount:
          description: |
            Amount of money borrowed (excluding interest).
          $ref: '#/components/schemas/PositiveAmount'
        interestAmount:
          description: |
            Interest on the principal amount.
          $ref: '#/components/schemas/PositiveAmount'
        maturityDate:
          description: |
            Current final repayment date. The maturity date is automatically calculated based upon the first scheduled payment date, the scheduled payment frequency, and the number of payments.
          $ref: '#/components/schemas/Date'
        projectedDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        pastDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculationDescriptor'
      description: Specifies the current state of a loan.
    LoanStatus:
      maxLength: 17
      minLength: 1
      type: string
      description: "Specifies the current state of an account. Possible  values names are:\n Pending, \n Form,\n Denied, \n Review,\n Approve,\n Withdrawn,\n Disable,\n Funded,\n Deleted,\n WriteDown,\n WrittenOff,\n Active,\n PaymentPastDue,\n Foreclosure,\n Bankruptcy.\n"
      example: Withdrawn
    PaymentCardActivationRequest:
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardIdentification'
      description: Payment Card Activation Request
    PaymentCard:
      required:
        - cardHolderId
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardIdentification'
        fundingSourceType:
          $ref: '#/components/schemas/CardFundingSourceType'
        productId:
          $ref: '#/components/schemas/Id'
        pricingStrategyId:
          $ref: '#/components/schemas/Id'
        businessIndicator:
          type: boolean
          description: Indicates whether the payment card is business or not.
        digitalIndicator:
          $ref: '#/components/schemas/DigitalCardIndicator'
        cardBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        number:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        cardHolderType:
          $ref: '#/components/schemas/CardHolderType'
        nameOnCard:
          description: |
            Specifies the name on the card if overriding the name from the card holder.
          $ref: '#/components/schemas/PartyName'
        businessNameOnCard:
          description: |
            Specifies the business name on the card.
          $ref: '#/components/schemas/PartyName'
        art:
          $ref: '#/components/schemas/PaymentCardArt'
        referenceAccountId:
          description: |
            Account used as a reference for the card creation. Could be a cash or loan account owned by the primary card holder.
          $ref: '#/components/schemas/AccountId'
        relatedAccounts:
          type: array
          description: |
            Account that provides the payment card transactions. The account is the funding source for the card. Could be a cash or loan account linked to the debit card or a credit card account. A card can have one or many accounts.
          items:
            $ref: '#/components/schemas/RelatedAccount'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardRelatedParty'
        startDate:
          description: Year and month the card is available for use.
          $ref: '#/components/schemas/Date'
        expiryDate:
          description: Year and month the card expires.
          $ref: '#/components/schemas/YearMonth'
        orderedDate:
          description: Date the card is ordered
          $ref: '#/components/schemas/Date'
        activationDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        activationAttempts:
          type: number
          description: |
            Indicates the number of activation attempts since the last reset. Applies to debit cards only.
        securityCode:
          maxLength: 35
          type: string
          description: |
            Security code written on the card, sometimes called card security code (CSC).
          example: "103"
        pIN:
          maxLength: 35
          type: string
          description: |
            PIN is the 4 digit security code that is used to authenticate the user and allow them access to the associated accounts of the card.
          example: "1031"
        pINRetries:
          maximum: 99
          type: number
          description: |
            Pin Retries Allowed
          example: 3
        sequenceNumber:
          maxLength: 20
          type: string
          description: |
            Identifies a card inside a set of cards with the same number (or PAN).
          example: "1"
        brand:
          maxLength: 35
          type: string
          description: |
            Brand name of the card.
          example: Visa
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculationDescriptor'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeCalculationDescriptor'
        algorithms:
          type: array
          items:
            $ref: '#/components/schemas/Algorithm'
        codes:
          type: array
          description: |
            Codes to classify payment cards. Possible code names: ClassCode
          items:
            $ref: '#/components/schemas/GenericCode'
        cardHolder:
          description: Card holder person description
          $ref: '#/components/schemas/PersonDescriptor'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        cardId:
          $ref: '#/components/schemas/PaymentCardId'
        statement:
          $ref: '#/components/schemas/CreditCardStatement'
        offers:
          type: array
          description: |
            Card provider offers assigned to the PAN.
          items:
            $ref: '#/components/schemas/CardProviderOffer'
        status:
          $ref: '#/components/schemas/CardStatus'
        statusDate:
          $ref: '#/components/schemas/DateAndTime'
        statusReason:
          $ref: '#/components/schemas/CardStatusReason'
        history:
          $ref: '#/components/schemas/PaymentCardHistory'
        servicerAlerts:
          type: array
          description: Customer alerts to be received by the account servicer.
          items:
            $ref: '#/components/schemas/ServicerAlert'
    PaymentCardRequest:
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardIdentification'
        relationshipId:
          description: >
            Customer principal relationship. This entity gives the ability to
            view a party’s total relationship with the bank. The relationship Id
            ties multiple parties and financial instruments together.
          $ref: '#/components/schemas/Id'
        fundingSourceType:
          $ref: '#/components/schemas/CardFundingSourceType'
        productId:
          $ref: '#/components/schemas/Id'
        pricingStrategyId:
          $ref: '#/components/schemas/Id'
        businessIndicator:
          type: boolean
          description: Indicates whether the payment card is business or not.
        digitalIndicator:
          $ref: '#/components/schemas/DigitalCardIndicator'
        cardBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        number:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        cardHolderType:
          $ref: '#/components/schemas/CardHolderType'
        nameOnCard:
          description: |
            Specifies the name on the card if overriding the name from the card holder.
          $ref: '#/components/schemas/PartyName'
        businessNameOnCard:
          description: |
            Specifies the business name on the card.
          $ref: '#/components/schemas/PartyName'
        art:
          $ref: '#/components/schemas/PaymentCardArt'
        referenceAccountId:
          description: |
            Account used as a reference for the card creation. Could be a cash or loan account owned by the primary card holder.
          $ref: '#/components/schemas/AccountId'
        relatedAccounts:
          type: array
          description: |
            Account that provides the payment card transactions. The account is the funding source for the card. Could be a cash or loan account linked to the debit card or a credit card account. A card can have one or many accounts.
          items:
            $ref: '#/components/schemas/RelatedAccount'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardRelatedParty'
        startDate:
          description: Year and month the card is available for use.
          $ref: '#/components/schemas/Date'
        expiryDate:
          description: Year and month the card expires.
          $ref: '#/components/schemas/YearMonth'
        orderedDate:
          description: Date the card is ordered
          $ref: '#/components/schemas/Date'
        activationDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        activationAttempts:
          type: number
          description: |
            Indicates the number of activation attempts since the last reset. Applies to debit cards only.
        securityCode:
          maxLength: 35
          type: string
          description: |
            Security code written on the card, sometimes called card security code (CSC).
          example: "103"
        pIN:
          maxLength: 35
          type: string
          description: |
            PIN is the 4 digit security code that is used to authenticate the user and allow them access to the associated accounts of the card.
          example: "1031"
        pINRetries:
          maximum: 99
          type: number
          description: |
            Pin Retries Allowed
          example: 3
        sequenceNumber:
          maxLength: 20
          type: string
          description: |
            Identifies a card inside a set of cards with the same number (or PAN).
          example: "1"
        brand:
          maxLength: 35
          type: string
          description: |
            Brand name of the card.
          example: Visa
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculationDescriptor'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeCalculationDescriptor'
        algorithms:
          type: array
          items:
            $ref: '#/components/schemas/Algorithm'
        codes:
          type: array
          description: |
            Codes to classify payment cards. Possible code names: ClassCode
          items:
            $ref: '#/components/schemas/GenericCode'
        cardHolder:
          description: Card holder person description
          $ref: '#/components/schemas/PersonDescriptor'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
    DigitalCardIndicator:
      type: boolean
      description: "Indicates whether the payment card is digital or physical.    \n"
    PaymentCardArt:
      type: object
      properties:
        styleId:
          $ref: '#/components/schemas/Id'
        label:
          type: string
          description: Display label for the specific image
        imageUri:
          type: string
          description: "The [URI](https://datatracker.ietf.org/doc/html/rfc2397) link\nof a PNG, JPG or GIF image with proportions defined by\n[ISO 8710 ID-1](https://en.wikipedia.org/wiki/ISO/IEC_7810) with 340x210 ratio and\nwidth no greater than 512 pixels. The image at this URI must be accessible at all\ntimes, with no additional authentication headers. Typically this is an image resource\nlocated in the data provider's public web site or Content Delivery Network        \n\n\n \n"
          format: uri
      description: Art associated with the card
    PaymentCardRelatedParty:
      required:
        - partyAccountRole
        - partyId
        - partyType
      type: object
      properties:
        partyId:
          $ref: '#/components/schemas/Id'
        partyType:
          $ref: '#/components/schemas/PartyType'
        partyAccountRole:
          $ref: '#/components/schemas/PaymentCardPartyRole'
        partyAccountRoleCode:
          type: string
          description: Bank defined party account role.
          example: "50"
        partyName:
          $ref: '#/components/schemas/PartyName'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/GenericIdentification'
        structuredName:
          $ref: '#/components/schemas/StructuredName'
      description: "Parties related to the Payment Card. \n"
    PaymentCardPartyRole:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Payment Card party roles. Possible Values: Primary, Additional, Authorized, Guarantor, Organization.
      example: Additional
    ChargeCalculationDescriptor:
      description: Calculation of a service charge or fee.
      type: object
      properties:
        fromDateTime:
          description: Date and time at which the period starts.
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          description: Date and time at which the period ends.
          $ref: '#/components/schemas/DateAndTime'
        name:
          $ref: '#/components/schemas/ChargeName'
        amount:
          description: Amount charged for the service.
          $ref: '#/components/schemas/PositiveAmount'
        rate:
          description: |
            Rate applied on a basis amount to calculate the service charge.
          $ref: '#/components/schemas/Percentage'
        chargeType:
          $ref: '#/components/schemas/ChargeType'
        exemptIndicator:
          type: boolean
          description: |
            Indicates whether the account is exempt of the charge.
    Algorithm:
      type: object
      properties:
        name:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Name to describe the algorithm provided. Possible Values: ICSF
        target:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Attribute name of the algorithm. Possible Values: pIN
        enableIndicator:
          type: boolean
          description: Indicates whether the offset has been calculated.
        offset:
          maxLength: 60
          minLength: 1
          type: string
          description: |
            An attribute offset is a value that is the difference between two attributes. For example, a PIN offset may be the difference between a PIN that is chosen by the customer and one that is assigned by an institution.
      description: |
        Algorithm calculus parameters to verify and protect personal identification, numbers or PINs of the card holder or the account holder.
    CreditCardStatement:
      description: Credit Card statement details.
      type: object
      properties:
        frequency:
          description: |
            The frequency of the regular statement.
          $ref: '#/components/schemas/Frequency'
        nextFrequency:
          description: |
            The next frequency of the regular statement.
          $ref: '#/components/schemas/Frequency'
        communicationMethods:
          type: array
          items:
            $ref: '#/components/schemas/StatementCommunicationChannel'
        format:
          $ref: '#/components/schemas/DocumentFormat'
        codes:
          type: array
          description: |
            Codes related to statements or internal handling codes associated with the statement. Possible Values: CombinedCode, SpecialStatement, DetailsFormat, StatementGroup, ProfitabilityOption.
          items:
            $ref: '#/components/schemas/GenericCode'
        identifiers:
          type: array
          description: |
            Identification of statement instances and related. Possible values: schemeName: LastCombinedStatement, CombinedStatementAccountId
          items:
            $ref: '#/components/schemas/GenericIdentification'
        templateCode:
          $ref: '#/components/schemas/StatementTemplateId'
        lastStatementPeriod:
          $ref: '#/components/schemas/Period'
        nextStatementPeriod:
          $ref: '#/components/schemas/Period'
        lastStatementDate:
          description: |
            The date of the last statement.
          $ref: '#/components/schemas/Date'
        nextStatementDate:
          description: |
            The date of the next statement.
          $ref: '#/components/schemas/Date'
        serviceChargeDate:
          description: |
            The date on which service charges will be applied to an account
          $ref: '#/components/schemas/Date'
        previousStatementDate:
          description: |
            The date of the statement previous from the last.
          $ref: '#/components/schemas/Date'
        lastRegularStatementDate:
          description: |
            The date of the last regular statement.
          $ref: '#/components/schemas/Date'
        truncationOptions:
          type: array
          items:
            type: string
            description: |
              Options to indicate if the physical items are enclosed with an account statement. Possible Values:  ItemsIncluded, ItemsNotIncluded, CIPModuleOnly, NotIcludedDiscrepancyReport, ChecksNotIncluded, DepositsNotIncluded, HandFile
            example: ItemsIncluded
        accountNameIndicator:
          type: boolean
          description: Indicates whether the account name is printed on the statement.
        balances:
          type: array
          description: Statement total amounts
          readOnly: true
          items:
            $ref: '#/components/schemas/Balance'
        preferredLanguage:
          $ref: '#/components/schemas/PreferredLanguage'
        combineType:
          maxLength: 36
          minLength: 1
          type: string
          description: |
            Indicates whether account transactions are printed on a combined statement. Possible combinations: CheckingStatement, SavingsStatement, PrimaryAccount, SecondaryAccount.
          example: SavingsStatement
        statementBalance:
          description: |
            The balance calculated at the end of the billing cycle up to the payment closing date.
          $ref: '#/components/schemas/Amount'
        paymentClosingDate:
          description: Last day of your billing cycle.
          $ref: '#/components/schemas/Date'
        paymentDueDate:
          description: |
            The date by which is needed to pay the issuer to avoid interest charges.
          $ref: '#/components/schemas/Date'
        minimumPayment:
          description: |
            The minimum monthly payment is the lowest amount a customer can pay on their revolving credit account per month to remain in good standing with the credit card company.
          $ref: '#/components/schemas/Amount'
        lastPaymentDate:
          $ref: '#/components/schemas/Date'
        lastPaymentAmount:
          $ref: '#/components/schemas/Amount'
    CardProviderOffer:
      required:
        - offerId
        - offerTitle
      type: object
      properties:
        offerId:
          $ref: '#/components/schemas/OfferId'
        offerTitle:
          $ref: '#/components/schemas/OfferTitle'
      description: Card Payment Offer.
    PaymentCardHistory:
      type: object
      properties:
        lastCardId:
          $ref: '#/components/schemas/PaymentCardId'
        lastActivityDate:
          description: The most recent date the debit card was used to complete a transaction.
          $ref: '#/components/schemas/Date'
        lastForeignTransferMonth:
          $ref: '#/components/schemas/Month'
        balances:
          type: array
          description: Total amounts
          items:
            $ref: '#/components/schemas/TotalAmount'
    TotalAmount:
      type: object
      properties:
        name:
          maxLength: 35
          minLength: 1
          type: string
        period:
          $ref: '#/components/schemas/Period'
        amount:
          description: Total of the transaction amounts.
          $ref: '#/components/schemas/Amount'
      description: Total amount of transactions labeled by a name.
    PersonCardResponse:
      required:
        - cards
        - personId
        - personName
      type: object
      properties:
        personId:
          $ref: '#/components/schemas/Id'
        personName:
          $ref: '#/components/schemas/PartyName'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardDescriptor'
    PersonCustomerRelationshipResponse:
      required:
        - personId
        - personName
        - relationships
      type: object
      properties:
        personId:
          $ref: '#/components/schemas/Id'
        personName:
          $ref: '#/components/schemas/PartyName'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/CustomerRelationship'
    CustomerRelationship:
      description: |
        A grouping of related accounts tied to one or more parties that have an account relationship with the financial institution. Some financial institutions may call this a membership, parent account or other term.
      type: object
      properties:
        parties:
          $ref: '#/components/schemas/CustomerRelationshipParty'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/CustomerRelationshipAccount'
        loans:
          type: array
          items:
            $ref: '#/components/schemas/CustomerRelationshipLoan'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardDescriptor'
        audit:
          $ref: '#/components/schemas/Audit'
        codes:
          type: array
          description: Additional relationship codes.
          items:
            $ref: '#/components/schemas/GenericCode'
        relationshipId:
          description: |
            This id gives the ability to view a party’s total relationship with the bank. The relationship Id ties multiple parties together. This code is also used to reduce mailing costs during marketing campaigns to avoid sending duplicate materials to parties residing at the same address.
          readOnly: true
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/CustomerRelationshipStatus'
    CustomerRelationshipRequest:
      type: object
      properties:
        parties:
          $ref: '#/components/schemas/CustomerRelationshipParty'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/CustomerRelationshipAccount'
        deposits:
          type: array
          items:
            $ref: '#/components/schemas/CustomerRelationshipAccount'
        loans:
          type: array
          items:
            $ref: '#/components/schemas/CustomerRelationshipLoan'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardDescriptor'
        audit:
          $ref: '#/components/schemas/Audit'
        codes:
          type: array
          description: Additional relationship codes.
          items:
            $ref: '#/components/schemas/GenericCode'
      description: |
        A grouping of related accounts tied to one or more parties that have an account relationship with the financial institution. Some financial institutions may call this a membership, parent account or other term.
    CustomerRelationshipParty:
      type: object
      properties:
        partyId:
          $ref: '#/components/schemas/Id'
        partyType:
          $ref: '#/components/schemas/PartyType'
        partyName:
          $ref: '#/components/schemas/PartyName'
        partyRelationType:
          $ref: '#/components/schemas/PartyRelationType'
        priorityIndicator:
          type: boolean
          description: |
            Indicates whether the related party is a priority.
    CustomerRelationshipAccount:
      required:
        - accountId
        - accountRelationType
        - accountType
      type: object
      properties:
        accountRelationType:
          $ref: '#/components/schemas/AccountRelationType'
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          readOnly: true
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          readOnly: true
          $ref: '#/components/schemas/AccountType'
        accountName:
          readOnly: true
          $ref: '#/components/schemas/AccountName'
        primaryIndicator:
          type: boolean
          description: "Indicates whether the account related is primary. \n"
    CustomerRelationshipLoan:
      required:
        - accountId
        - accountRelationType
        - accountType
      type: object
      properties:
        accountRelationType:
          $ref: '#/components/schemas/AccountRelationType'
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          readOnly: true
          $ref: '#/components/schemas/AccountNumber'
        loanType:
          readOnly: true
          $ref: '#/components/schemas/LoanType'
        accountName:
          readOnly: true
          $ref: '#/components/schemas/AccountName'
        primaryIndicator:
          type: boolean
          description: "Indicates whether the account related is primary. \n"
    LoanType:
      maxLength: 35
      minLength: 1
      type: string
      description: "Type of the account. Possible BIAN compliant values are: \n Loan,\n Personal,\n ConsumerLoan,\n CommercialLoan,\n Corporate, \n Lease, \n Syndicated, \n MortgageLoan,\n Conforming,\n Merchandising,\n LineOfCredit,\n RevolvingCredit,\n LoanAgainstSecurities,\n DirectDepositAdvance,\n DemandDepositLoan,\n InstallmentLoan,\n LoanInProcess,\n EscrowConstruction,\n Escrow,\n HomeEquityLoan.\n"
      example: Personal
    CustomerRelationshipStatus:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Specifies the status al a customer relationship. Some possible values are:  Active, Closed, Inactive, Prospect, Restricted
      example: Active
    OrganizationDescriptor:
      required:
        - name
        - organizationId
      type: object
      properties:
        organizationId:
          description: Organization identifier code assigned by the account service institution.
          $ref: '#/components/schemas/Id'
        organizationType:
          $ref: '#/components/schemas/OrganizationType'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationIdentification'
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        legalName:
          description: |
            Official name under which an organization is registered.
          $ref: '#/components/schemas/PartyShortName'
        tradingName:
          description: |
            Name used by a business for commercial purposes, although its registered legal name, used for contracts and other formal situations, may be another.
          $ref: '#/components/schemas/PartyName'
        audit:
          $ref: '#/components/schemas/Audit'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
    OrganizationRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        legalName:
          description: |
            Official name under which the party is registered.
          $ref: '#/components/schemas/PartyName'
        nameTemplateId:
          $ref: '#/components/schemas/NameTemplateId'
        nameSoundExId:
          $ref: '#/components/schemas/SoundExId'
        partyBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        customerSinceDate:
          $ref: '#/components/schemas/DateAndTime'
        comments:
          type: array
          description: |
            Bank comnents of the party.
          items:
            $ref: '#/components/schemas/Comment'
        relatedParties:
          type: array
          items:
            $ref: '#/components/schemas/DetailedRelatedParty'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        relationshipId:
          description: |
            Customer principal relationship. This entity gives the ability to view a party’s total relationship with the bank. The relationship Id ties multiple parties together. This code is also used to reduce mailing costs during marketing campaigns to avoid sending duplicate materials to parties residing at the same address.
          $ref: '#/components/schemas/Id'
        relationshipLeadIndicator:
          type: boolean
          description: |
            The relationship lead is often the primary account owner or the party with whom the bank have the most contact.
        residenceType:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Specifies the type of residence where the party has its permanent home or principal establishment.  Possible ISO Complaian values are:
            Domestic, Foreign, Mixed
          example: Domestic
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        powerOfAttorney:
          $ref: '#/components/schemas/PowerOfAttorney'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        excludeMarketingIndicator:
          type: boolean
        audit:
          $ref: '#/components/schemas/Audit'
        restrictions:
          type: array
          description: "Access and operation restrictions at Party level. \n"
          items:
            $ref: '#/components/schemas/Restriction'
        codes:
          type: array
          description: |
            Codes to classify parties. Possible code names: Priority. For Organizations: StandardIndustryClassification, StandardIndustrySubClass AccountingGroup, CurrentRoutingNumber.
          items:
            $ref: '#/components/schemas/GenericCode'
        webPage:
          description: Party web page
          $ref: '#/components/schemas/URL'
        print:
          $ref: '#/components/schemas/PartyPrintOptions'
        products:
          type: array
          description: Products related with the party
          items:
            $ref: '#/components/schemas/Product'
        statement:
          $ref: '#/components/schemas/FinancialStatement'
        documents:
          type: array
          description: Documents related to the party.
          items:
            $ref: '#/components/schemas/DocumentDescriptor'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationIdentification'
        organizationType:
          $ref: '#/components/schemas/OrganizationType'
        organizationPurpose:
          description: |
            Description and purpose of an organization.
          $ref: '#/components/schemas/Description'
        tradingName:
          description: |
            Name used by a business for commercial purposes, although its registered legal name, used for contracts and other formal situations.
          $ref: '#/components/schemas/PartyShortName'
        registrationDate:
          description: |
            Date and time at which a given organization was officially registered.
          $ref: '#/components/schemas/Date'
        establishmentDate:
          description: |
            Date when the Organization was established.
          $ref: '#/components/schemas/Date'
        merchantCategory:
          $ref: '#/components/schemas/MerchantCategoryCode'
        nAICSCode:
          $ref: '#/components/schemas/NAICSCode'
        lineOfBusiness:
          maxLength: 35
          minLength: 1
          type: string
          description: "The line of business refers to the specific industry or market segment that a company operates. This helps to further define the target market and focus marketing efforts on reaching and serving the needs of that specific group. Possible Values:  ConsumerGoods, ConsumerCervices, SmallBusiness, Corporate. \n"
        sector:
          $ref: '#/components/schemas/OrganizationSector'
        organizationProfile:
          $ref: '#/components/schemas/OrganizationProfile'
        contact:
          description: Business e-mails and phone numbers. Configuration of communication channels at organization level.
          $ref: '#/components/schemas/ContactDetails'
        projectedDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        logo:
          $ref: '#/components/schemas/CommercialLogo'
    NAICSCode:
      pattern: "^[0-9]{2,2}"
      type: string
      description: |
        The North American Industry Classification System (NAICS) is the standard used by Federal statistical agencies in classifying business establishments for the purpose of collecting, analyzing, and publishing statistical data related to the U.S. business economy.
      example: "54"
    OrganizationSector:
      type: string
      description: |
        A sector is an area of the economy in which businesses share the same or related business activity, product, or service. Energy, Materials, Industrials, ConsumerDiscretionary, ConsumerStaples, HealthCare, Financials, InformationTechnology, TelecommunicationServices, Utilities, RealEstate.
    OrganizationProfile:
      type: object
      properties:
        riskLevel:
          $ref: '#/components/schemas/RiskLevel'
        riskCategories:
          type: array
          items:
            $ref: '#/components/schemas/RiskMeasure'
        bSARiskCode:
          $ref: '#/components/schemas/BSARiskCode'
        creditReview:
          $ref: '#/components/schemas/CreditReview'
        creditBureauReportCode:
          type: string
          description: "Code used for reporting to the credit bureaus. This code is used to report the trade line of a credit account to the credit bureau agencies. \n"
          example: "30"
        eCOACode:
          type: string
          description: |
            The ECOA code indicates how customer account information is reported to the Credit Bureau in keeping with the Equal Credit Opportunity Act.
        cTRExemptIndicator:
          type: boolean
          description: |
            Currency transaction report (CTR) exemption. A CTR is a report that must be filed by banks for any transaction involving currency of $10,000 or more. However, certain entities and transactions are exempt from this reporting requirement.
        oFACReportingIndicator:
          type: boolean
          description: |
            Indicates whether the party is to be excluded from OFAC Reporting.
        previousFinancialInstitution:
          $ref: '#/components/schemas/PartyName'
        referredByWhom:
          $ref: '#/components/schemas/PartyName'
        moneyLaunderingCheck:
          $ref: '#/components/schemas/MoneyLaunderingCheck'
        knowYourCustomerCheck:
          $ref: '#/components/schemas/KnowYourCustomerCheckType'
        timeAtCurrentAddress:
          $ref: '#/components/schemas/TemporalDuration'
        dateAtCurrentAddress:
          description: |
            Date of Residence in the current household.
          $ref: '#/components/schemas/Date'
        yearsAtCurrentAddress:
          type: integer
        sourceOfWealth:
          description: Indicates the main sources of the money.
          $ref: '#/components/schemas/Description'
        politicalAffiliation:
          type: string
          description: |
            Indicates the political affiliation of the Party. Possible values could be: Democrat, Independent, Republican.
        lostCustomerDate:
          $ref: '#/components/schemas/Date'
        lostCustomerReason:
          $ref: '#/components/schemas/LostCustomerReason'
        customerType:
          $ref: '#/components/schemas/CustomerType'
        servicerAlerts:
          type: array
          description: Customer alerts to be received by the account servicer.
          items:
            $ref: '#/components/schemas/ServicerAlert'
        insiderType:
          $ref: '#/components/schemas/InsiderType'
        legalEntityReportingIndicator:
          type: boolean
          description: Indicates whether the party is required to be reported as a legal entity.
        numberOfEmployees:
          type: integer
          description: Number of employees of the corporation.
          example: 100
        annualSales:
          $ref: '#/components/schemas/Amount'
        services:
          description: |
            Description of the services that are offered for sale.
          $ref: '#/components/schemas/Description'
        goods:
          description: |
            Description of the goods that are offered for sale.
          $ref: '#/components/schemas/Description'
        serviceOrGoodsLocations:
          type: array
          description: Places where the goods and services are sold.
          items:
            $ref: '#/components/schemas/Place'
        hSAIndicator:
          type: boolean
          description: >
            Indicates whether the organization has Health Savings Account
            Plan
        politicallyExposedOrganization:
          type: boolean
          description: >
            Indicates whether the organization is a politically exposed
            person.
          example: true
      description: Information to support Know Your Customer (KYC) processes.
    CommercialLogo:
      maxLength: 32768
      minLength: 1
      type: string
      description: "Commercial logo of the organization. Max length of 32K, base64 encoded. \n"
      format: byte
    Organization:
      description: |
        Organized structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution.
      type: object
      properties:
        organizationId:
          description: Organization identifier code assigned by the account service institution.
          readOnly: true
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/PartyStatus'
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        legalName:
          description: |
            Official name under which the party is registered.
          $ref: '#/components/schemas/PartyName'
        nameTemplateId:
          $ref: '#/components/schemas/NameTemplateId'
        nameSoundExId:
          $ref: '#/components/schemas/SoundExId'
        partyBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        customerSinceDate:
          $ref: '#/components/schemas/DateAndTime'
        comments:
          type: array
          description: |
            Bank comnents of the party.
          items:
            $ref: '#/components/schemas/Comment'
        relatedParties:
          type: array
          items:
            $ref: '#/components/schemas/DetailedRelatedParty'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        relationshipId:
          description: |
            Customer principal relationship. This entity gives the ability to view a party’s total relationship with the bank. The relationship Id ties multiple parties together. This code is also used to reduce mailing costs during marketing campaigns to avoid sending duplicate materials to parties residing at the same address.
          $ref: '#/components/schemas/Id'
        relationshipLeadIndicator:
          type: boolean
          description: |
            The relationship lead is often the primary account owner or the party with whom the bank have the most contact.
        residenceType:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            Specifies the type of residence where the party has its permanent home or principal establishment.  Possible ISO Complaian values are:
            Domestic, Foreign, Mixed
          example: Domestic
        taxInformation:
          $ref: '#/components/schemas/TaxPartyInformation'
        powerOfAttorney:
          $ref: '#/components/schemas/PowerOfAttorney'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        excludeMarketingIndicator:
          type: boolean
        audit:
          $ref: '#/components/schemas/Audit'
        restrictions:
          type: array
          description: "Access and operation restrictions at Party level. \n"
          items:
            $ref: '#/components/schemas/Restriction'
        codes:
          type: array
          description: |
            Codes to classify parties. Possible code names: Priority. For Organizations: StandardIndustryClassification, StandardIndustrySubClass AccountingGroup, CurrentRoutingNumber.
          items:
            $ref: '#/components/schemas/GenericCode'
        webPage:
          description: Party web page
          $ref: '#/components/schemas/URL'
        print:
          $ref: '#/components/schemas/PartyPrintOptions'
        products:
          type: array
          description: Products related with the party
          items:
            $ref: '#/components/schemas/Product'
        statement:
          $ref: '#/components/schemas/FinancialStatement'
        documents:
          type: array
          description: Documents related to the party.
          items:
            $ref: '#/components/schemas/DocumentDescriptor'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationIdentification'
        organizationType:
          $ref: '#/components/schemas/OrganizationType'
        organizationPurpose:
          description: |
            Description and purpose of an organization.
          $ref: '#/components/schemas/Description'
        tradingName:
          description: |
            Name used by a business for commercial purposes, although its registered legal name, used for contracts and other formal situations.
          $ref: '#/components/schemas/PartyShortName'
        registrationDate:
          description: |
            Date and time at which a given organization was officially registered.
          $ref: '#/components/schemas/Date'
        establishmentDate:
          description: |
            Date when the Organization was established.
          $ref: '#/components/schemas/Date'
        merchantCategory:
          $ref: '#/components/schemas/MerchantCategoryCode'
        nAICSCode:
          $ref: '#/components/schemas/NAICSCode'
        lineOfBusiness:
          maxLength: 35
          minLength: 1
          type: string
          description: "The line of business refers to the specific industry or market segment that a company operates. This helps to further define the target market and focus marketing efforts on reaching and serving the needs of that specific group. Possible Values:  ConsumerGoods, ConsumerCervices, SmallBusiness, Corporate. \n"
        sector:
          $ref: '#/components/schemas/OrganizationSector'
        organizationProfile:
          $ref: '#/components/schemas/OrganizationProfile'
        contact:
          description: Business e-mails and phone numbers. Configuration of communication channels at organization level.
          $ref: '#/components/schemas/ContactDetails'
        projectedDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        logo:
          $ref: '#/components/schemas/CommercialLogo'
    OrganizationAccountResponse:
      required:
        - accounts
        - organizationId
      type: object
      properties:
        organizationId:
          $ref: '#/components/schemas/Id'
        organizationName:
          $ref: '#/components/schemas/PartyName'
        organizationType:
          $ref: '#/components/schemas/OrganizationType'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/PartyRelatedAccount'
    OrganizationStatementResponse:
      type: object
      properties:
        organizationId:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/PartyName'
        legalName:
          description: |
            Official name under which a party is registered.
          $ref: '#/components/schemas/PartyShortName'
        organizationType:
          $ref: '#/components/schemas/OrganizationType'
        postalAddress:
          $ref: '#/components/schemas/PostalAddress'
        numberOfStatements:
          type: integer
        tINStatus:
          type: string
          description: |
            'The tax ID has been verified by the IRS. Possible values: Valid, NotValid, NotVerified, IRSWarning, TINApplied, NonTaxIdentifier, TINProvided.
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationIdentification'
        statements:
          type: array
          items:
            $ref: '#/components/schemas/AccountStatement'
    CustomerRelationshipPartyResponse:
      type: object
      properties:
        relationshipId:
          $ref: '#/components/schemas/AccountId'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/CustomerRelationshipParty'
    CustomerRelationshipPersonResponse:
      type: object
      properties:
        relationshipId:
          $ref: '#/components/schemas/AccountId'
        persons:
          type: array
          items:
            $ref: '#/components/schemas/CustomerRelationshipPersonDescriptor'
    CustomerRelationshipPersonDescriptor:
      required:
        - name
        - personId
      type: object
      properties:
        partyRelationType:
          $ref: '#/components/schemas/PartyRelationType'
        priorityIndicator:
          type: boolean
          description: "Indicates whether the related party is a priority\n      \n"
        personId:
          description: Person identifier code assigned by the account service institution.
          $ref: '#/components/schemas/Id'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PersonIdentification'
        name:
          $ref: '#/components/schemas/PartyName'
        shortName:
          $ref: '#/components/schemas/PartyShortName'
        placeAndDateOfBirth:
          $ref: '#/components/schemas/PlaceAndDateOfBirth'
        gender:
          $ref: '#/components/schemas/Gender'
        status:
          $ref: '#/components/schemas/PartyStatus'
        coveredByMilitaryLendingActIndicator:
          type: boolean
          description: |
            Indicates if the borrower is covered under the Military Lending Act.
        militaryMemberIndicator:
          type: boolean
          description: |
            Indicates whether the person is is service member/military.
        militaryPeriod:
          $ref: '#/components/schemas/DateTimePeriod'
        audit:
          $ref: '#/components/schemas/Audit'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
        structuredName:
          $ref: '#/components/schemas/StructuredName'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        employeeIndicator:
          type: boolean
          description: "Indicates whether is a bank employee. \n"
    CardProductName:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Specifies the product name of payment card.
      example: Visa Classic
    CardRelatedAccountResponse:
      required:
        - accounts
        - cardId
        - number
      type: object
      properties:
        cardId:
          $ref: '#/components/schemas/Id'
        fundingSourceType:
          $ref: '#/components/schemas/CardFundingSourceType'
        productName:
          $ref: '#/components/schemas/CardProductName'
        productId:
          $ref: '#/components/schemas/Id'
        digitalIndicator:
          $ref: '#/components/schemas/DigitalCardIndicator'
        number:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        accounts:
          type: array
          description: Card Related Accounts
          items:
            $ref: '#/components/schemas/RelatedAccount'
    PaymentCardTransactionResponse:
      required:
        - transactions
      type: object
      properties:
        cardId:
          $ref: '#/components/schemas/PaymentCardId'
        cardHolderId:
          description: Card holder person identifier
          $ref: '#/components/schemas/Id'
        productId:
          $ref: '#/components/schemas/Id'
        number:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        cardHolderType:
          $ref: '#/components/schemas/CardHolderType'
        nameOnCard:
          description: |
            Specifies the name on the card if overriding the name from the card holder.
          $ref: '#/components/schemas/PartyName'
        currentBalance:
          $ref: '#/components/schemas/Amount'
        availableBalance:
          $ref: '#/components/schemas/Amount'
        balances:
          type: array
          description: Balances status at payment date
          items:
            $ref: '#/components/schemas/Balance'
        transactions:
          type: array
          description: Payment Card Transactions
          items:
            $ref: '#/components/schemas/PaymentCardTransaction'
    PaymentCardTransaction:
      required:
        - creationDate
        - transactionId
      description: Posting to an account that results in an increase or decrease to a balance.
      type: object
      properties:
        transactionId:
          $ref: '#/components/schemas/TransactionId'
        creationDate:
          description: |
            Date and time at which the transaction is created.
          $ref: '#/components/schemas/DateAndTime'
        amount:
          $ref: '#/components/schemas/Amount'
        creditDebitIndicator:
          $ref: '#/components/schemas/CreditDebitIndicator'
        description:
          $ref: '#/components/schemas/Description'
        descriptionLines:
          type: array
          items:
            maxLength: 200
            minLength: 1
            type: string
            example: This is a description.
        status:
          $ref: '#/components/schemas/TransactionStatus'
        statusDescription:
          $ref: '#/components/schemas/Title'
        codes:
          type: array
          description: Transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        relatedAccounts:
          type: array
          description: Accounts involved in the internal transfer
          items:
            $ref: '#/components/schemas/RelatedAccount'
        parties:
          type: array
          description: Parties involve in the payment chain.
          items:
            $ref: '#/components/schemas/AccountParty'
        balances:
          type: array
          description: Partial balances after the transfer
          items:
            $ref: '#/components/schemas/Balance'
        transactionDates:
          type: array
          description: Specifies the date and time of transaction events.
          items:
            $ref: '#/components/schemas/SpotDate'
        paymentId:
          $ref: '#/components/schemas/PaymentId'
        reversalIndicator:
          $ref: '#/components/schemas/ReversalIndicator'
        remittanceInformation:
          $ref: '#/components/schemas/RemittanceInformation'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        valueDate:
          description: |
            Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit entry.
              Usage: If entry status is pending and value date is present, then the value date refers to an expected/requested value date.
          $ref: '#/components/schemas/DateAndTime'
        bookingDate:
          description: |
            Date and time when an entry is posted to an account on the account servicer's books.
            Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.
          $ref: '#/components/schemas/DateAndTime'
        charges:
          type: array
          description: "All charges and taxes applied to the transaction. Also can include interests if the bank does not discrimate between them. \n"
          items:
            $ref: '#/components/schemas/TransactionCharge'
        interests:
          type: array
          description: All interests included in the transaction amount.
          items:
            $ref: '#/components/schemas/TransactionInterest'
        cardId:
          $ref: '#/components/schemas/PaymentCardId'
        cardNumber:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        merchantCategoryCode:
          $ref: '#/components/schemas/MerchantCategoryCode'
        merchantName:
          description: Merchant Name
          $ref: '#/components/schemas/PartyShortName'
          example: Food Store
        merchantAddress:
          $ref: '#/components/schemas/PostalAddress'
        offerId:
          $ref: '#/components/schemas/OfferId'
        offerTitle:
          $ref: '#/components/schemas/OfferTitle'
    LoanRequest:
      required:
        - loanType
        - ownershipType
        - parties
      description: |
        Request of an amount of money in exchange for future repayment of the principal amount along with interest or other finance charges.
      type: object
      properties:
        loanBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
        loanType:
          $ref: '#/components/schemas/LoanType'
        recourseType:
          $ref: '#/components/schemas/LoanRecourseType'
        balanceType:
          $ref: '#/components/schemas/AccountBalanceType'
        lendingRelationType:
          $ref: '#/components/schemas/LoanLendingRelationType'
        securedLoanIndicator:
          type: boolean
          description: |
            Indicates whether the Loan is secure.
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        productId:
          $ref: '#/components/schemas/ProductId'
        pricingStrategyId:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        contract:
          $ref: '#/components/schemas/LoanContract'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountDetailedParty'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        principalAmount:
          description: |
            Amount of money borrowed (excluding interest).
          $ref: '#/components/schemas/PositiveAmount'
        interestAmount:
          description: |
            Interest on the principal amount.
          $ref: '#/components/schemas/PositiveAmount'
        maturityDate:
          description: |
            Current final repayment date. The maturity date is automatically calculated based upon the first scheduled payment date, the scheduled payment frequency, and the number of payments.
          $ref: '#/components/schemas/Date'
        mortgage:
          $ref: '#/components/schemas/MortgageLoan'
        rateForecastDays:
          type: integer
          description: "Adjustable Rate Mortgage (ARM) is a type of mortgage loan in which the interest rate changes periodically throughout the life of the loan. ARM Rate Forecast Days represent the number of days for which the lender provides a forecast of the ARM interest rate.       \n"
        projectedDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        pastDates:
          type: array
          description: |
            Loan relevant past dates. Possible values: EarlyInterventionNoticeDate.
          items:
            $ref: '#/components/schemas/SpotDate'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        codes:
          type: array
          description: "Codes to classify loans. \n"
          items:
            $ref: '#/components/schemas/GenericCode'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculation'
        statement:
          $ref: '#/components/schemas/FinancialStatement'
        profile:
          $ref: '#/components/schemas/AccountProfile'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        audit:
          $ref: '#/components/schemas/Audit'
        status:
          $ref: '#/components/schemas/LoanDetailedStatus'
        payment:
          $ref: '#/components/schemas/RepaymentDetails'
        cards:
          type: array
          description: |
            Payment cards related to the account. Debit cards, for loans or current accounts. Credit cards, for credit card accounts.
          items:
            $ref: '#/components/schemas/PaymentCardDescriptor'
    LoanIdentifiers:
      type: object
      properties:
        loanBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        loanType:
          $ref: '#/components/schemas/LoanType'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
    LoanRecourseType:
      maxLength: 35
      minLength: 1
      type: string
      description: "For indirect loans, the Recourse Code indicates the type of recourse that the financial institution has on the loan. Possible Values:\n NoRecourse, PartialRecourse, FullRecourse, FullRepurchase, PartialRepurchase, LimitedRepurchase, AsPerAgreement. \n"
      example: FullRecourse
    LoanLendingRelationType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Type of lending relationship betweent the lender and the borrower. Possible Values:
        Direct, Dealer, BoughtParticipation, SoldParticipation, ServicedParticipation, Indirect.
      example: Direct
    LoanContract:
      description: Contract by which an amount of money in exchange for future repayment of the principal amount along with interest or other finance charges.
      type: object
      properties:
        contractType:
          $ref: '#/components/schemas/LoanContractType'
        amount:
          description: |
            Loan amount as defined in the contract.
          $ref: '#/components/schemas/PositiveAmount'
        creditReduceByOptions:
          $ref: '#/components/schemas/LimitSubstractOptions'
        borrower:
          description: |
            Party that is specified as the buyer for this loan agreement.
          $ref: '#/components/schemas/Id'
        lender:
          description: |
            Party that is specified as the seller for this loan agreement.
          $ref: '#/components/schemas/Id'
        maturityDate:
          description: |
            Planned final repayment date at the time of issuance.
          $ref: '#/components/schemas/Date'
        effectiveDate:
          description: |
            The day a loan contract originally took effect and the day interest began to accrue.
          $ref: '#/components/schemas/Date'
        masterAgreement:
          $ref: '#/components/schemas/MasterAgreement'
        sencondLevelMasterAgreement:
          $ref: '#/components/schemas/MasterAgreement'
        collateral:
          $ref: '#/components/schemas/LoanCollateral'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculation'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/ChargeCalculation'
        trialPeriodAmount:
          description: |
            Amount during the trial period. The loan trial period is typically an agreed-upon phase within the loan contract during which the borrower has the option to explore and experience the loan product without being committed to the full loan amount.
          $ref: '#/components/schemas/PositiveAmount'
        tranches:
          type: array
          description: |
            Provides details on the tranches defined for the loan contract.
          items:
            $ref: '#/components/schemas/LoanContractTranche'
        term:
          description: "The loan term is the period of time that a loan is repaid, calculated from the date of the initial loan disbursement. \n"
          $ref: '#/components/schemas/AccountContractTerm'
        paymentSchedule:
          type: array
          description: |
            Schedule of the principal payments and interests defined for the loan contract.
          items:
            $ref: '#/components/schemas/RepaymentSchedule'
        billingOption:
          maxLength: 60
          type: string
          description: |
            AutomaticPayment:
            This billing option allows the borrower to choose the "automatic payment" method for their loan. The borrower will specify their preferred payment day, usually the 1st or the last day of the month. The lender will automatically debit the borrower's bank account on the specified payment day, without the need for any manual intervention.
            RegularBilling:
             In this billing option, the borrower will be responsible for making their loan payments manually. The borrower must pay the interest and the principal amount at regular intervals, usually monthly, quarterly, or annually.
            LumpSumPayment: In this billing option, the borrower is required to pay off the entire loan balance in a single payment, usually at the end of the loan term. This payment includes both the outstanding principal amount and the accumulated interest.
            NegotiatedBillingOption: In this option, the lender and the borrower may negotiate and agree on a unique payment schedule that best suits their individual financial situations. This option may involve customized payment frequencies, additional payment fees, or a combination of automatic and manual payment options.
            AcceleratedBillingOption: In this billing option, the borrower may choose to make extra loan payments, either as a lump sum or over a specific period. This can potentially reduce the overall interest payments and loan repayment period.
        syndicate:
          type: array
          description: |
            Loan offered by a group of lenders (called a syndicate).
          items:
            $ref: '#/components/schemas/SyndicatedLoanLender'
        intraCompanyLoanIndicator:
          type: boolean
          description: Indicates whether the loan is an intra-company loan.
          example: false
        agreementAccountId:
          description: |
            Account used as a reference for the Loan opening. Payments are auto-debited from this account.
          $ref: '#/components/schemas/Id'
        fromDateTime:
          description: Date and time at which the period starts.
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          description: Date and time at which the period ends.
          $ref: '#/components/schemas/DateAndTime'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        format:
          $ref: '#/components/schemas/DocumentFormat'
        title:
          $ref: '#/components/schemas/Title'
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          description: Signoff date of the document.
          $ref: '#/components/schemas/Date'
        issueDate:
          description: Issue date of the document.
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 100
          minLength: 1
          type: string
          description: Specifies the function of the document.
        jurisdiction:
          $ref: '#/components/schemas/Jurisdiction'
        contact:
          $ref: '#/components/schemas/ContactDetails'
        parties:
          $ref: '#/components/schemas/AccountContractRelatedParty'
        agreementType:
          $ref: '#/components/schemas/AgreementType'
        agreementSubtype:
          maxLength: 60
          minLength: 1
          type: string
          description: |
            Agreement detailed category.
    LoanContractType:
      maxLength: 40
      minLength: 1
      type: string
      description: "Type of the loan contract. Possible values: \nRegular, MasterAgreement, MasterCommitment, LineOfCredit, LetterOfCredit, Tranche, MasterMorgage.\n"
      example: Regular
    LimitSubstractOptions:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Indicates which balance is subtracted determine the available limit. Possible values: CurrentPrincipalBalance, CurrentMaximumCredit, FundsNotAvailableAfterPayOff, FundsAvailableAtPayOff, LongTermDebtAdvances.
    LoanCollateral:
      type: object
      properties:
        totalValue:
          description: Total of the collaterals as an amount.
          $ref: '#/components/schemas/PositiveAmount'
        loanToValueRatio:
          description: |
            The original loan amount divided by the original collateral value. For loans with maximum credit, the ratio is the original maximum credit divided by the original collateral value.
          $ref: '#/components/schemas/PositiveAmount'
        requiredPledge:
          description: |
            The pledge is the physical collateral, it is provided by the borrower as security for the loan. The required Pledge LTV on loans serves as a measure to ensure the stability of the banking system. By establishing a maximum LTV ratio, banks can maintain a level of resilience to potential risks associated with loans.
          $ref: '#/components/schemas/PositiveAmount'
        collaterals:
          type: array
          items:
            $ref: '#/components/schemas/Collateral'
      description: |
        Provides details of contract collaterals
    LoanContractTranche:
      type: object
      properties:
        sequenceNumber:
          maxLength: 20
          type: string
          description: |
            Unique sequence number of the tranche.
          example: "1"
        expectedDate:
          description: Expected tranche payment date.
          $ref: '#/components/schemas/Date'
        dueDate:
          description: Loan tranche due date.
          $ref: '#/components/schemas/Date'
        amount:
          description: |
            Amount of the tranche as defined in the loan contract.
          $ref: '#/components/schemas/PositiveAmount'
        duration:
          description: |
            Loan tranche duration.
          $ref: '#/components/schemas/TemporalDuration'
      description: |
        Provides details of a tranche defined for the loan contract.
    SyndicatedLoanLender:
      required:
        - lenderId
        - lenderType
      type: object
      properties:
        lenderId:
          description: |
            Party which provides an amount of money available to others to borrow.
          $ref: '#/components/schemas/Id'
        lenderType:
          $ref: '#/components/schemas/PartyType'
        amount:
          description: |
            Amount of the part in the syndicated loan.
          $ref: '#/components/schemas/PositiveAmount'
        share:
          description: |
            Share part in the syndicated loan.
          $ref: '#/components/schemas/PositivePercentage'
      description: |
        Loan offered by a group of lenders (called a syndicate) who work together to lend an amount of money to a single borrower.
    MortgageLoan:
      type: object
      properties:
        fHAStateNumber:
          maxLength: 2
          minLength: 1
          type: string
          description: |
            Federal Housing Administration's (FHA) two-digit state code, which is used to identify the state where a mortgage loan is originated or where the property is located.
          example: "99"
        fHACountyNumber:
          maxLength: 2
          minLength: 1
          type: string
          description: |
            Federal Housing Administration's (FHA) two-digit county code, which is used to identify the state where a mortgage loan is originated or where the property is located.
          example: "88"
        censusTract:
          $ref: '#/components/schemas/CensusTract'
        censusBlock:
          $ref: '#/components/schemas/CensusBlock'
        cBSACode:
          $ref: '#/components/schemas/CBSACode'
        cBSAType:
          $ref: '#/components/schemas/CBSAType'
        hMDAReportingIndicator:
          type: boolean
          description: "Indicates whether the loan is subject of HMDA reporting. The Home Mortgage Disclosure Act (HMDA) is a federal law in the United States that requires most mortgage lenders to report information about the mortgage loans they originate or purchase. \n"
        hMDAOccupationStatus:
          maxLength: 36
          type: string
          description: |
            Indicates whether the property associated with a mortgage loan is owner-occupied, investor-owned, or vacant. Possible Values: OwnerOccupied, InvestorOwned, Vacant.
          example: Vacant
        hMDAPropertyType:
          maxLength: 36
          type: string
          description: |
            Indicates the HMDA type of property associated with a mortgage loan. Possible values: OneToFourFamily, MultiFamily, SingleFamily, ManufacturedHome.
          example: OneToFourFamily
        propertyPurpose:
          maxLength: 36
          type: string
          description: |
            Indicates the type of property associated with a mortgage loan. Possible values: PrimaryResidence, SecondResidence, Investment.
          example: OneToFourFamily
        programs:
          maxLength: 36
          type: string
          description: |
            Mortgage programs are financing options offered by various government agencies, private lenders, and other organizations to help individuals and families purchase or refinance real estate. Possible Values: FHA, FmHA, VA, HomeImprovement, USDA, Jumbo.
          example: FHA
      description: |
        Mortgage information of a Loan
    LoanDetailedStatus:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/LoanStatus'
        instructionStatus:
          $ref: '#/components/schemas/InstructionStatus'
        statusDateAndTime:
          $ref: '#/components/schemas/DateAndTime'
        reason:
          $ref: '#/components/schemas/StatusReason'
        reasonDescription:
          $ref: '#/components/schemas/Description'
        details:
          type: array
          description: |
            Detailed account status. Possible Values: RegulationDD, Analysis, NewClassCode
          items:
            $ref: '#/components/schemas/GenericStatus'
        processEvents:
          type: array
          description: |
            Account process event list defined by the account servicer.
          items:
            $ref: '#/components/schemas/ProcessEvent'
        openDate:
          $ref: '#/components/schemas/Date'
        fundedDate:
          description: Date on which the loan was funded or closed
          $ref: '#/components/schemas/Date'
        disbursalDate:
          description: Date on which loan amount is disbursed.
          $ref: '#/components/schemas/Date'
        accrualStatus:
          $ref: '#/components/schemas/LoanNonAccrualStatus'
        nonAccrualProcess:
          $ref: '#/components/schemas/LoanNonAccrualProcess'
        renegotiatedIndicator:
          type: boolean
          description: |
            Indicates whether a loan is a product of renegotiation. If a loan has been renegotiated, it has replaced a previous loan that may have been in default.
        convertedLoanIndicator:
          type: boolean
          description: |
            Indicates whether the loan is coverted. In the context of a mortgage, a converted loan is a type of loan where the mortgage note's face value can be increased, or decreased, at the option of the lender.
      description: Specifies the current state of a loan.
    InstructionStatus:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Details about the processing of a request. Possible values are: Rejected, Completed, Queued.
      example: Queued
    LoanNonAccrualStatus:
      maxLength: 17
      minLength: 1
      type: string
      description: |
        Specifies the current Non Accrual state of a Loan. Possible values names are: NonAccrual, Accrual.
      example: NonAccrual
    LoanNonAccrualProcess:
      maxLength: 36
      minLength: 1
      type: string
      description: |
        Specifies the current Non Accrual process of a Loan. Possible values names are: PastDueXDays, InterestAutomaticAdjustment, ManuallyWithAutomaticReturn, ManuallyWithOutAutomaticReturn, PastDueWillOutAutomatic.
      example: PastDueXDays
    RepaymentDetails:
      description: "Group of transactions by status, code and duration."
      type: object
      properties:
        numberOfPayments:
          type: integer
          description: Number of payments.
        next:
          $ref: '#/components/schemas/RepaymentSchedule'
        last:
          $ref: '#/components/schemas/Repayment'
        alternate:
          $ref: '#/components/schemas/RepaymentSchedule'
        regular:
          $ref: '#/components/schemas/RepaymentSchedule'
        payments:
          type: array
          description: "All the payments done, scheduled or not. \n"
          items:
            $ref: '#/components/schemas/Repayment'
        frequency:
          description: |
            How often principal payments are due.
          $ref: '#/components/schemas/Frequency'
        interestFrequency:
          description: |
            How often interest payments are due.
          $ref: '#/components/schemas/Frequency'
        draftDayAdjuster:
          description: |
            Number of days before or after an automatic payment is debited from an account.
          $ref: '#/components/schemas/Day'
        automaticIndicator:
          type: boolean
          description: |
            Indicates whether, prior to the loan going past due, a payment is automatic generated.
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        firstPaymentDate:
          description: |
            First payment date
          $ref: '#/components/schemas/Date'
        bill:
          $ref: '#/components/schemas/RepaymentBillDetails'
        principalVarianceOptions:
          type: array
          description: |
            Indicates whether, prior to the loan going past due, a payment is  generated using previous extra principal payments if any curtailments have been made.
          items:
            maxLength: 70
            minLength: 1
            type: string
            description: |
              Possible Values: OnPastDueHistoryDay, OnPastDueReportDays, LateChargeDays.
        codes:
          type: array
          description: Additional relationship codes.
          items:
            $ref: '#/components/schemas/GenericCode'
        splitOptions:
          type: array
          description: |
            Indicates the split payment options.
          items:
            maxLength: 70
            minLength: 1
            type: string
            description: |
              Possible Values: Default, FirstCurrentInterest, SecondPrincipal, FirstBilledInterest, SecondInsurance, ThirdPrincipal.
        pastDueTimes:
          type: array
          description: |
            Indicates the past due times on different periods.
          items:
            $ref: '#/components/schemas/PastDueTimes'
    PastDueTimes:
      properties:
        number:
          type: integer
          description: |
            Number of times a payment is past due on a period.
        fromDay:
          $ref: '#/components/schemas/Day'
        toDay:
          $ref: '#/components/schemas/Day'
        authorizedAccount:
          description: |
            Specifies the account on which the power of attorney applies.
          $ref: '#/components/schemas/AccountId'
      description: |
        Counts the times an obligations is past due
    Loan:
      required:
        - loanType
        - ownershipType
        - parties
      description: |
        An account through which a party is able to repay a bank loan.
      type: object
      properties:
        amountCalculationDate:
          description: Specifies the date and time at which all the balances amount were calculated.
          $ref: '#/components/schemas/DateAndTime'
        transactionDates:
          type: array
          description: Specifies the date and time of transaction events.
          items:
            $ref: '#/components/schemas/SpotDate'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
        loanBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
        loanType:
          $ref: '#/components/schemas/LoanType'
        recourseType:
          $ref: '#/components/schemas/LoanRecourseType'
        balanceType:
          $ref: '#/components/schemas/AccountBalanceType'
        lendingRelationType:
          $ref: '#/components/schemas/LoanLendingRelationType'
        securedLoanIndicator:
          type: boolean
          description: |
            Indicates whether the Loan is secure.
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        productId:
          $ref: '#/components/schemas/ProductId'
        pricingStrategyId:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/AccountName'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        contract:
          $ref: '#/components/schemas/LoanContract'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountDetailedParty'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        principalAmount:
          description: |
            Amount of money borrowed (excluding interest).
          $ref: '#/components/schemas/PositiveAmount'
        interestAmount:
          description: |
            Interest on the principal amount.
          $ref: '#/components/schemas/PositiveAmount'
        maturityDate:
          description: |
            Current final repayment date. The maturity date is automatically calculated based upon the first scheduled payment date, the scheduled payment frequency, and the number of payments.
          $ref: '#/components/schemas/Date'
        mortgage:
          $ref: '#/components/schemas/MortgageLoan'
        rateForecastDays:
          type: integer
          description: "Adjustable Rate Mortgage (ARM) is a type of mortgage loan in which the interest rate changes periodically throughout the life of the loan. ARM Rate Forecast Days represent the number of days for which the lender provides a forecast of the ARM interest rate.       \n"
        projectedDates:
          type: array
          items:
            $ref: '#/components/schemas/SpotDate'
        pastDates:
          type: array
          description: |
            Loan relevant past dates. Possible values: EarlyInterventionNoticeDate.
          items:
            $ref: '#/components/schemas/SpotDate'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/Restriction'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
        codes:
          type: array
          description: "Codes to classify loans. \n"
          items:
            $ref: '#/components/schemas/GenericCode'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/InterestCalculation'
        statement:
          $ref: '#/components/schemas/FinancialStatement'
        profile:
          $ref: '#/components/schemas/AccountProfile'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        audit:
          $ref: '#/components/schemas/Audit'
        status:
          $ref: '#/components/schemas/LoanDetailedStatus'
        payment:
          $ref: '#/components/schemas/RepaymentDetails'
        cards:
          type: array
          description: |
            Payment cards related to the account. Debit cards, for loans or current accounts. Credit cards, for credit card accounts.
          items:
            $ref: '#/components/schemas/PaymentCardDescriptor'
        accountId:
          readOnly: true
          $ref: '#/components/schemas/AccountId'
        unscheduledPrincipalReduction:
          description: |
            Principal reduction, also known as a haircut, is a type of financial engineering tool that allows lenders to reduce the principal amount of a loan before the loan has reached its full maturity. The unscheduled principal reduction is the amount of the reduction that is applied to the principal balance as a result of the lender's decision to reduce the principal amount of the loan outside of the reduction schedule agreed upon by the lender and the borrower.
          $ref: '#/components/schemas/PositiveAmount'
        totalReappliedReduction:
          description: |
            The Reapplied Reduction is the amount of the reduction that is applied to the principal balance after a scheduled principal reduction event has occurred.
          $ref: '#/components/schemas/PositiveAmount'
        accruedCapitalizationAmount:
          description: |
            Amount of unpaid interest (on bonds which have defaulted and have subsequently restructured), which is capitalized and added to the original principal amount of the bond.
          $ref: '#/components/schemas/PositiveAmount'
        reviewDateEvents:
          type: array
          items:
            $ref: '#/components/schemas/LoanReviewDateEvent'
        payOff:
          $ref: '#/components/schemas/LoanPayOffDetail'
    LoanReviewDateEvent:
      maxLength: 40
      minLength: 1
      type: string
      description: |
        Indicates the changes on a loan when the Review Date is passed. Possible Values:
        AdvanceTransactionDisable, the AdvanceTransaction Restriction will be disabel; PaymentDisable, the Payment Restriction will be disabel; EligibleForHAMP,  indicates the loan is eligible for the Home Affordability Modification Program (HAMP); 60MonthEscrow, indicates that during escrow analysis, escrow deficits will be spread over a 60 month period beginning on the Review Date; 12MonthEscrow, indicates that during escrow analysis, escrow deficits will be spread over a 12 month period beginning on the Review Date; HAMPNotUsed, indicates the Home Affordability Modification Program (HAMP) is not being used for loan modification; BACurtailmentCharge, indicates the loan is eligible for the SBA Curtailment Charge. During the repayment period the loan is to be charged the 21-day reducing penalty for any principal curtailments over 20% of the principal balance or a payoff.
      example: EligibleForHAMP
    LoanPayOffDetail:
      type: object
      properties:
        balanceOptions:
          type: array
          description: |
            Indicates pay-off options for the loan.
          items:
            maxLength: 70
            minLength: 1
            type: string
            description: |
              Possible Values: NotNegativeInterest, NotNegativeEscrow, IncludeNegativeInterest, IncludeEscrow, IncludeNegativeEscrow.
        displayIndicator:
          type: boolean
          description: |
            Indicates wether the pay-off amount is displayed.
        calculationMethodOptions:
          type: array
          description: |
            Indicates method options for the pay off calculation.
          items:
            maxLength: 70
            minLength: 1
            type: string
            description: |
              Possible Values: Default, ScheduledBalance, 365Days, 12DaysInPeriod, OmitCurrentInterest, 12DaysInPeriod, IncludeInterestDueDate, CurrentBalance, 360Days
      description: |
        Detail information of Loan Pay Off
    LoanBalanceResponse:
      type: object
      properties:
        loanId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
    LoanTransactionsResponse:
      type: object
      properties:
        loanId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        loanType:
          $ref: '#/components/schemas/LoanType'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        currentBalance:
          $ref: '#/components/schemas/Amount'
        availableBalance:
          $ref: '#/components/schemas/Amount'
        transactions:
          type: array
          description: Loan Transactions
          items:
            $ref: '#/components/schemas/Transaction'
    LoanIdentifiersResponse:
      type: object
      properties:
        loanId:
          $ref: '#/components/schemas/AccountId'
        loanType:
          $ref: '#/components/schemas/LoanType'
        accountBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
    LoanPartyResponse:
      type: object
      properties:
        loanId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        parties:
          type: array
          items:
            $ref: '#/components/schemas/AccountDetailedParty'
    LoanPaymentCardResponse:
      type: object
      properties:
        loanId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCard'
        amountCalculationDate:
          description: Specifies the date and time at which all the balances amount were calculated.
          $ref: '#/components/schemas/DateAndTime'
        transactionDates:
          type: array
          description: Specifies the date and time of transaction events.
          items:
            $ref: '#/components/schemas/SpotDate'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
    LedgerAccountNumber:
      maxLength: 30
      type: string
      description: |
        Ledger account number used to identify different accounts. Also used for grouping and categorizing accounts. To make it easy for readers to locate specific accounts or to know what they're looking at instantly, each account typically contains human readable codes.
      example: 1-001
    LedgerAccountDescriptor:
      required:
        - accountId
        - accountNumber
        - accountType
        - name
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/LedgerAccountNumber'
        accountBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountType:
          $ref: '#/components/schemas/LedgerAccountType'
        name:
          $ref: '#/components/schemas/AccountName'
        status:
          $ref: '#/components/schemas/AccountStatus'
    LedgerAccountType:
      maxLength: 35
      minLength: 1
      type: string
      description: |
        Type of the Ledger Account or Internal Bank Account. Possible values: GeneralLedger, DetailedLedger, Holding, Mirrow, Clearing, CheckDisbursed.
      example: GeneralLedger
    LedgerAccountRequest:
      required:
        - accountType
        - name
      type: object
      properties:
        accountType:
          $ref: '#/components/schemas/LedgerAccountType'
        balanceType:
          $ref: '#/components/schemas/AccountBalanceType'
        accountCategory:
          $ref: '#/components/schemas/LedgerCategoryId'
        name:
          $ref: '#/components/schemas/AccountName'
        number:
          $ref: '#/components/schemas/LedgerAccountNumber'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
    LedgerCategoryId:
      maxLength: 40
      minLength: 1
      type: string
      description: "Unique identifier for the ledger account category. Is a grouping of Ledger Accounts. Its balance is equal to the sum of the balances of all contained accounts. \n"
      example: "1"
    LedgerAccount:
      required:
        - accountId
        - status
        - accountType
        - name
      description: |
        An account of the Chart of Accounts. Detailed or General Ledger. Also can represent holding accounts, mirror accounts or working accounts that are required for the booking of a part of a transaction in the bank world. This is typically the case when amounts cannot immediately be booked on a final account for duty seggregation or processing reasons or in order to mirror bookings on external accounts, like nostro accounts. mirrow or holding account.
      type: object
      properties:
        accountType:
          $ref: '#/components/schemas/LedgerAccountType'
        balanceType:
          $ref: '#/components/schemas/AccountBalanceType'
        accountCategory:
          $ref: '#/components/schemas/LedgerCategoryId'
        name:
          $ref: '#/components/schemas/AccountName'
        number:
          $ref: '#/components/schemas/LedgerAccountNumber'
        accountPurpose:
          $ref: '#/components/schemas/Description'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        relatedAccounts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedAccount'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
        accountId:
          readOnly: true
          $ref: '#/components/schemas/AccountId'
        accountBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/LedgerAccountBalance'
        status:
          $ref: '#/components/schemas/AccountStatus'
    LedgerAccountBalance:
      required:
        - amount
        - balanceName
      type: object
      properties:
        balanceName:
          $ref: '#/components/schemas/LedgerBalanceName'
        amount:
          $ref: '#/components/schemas/Amount'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        calculationDate:
          description: Specifies the date and time at which the balance is calculated.
          $ref: '#/components/schemas/DateAndTime'
      description: |
        Numerical representation of the net increases and decreases in an account at a specific point in time.
    LedgerBalanceName:
      maxLength: 17
      minLength: 1
      type: string
      description: |
        Specifies the nature of the ledger balance. Possible Values are:  Closing, Pending, Posted, Available.
      example: Closing
    LedgerAccountBalanceResponse:
      required:
        - accountId
        - accountNumber
        - accountType
        - balances
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/LedgerAccountNumber'
        accountType:
          $ref: '#/components/schemas/LedgerAccountType'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/LedgerAccountBalance'
    LedgerAccountTransactionsResponse:
      required:
        - accountId
        - transactions
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/LedgerAccountNumber'
        accountType:
          $ref: '#/components/schemas/LedgerAccountType'
        currentBalance:
          $ref: '#/components/schemas/Amount'
        transactions:
          type: array
          description: Ledger Account Transactions
          items:
            $ref: '#/components/schemas/LedgerTransaction'
    LedgerTransaction:
      required:
        - creationDate
        - status
        - transactionId
      type: object
      properties:
        transactionId:
          $ref: '#/components/schemas/TransactionId'
        amount:
          $ref: '#/components/schemas/Amount'
        creditDebitIndicator:
          $ref: '#/components/schemas/CreditDebitIndicator'
        description:
          $ref: '#/components/schemas/Description'
        status:
          $ref: '#/components/schemas/TransactionStatus'
        reversalIndicator:
          $ref: '#/components/schemas/ReversalIndicator'
        creationDate:
          description: |
            Date and time at which the transaction is created.
          $ref: '#/components/schemas/DateAndTime'
        valueDate:
          description: |
            Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit entry.
              Usage: If entry status is pending and value date is present, then the value date refers to an expected/requested value date.
          $ref: '#/components/schemas/DateAndTime'
        bookingDate:
          description: |
            Date and time when an entry is posted to an account on the account servicer's books.
            Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.
          $ref: '#/components/schemas/DateAndTime'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        currentBalance:
          description: The current balance at the transaction creation date.
          $ref: '#/components/schemas/Amount'
        supplementaryData:
          $ref: '#/components/schemas/SupplementaryData'
      description: Posting to an account that results in an increase or decrease to a balance.
    InternalTransfer:
      required:
        - entries
      description: |
        An internal transfer move funds between ledger accounts, or between a holding account and a final account. To create a balanced internal transfer, there must be at least one credit entry and one debit entry, the sum of all credit entry amounts must equal the sum of all debit entry amounts.
      type: object
      properties:
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        transferId:
          description: |
            Trace identification of the transaction entry list. Could be provided by the client and may not be useful to identify a unique transaction.
          $ref: '#/components/schemas/Id'
        reversalIndicator:
          $ref: '#/components/schemas/ReversalIndicator'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/InternalTransferEntry'
        purpose:
          $ref: '#/components/schemas/Description'
        descriptionLines:
          type: array
          items:
            maxLength: 200
            minLength: 1
            type: string
            example: This is a description.
        reason:
          $ref: '#/components/schemas/PaymentPurpose'
        settlement:
          $ref: '#/components/schemas/TransferSettlement'
        check:
          type: array
          items:
            $ref: '#/components/schemas/Check'
        cash:
          $ref: '#/components/schemas/Cash'
        printer:
          type: string
          description: |
            Check printer used.
        dispenser:
          type: string
          description: |
            Cash or check dispenser used.
        date:
          description: |
            Creation date of the internal transfer.
          $ref: '#/components/schemas/DateAndTime'
        status:
          $ref: '#/components/schemas/InternalTransferStatus'
        charges:
          type: array
          description: "All charges and taxes applied to the transaction. Also can include interests if the bank does not discrimate between them. \n"
          items:
            $ref: '#/components/schemas/TransactionCharge'
        relatedAccounts:
          type: array
          description: Accounts involved in the internal transfer
          items:
            $ref: '#/components/schemas/RelatedAccount'
        parties:
          type: array
          description: Parties involve in the payment chain.
          items:
            $ref: '#/components/schemas/AccountParty'
        balances:
          type: array
          description: Partial balances after the transfer
          items:
            $ref: '#/components/schemas/Balance'
    InternalTransferRequest:
      required:
        - entries
      description: |
        An internal transfer move funds between ledger accounts, or between a holding account and a final account. To create an internal transfer, there must be at least one credit  entry and one debit entry. Additionally, the sum of all credit entry amounts must equal the sum of all debit entry amounts.
      type: object
      properties:
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        transferId:
          description: |
            Trace identification of the transaction entry list. Could be provided by the client and may not be useful to identify a unique transaction.
          $ref: '#/components/schemas/Id'
        reversalIndicator:
          $ref: '#/components/schemas/ReversalIndicator'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/InternalTransferEntry'
        purpose:
          $ref: '#/components/schemas/Description'
        descriptionLines:
          type: array
          items:
            maxLength: 200
            minLength: 1
            type: string
            example: This is a description.
        reason:
          $ref: '#/components/schemas/PaymentPurpose'
        settlement:
          $ref: '#/components/schemas/TransferSettlement'
        check:
          type: array
          items:
            $ref: '#/components/schemas/Check'
        cash:
          $ref: '#/components/schemas/Cash'
        printer:
          type: string
          description: |
            Check printer used.
        dispenser:
          type: string
          description: |
            Cash or check dispenser used.
    InternalTransferEntry:
      description: |
        Represents an accounting entry within a parent ledger transaction.
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        amount:
          description: |
            Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
          $ref: '#/components/schemas/Amount'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        creditDebitIndicator:
          $ref: '#/components/schemas/CreditDebitIndicator'
        reversalIndicator:
          $ref: '#/components/schemas/ReversalIndicator'
        account:
          $ref: '#/components/schemas/TransactionAccount'
        status:
          $ref: '#/components/schemas/InternalTransferStatus'
        entryId:
          $ref: '#/components/schemas/Id'
    TransactionAccount:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
    InternalTransferStatus:
      maxLength: 60
      minLength: 1
      type: string
      description: |
        Indicates the status of an internal transfer. Possible values:
         Received, Rejected, Pending, Accepted, MemoPosted, HardPosted, Cleared, Expired, Cancelled, Corrected, Reverse, Suspended, Waived.
              A memo post is a transaction that has not yet been posted but is included in the current day’s available balance until the nightly ledger update. During the ledger update, the transaction is processed and Cleared for the next day.
         The amount of a transaction is temporarily added to or subtracted from the current available balance until the nightly processing at which time the transaction is scheduled to post the next business day.
        The reduction in your Current Balance by a Memo Post debit does not remove funds from your account; it only reduces the amount of your then Current Balance.
      example: Accepted
    TransferSettlement:
      type: object
      properties:
        postingDate:
          description: |
            Future transfer posting date. If the posting date is left blank, it will be assumed to be the current date. When creating a MemoPost for an outgoing payment, after this date, the memo record is automatically expired. You can see this change from the status, which is changed from MemoPosted to Expired.
          $ref: '#/components/schemas/DateAndTime'
        postingType:
          $ref: '#/components/schemas/PostingType'
        time:
          description: |
            Time of the day of the posting date.
          $ref: '#/components/schemas/TimeOfTheDay'
        frequency:
          $ref: '#/components/schemas/Frequency'
        memopostedIndicator:
          type: boolean
          description: |
            Indicates whether the internal transfer has been memoposted.
      description: Transfer settlement information.
    InternalTransferResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/InternalTransfer'
        metadata:
          $ref: '#/components/schemas/Metadata'
      description: Internal Response response data and metadata.
    InternalTransferCancellationRequest:
      description: "Request the cancellation of an internal transfer. \n"
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        cancellationReason:
          $ref: '#/components/schemas/Description'
    InternalTransferConfirmationRequest:
      type: object
      properties:
        confirmationReason:
          $ref: '#/components/schemas/Description'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
      description: |
        Request the settlement from memo posted ot hard posted.
    RewardProgram:
      required:
        - programId
      type: object
      properties:
        programId:
          $ref: '#/components/schemas/Id'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/RewardProgramBalance'
        status:
          $ref: '#/components/schemas/RewardProgramStatus'
        programTitle:
          $ref: '#/components/schemas/Title'
        name:
          $ref: '#/components/schemas/RewardProgramName'
        programType:
          $ref: '#/components/schemas/RewardProgramType'
        accounts:
          type: array
          description: Accounts related to the reward program
          items:
            $ref: '#/components/schemas/RelatedAccount'
        cards:
          type: array
          description: "Payment cards related to the reward program. \n"
          items:
            $ref: '#/components/schemas/RewardProgramPaymentCard'
        parties:
          type: array
          description: "Payment cards related to the reward program. \n"
          items:
            $ref: '#/components/schemas/RewardProgramPaymentCard'
      description: |
        A Reward Program is a system to reward customers for their repeat business, engagement, or specific actions.
    RewardProgramRequest:
      type: object
      properties:
        programTitle:
          $ref: '#/components/schemas/Title'
        name:
          $ref: '#/components/schemas/RewardProgramName'
        programType:
          $ref: '#/components/schemas/RewardProgramType'
        accounts:
          type: array
          description: Accounts related to the reward program
          items:
            $ref: '#/components/schemas/RelatedAccount'
        cards:
          type: array
          description: "Payment cards related to the reward program. \n"
          items:
            $ref: '#/components/schemas/RewardProgramPaymentCard'
        parties:
          type: array
          description: "Payment cards related to the reward program. \n"
          items:
            $ref: '#/components/schemas/RewardProgramPaymentCard'
      description: |
        A Reward Program is a system to reward customers for their repeat business, engagement, or specific actions.
    RewardProgramName:
      maxLength: 50
      minLength: 1
      type: string
      description: "Specifies the a Pascal Case name for the reward program. \n"
    RewardProgramType:
      type: string
      description: "The type of benefits or incentives offered to customers, which can include points, discounts, cash back, merchandise, or special privileges. Possible values: Points, Discounts, CashBack, Merchandise, Privileges. \n"
    RewardProgramPaymentCard:
      required:
        - cardId
      type: object
      properties:
        cardId:
          $ref: '#/components/schemas/PaymentCardId'
        cardHolderId:
          $ref: '#/components/schemas/Id'
        nameOnCard:
          description: |
            Specifies the card holder name on the card.
          $ref: '#/components/schemas/PartyName'
        brand:
          maxLength: 35
          type: string
          description: |
            Brand name of the card.
          example: Visa
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCardIdentification'
        productId:
          $ref: '#/components/schemas/Id'
        number:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        cardHolderType:
          $ref: '#/components/schemas/CardHolderType'
        fundingSourceType:
          $ref: '#/components/schemas/CardFundingSourceType'
        businessIndicator:
          type: boolean
          description: Indicates whether the payment card is business or not.
        cardBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        startRewardDate:
          $ref: '#/components/schemas/Date'
        expiryRewardDate:
          $ref: '#/components/schemas/Date'
        balances:
          type: array
          description: Reward balances
          items:
            $ref: '#/components/schemas/RewardProgramBalance'
        status:
          $ref: '#/components/schemas/CardStatus'
    RewardProgramBalance:
      type: object
      properties:
        fromDateTime:
          description: Date and time at which the period starts.
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          description: Date and time at which the period ends.
          $ref: '#/components/schemas/DateAndTime'
        periodNumber:
          type: integer
          description: Sequence number of the period.
        periodName:
          $ref: '#/components/schemas/PeriodName'
        balanceName:
          $ref: '#/components/schemas/RewardProgramBalanceName'
        amount:
          $ref: '#/components/schemas/Amount'
        points:
          type: integer
          description: "Number of points \n"
        calculationDate:
          description: Specifies the date and time at which the balance is calculated.
          $ref: '#/components/schemas/DateAndTime'
    RewardProgramBalanceName:
      maxLength: 50
      minLength: 1
      type: string
      description: |
        Specifies the nature of the reward program balance. Possible values: Accrued, Redeemed, Available, Vested.
      example: Available
    RewardProgramStatus:
      maxLength: 50
      minLength: 1
      type: string
      description: "Specifies the status of the reward program. Possible values: Qualify, Elite, Standard, Silver, Gold. \n"
      example: Available
    PersonRewardProgramResponse:
      required:
        - personId
        - personName
        - rewardPrograms
      type: object
      properties:
        personId:
          $ref: '#/components/schemas/Id'
        personName:
          $ref: '#/components/schemas/PartyName'
        rewardPrograms:
          type: array
          items:
            $ref: '#/components/schemas/RewardProgram'
    AccountDocument:
      description: |
        Document or agreement details related to accounts, account owners and financial instruments.
      type: object
      properties:
        fromDateTime:
          description: Date and time at which the period starts.
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          description: Date and time at which the period ends.
          $ref: '#/components/schemas/DateAndTime'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        format:
          $ref: '#/components/schemas/DocumentFormat'
        title:
          $ref: '#/components/schemas/Title'
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          description: Signoff date of the document.
          $ref: '#/components/schemas/Date'
        issueDate:
          description: Issue date of the document.
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 100
          minLength: 1
          type: string
          description: Specifies the function of the document.
        jurisdiction:
          $ref: '#/components/schemas/Jurisdiction'
        contact:
          $ref: '#/components/schemas/ContactDetails'
        parties:
          $ref: '#/components/schemas/AccountContractRelatedParty'
        agreementType:
          $ref: '#/components/schemas/AgreementType'
        agreementSubtype:
          maxLength: 60
          minLength: 1
          type: string
          description: |
            Agreement detailed category.
        documentId:
          $ref: '#/components/schemas/Id'
        identifiers:
          type: array
          description: |
            Unique indentification of the collateral. Possible scheme names: NoteNumber.
          items:
            $ref: '#/components/schemas/GenericIdentification'
        status:
          $ref: '#/components/schemas/AccountContractStatus'
        targetClosingDate:
          description: |
            Date on which the account and related services are expected to cease for the account owner.
          $ref: '#/components/schemas/Date'
        targetGoLiveDate:
          description: |
            Date on which the account and related services are expected to be operational for the account owner.
          $ref: '#/components/schemas/Date'
        masterAgreement:
          $ref: '#/components/schemas/MasterAgreement'
        term:
          description: |
            The payment term for the account premium.
          $ref: '#/components/schemas/AccountContractTerm'
        premium:
          description: |
            Amount of the customer premium.
          $ref: '#/components/schemas/PositiveAmount'
        coverageAmount:
          description: |
            Total amount of money the user is insured for.
          $ref: '#/components/schemas/PositiveAmount'
        productId:
          $ref: '#/components/schemas/ProductId'
        codes:
          type: array
          items:
            $ref: '#/components/schemas/GenericCode'
        projectedDates:
          type: array
          description: |
            Contract dates. Possible values:  LossMitigation
          items:
            $ref: '#/components/schemas/SpotDate'
        relatedAccounts:
          type: array
          description: Accounts involved on the contract document.
          items:
            $ref: '#/components/schemas/DocumentRelatedAccount'
    AccountDocumentRequest:
      description: |
        Document or agreement details related to accounts, account owners and financial instruments.
      type: object
      properties:
        fromDateTime:
          description: Date and time at which the period starts.
          $ref: '#/components/schemas/DateAndTime'
        upToDateTime:
          description: Date and time at which the period ends.
          $ref: '#/components/schemas/DateAndTime'
        documentReference:
          maxLength: 35
          minLength: 1
          type: string
          description: Document location.
        format:
          $ref: '#/components/schemas/DocumentFormat'
        title:
          $ref: '#/components/schemas/Title'
        version:
          maxLength: 18
          minLength: 1
          type: string
          description: Document version indentification.
        signOffDate:
          description: Signoff date of the document.
          $ref: '#/components/schemas/Date'
        issueDate:
          description: Issue date of the document.
          $ref: '#/components/schemas/Date'
        purpose:
          maxLength: 100
          minLength: 1
          type: string
          description: Specifies the function of the document.
        jurisdiction:
          $ref: '#/components/schemas/Jurisdiction'
        contact:
          $ref: '#/components/schemas/ContactDetails'
        parties:
          $ref: '#/components/schemas/AccountContractRelatedParty'
        agreementType:
          $ref: '#/components/schemas/AgreementType'
        agreementSubtype:
          maxLength: 60
          minLength: 1
          type: string
          description: |
            Agreement detailed category.
        documentId:
          $ref: '#/components/schemas/Id'
        identifiers:
          type: array
          description: |
            Unique indentification of the collateral. Possible scheme names: NoteNumber.
          items:
            $ref: '#/components/schemas/GenericIdentification'
        status:
          $ref: '#/components/schemas/AccountContractStatus'
        targetClosingDate:
          description: |
            Date on which the account and related services are expected to cease for the account owner.
          $ref: '#/components/schemas/Date'
        targetGoLiveDate:
          description: |
            Date on which the account and related services are expected to be operational for the account owner.
          $ref: '#/components/schemas/Date'
        masterAgreement:
          $ref: '#/components/schemas/MasterAgreement'
        term:
          description: |
            The payment term for the account premium.
          $ref: '#/components/schemas/AccountContractTerm'
        premium:
          description: |
            Amount of the customer premium.
          $ref: '#/components/schemas/PositiveAmount'
        coverageAmount:
          description: |
            Total amount of money the user is insured for.
          $ref: '#/components/schemas/PositiveAmount'
        productId:
          $ref: '#/components/schemas/ProductId'
        codes:
          type: array
          items:
            $ref: '#/components/schemas/GenericCode'
        projectedDates:
          type: array
          description: |
            Contract dates. Possible values:  LossMitigation
          items:
            $ref: '#/components/schemas/SpotDate'
        relatedAccounts:
          type: array
          description: Accounts involved on the contract document.
          items:
            $ref: '#/components/schemas/DocumentRelatedAccount'
    DocumentRelatedAccount:
      required:
        - accountId
      type: object
      properties:
        accountRelationType:
          $ref: '#/components/schemas/AccountRelationType'
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          readOnly: true
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          readOnly: true
          $ref: '#/components/schemas/RelatedAccountType'
        name:
          readOnly: true
          $ref: '#/components/schemas/AccountName'
        balances:
          type: array
          description: Account balances
          items:
            $ref: '#/components/schemas/Balance'
        limits:
          type: array
          items:
            $ref: '#/components/schemas/LimitDescriptor'
        restrictions:
          type: array
          description: Party restrictions on the account capabilities
          items:
            $ref: '#/components/schemas/Restriction'
        validityPeriod:
          $ref: '#/components/schemas/DatePeriod'
        renewalIndicator:
          type: boolean
          description: Indicates whether the account renewals at the end of the validity period.
    LimitDescriptor:
      required:
        - name
      type: object
      properties:
        name:
          maxLength: 60
          minLength: 1
          type: string
          description: "Name of the limit in PascalCase. Possible values: NSF, UncollectedFunds, Overdraft, CreditLimit, CreditCard, Withdraw, Deposit, CreditCardWithdraw, ForeignFeesWaived, CreditTransactions, DebitTransactions, ATMSurchargeReimbursement, \n  CashAdvance, ACHInTransfers, ACHOutTransfers, OverdraftProgram, Threshold, MinimumTransfer. \n"
          example: CreditLimit
        limitType:
          $ref: '#/components/schemas/LimitType'
        channelType:
          maxLength: 30
          minLength: 1
          type: string
          description: |
            Channel type for which this limit applies. Possible values: OnlineATM, OfflineATM, ATM, SaleTerminal, : Check, ACHDebit, DebitCard, BillPayment.
        amount:
          description: Amount limit
          $ref: '#/components/schemas/Amount'
        currency:
          description: Amount limit currency.
          $ref: '#/components/schemas/CurrencyCode'
        number:
          type: integer
          description: Number limit.
        enableIndicator:
          type: boolean
          description: Indicates whether the limit is enabled or not.
          example: true
        percentageIndicator:
          type: boolean
          description: |
            Indicates if the limit is calculated as a percentage.
        percentage:
          $ref: '#/components/schemas/Percentage'
        periodicity:
          description: Renewal frequency
          $ref: '#/components/schemas/Frequency'
        validityPeriod:
          $ref: '#/components/schemas/DateTimePeriod'
        usedAmount:
          description: Amount limit used
          $ref: '#/components/schemas/Amount'
        usedNumber:
          type: integer
          description: Number limit used.
        usedPercentage:
          $ref: '#/components/schemas/Percentage'
      description: |
        Value used for risk containment.
    DatePeriod:
      properties:
        fromDate:
          description: Date at which the period starts.
          $ref: '#/components/schemas/Date'
        upToDate:
          description: Date at which the period ends.
          $ref: '#/components/schemas/Date'
    Address:
      type: object
      properties:
        addressId:
          $ref: '#/components/schemas/Id'
        parties:
          type: array
          description: Parties related to an address
          items:
            $ref: '#/components/schemas/AddressBookParty'
        addressCode:
          type: string
          description: |
            This code is used to identify parties that share the same address or to associate an existing address with a specific party. Providing this code eliminates the need to separately enter the address details.
        addressBookIndicator:
          type: string
          description: |
            If true, the address is kept in the system even if the person is no longer a customer.
        addressType:
          type: string
          description: |
            Specifies the type of address, in PascalCase form. Possible values are:  PhysicalAddress, Postal, POBox, Residential, Permanent, Temporary, Alternative, Previous.
          example: Postal
        addressPurpose:
          type: string
          description: "Specifies the purpose of an address, in PascalCase form. Possible values are: \nMailTo, \nDeliveryTo,\nBilling,\nTax,\nForeignTaxRecipient\nPlaceOfOperation,\nPlaceOfRegistration,\nMarketing, Statements, Business, Administrative, PreviousPlace, Headquarter, BranchStore, Property, Military, Secondary, Personal.\n"
          example: Billing
        primaryIndicator:
          $ref: '#/components/schemas/PrimaryContactIndicator'
        careOf:
          maxLength: 100
          minLength: 1
          type: string
          description: |
            Identifies an addressee that is accepting the correspondence for the intended recipient. Using care of ensures the correspondence reaches the right recipient rather than getting returned to the sender.
          example: C/O Company Name
        department:
          maxLength: 70
          minLength: 1
          type: string
          description: Identification of a division of a large Organization or building.
          example: A
        subDepartment:
          maxLength: 70
          minLength: 1
          type: string
          description: Identification of a sub-division of a large Organization or building.
          example: B
        streetName:
          maxLength: 70
          minLength: 1
          type: string
          description: Name of a street or thoroughfare.
          example: First Street
        firstCrossStreetName:
          maxLength: 70
          minLength: 1
          type: string
          description: Name of a the first cross street.
        secondCrossStreetName:
          maxLength: 70
          minLength: 1
          type: string
          description: Name of a the second cross street.
          example: Second Street
        buildingNumber:
          maxLength: 16
          minLength: 1
          type: string
          description: Number that identifies the position of a building or house on a street.
          example: "11407"
        buildingName:
          maxLength: 35
          minLength: 1
          type: string
          description: Name of the building or house.
          example: Tall Tower
        floor:
          maxLength: 70
          minLength: 1
          type: string
          description: Floor or storey within a building.
          example: "20"
        postBox:
          maxLength: 16
          minLength: 1
          type: string
          description: "Numbered box in a post office, assigned to a person or Organization, where letters are kept until called for."
          example: MY779
        room:
          maxLength: 70
          minLength: 1
          type: string
          description: Building room number.
          example: "22"
        postCode:
          $ref: '#/components/schemas/PostCode'
        carrierRoute:
          $ref: '#/components/schemas/CarrierRoute'
        censusTract:
          $ref: '#/components/schemas/CensusTract'
        censusBlock:
          $ref: '#/components/schemas/CensusBlock'
        cBSACode:
          $ref: '#/components/schemas/CBSACode'
        cBSAType:
          $ref: '#/components/schemas/CBSAType'
        foreignIndicator:
          type: boolean
          description: Indicates whether the postal address is from a foreign country.
        townName:
          $ref: '#/components/schemas/TownName'
        townLocationName:
          maxLength: 35
          minLength: 1
          type: string
          description: Specific location name within the town.
          example: Clackamas
        districtName:
          maxLength: 35
          minLength: 1
          type: string
          description: Identifies a subdivision within a country sub-division.
          example: Columbia
        countyName:
          maxLength: 35
          minLength: 1
          type: string
          description: Identifies a county within a country sub-division.
          example: Cook
        countrySubDivision:
          $ref: '#/components/schemas/CountrySubdivision'
        countrySubDivisionCode:
          $ref: '#/components/schemas/CountrySubdivisionCode'
        country:
          $ref: '#/components/schemas/CountryCode'
        addressLine:
          type: array
          description: "Information that locates and identifies a specific address, as defined by postal services, presented in free format text."
          items:
            maxLength: 70
            minLength: 1
            type: string
            example: "11407 Sw Amu st, Suite MY777"
        temporaryIndicator:
          type: boolean
          description: Indicates whether the address is temporary or not.
          example: true
        period:
          description: |
            The period of use of the address information. Could be also used as a recurring anual period.
          $ref: '#/components/schemas/DateTimePeriod'
        codes:
          type: array
          description: |
            Codes related to postal address or internal handling codes associated with the address. Possible Values: HandlingCode, HandlingCodeOption.
          items:
            $ref: '#/components/schemas/GenericCode'
        identifiers:
          type: array
          description: |
            Postal address identifiers are used to identify parties that share the same address or to associate an existing address with a specific party. Possible scheme name values: AddressIdentifier.
          items:
            $ref: '#/components/schemas/GenericIdentification'
      description: "An Address that belongs to an Address Book, a repository used to store contact information for individuals, businesses, organizations. \n"
    AddressRequest:
      type: object
      properties:
        parties:
          type: array
          description: Parties related to an address
          items:
            $ref: '#/components/schemas/AddressBookParty'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        postalAddresses:
          type: array
          items:
            $ref: '#/components/schemas/PostalAddress'
    AddressBookParty:
      type: object
      properties:
        partyId:
          $ref: '#/components/schemas/Id'
        partyType:
          $ref: '#/components/schemas/PartyType'
        partyName:
          $ref: '#/components/schemas/PartyName'
    Metadata_storage:
      type: object
      properties:
        deleteOption:
          type: string
      description: |
        Storage indication about a data.
    CreditTransfer:
      required:
        - amount
        - debtorAccountId
        - paymentMethod
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        amount:
          description: >
            Amount of money to be moved between the debtor and creditor,
            before deduction of charges, expressed in the currency as
            ordered by the initiating party.
          $ref: '#/components/schemas/Amount'
        paymentReasons:
          type: array
          items:
            $ref: '#/components/schemas/PaymentPurpose'
        debtorAccountId:
          $ref: '#/components/schemas/AccountId'
        creditorAccountId:
          $ref: '#/components/schemas/AccountId'
        purpose:
          $ref: '#/components/schemas/Description'
        paymentProcessing:
          $ref: '#/components/schemas/PaymentProcessingDetail'
        chargeBearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        currency:
          description: >
            Specifies the currency of the amount to be transferred which may
            be different from the currency of the debtor's account.
          $ref: '#/components/schemas/CurrencyCode'
        exchange:
          $ref: '#/components/schemas/Exchange'
        check:
          $ref: '#/components/schemas/Check'
        valueDate:
          description: |
            Date on which a payment must be executed
          $ref: '#/components/schemas/Date'
        dueDate:
          description: |
            The final deadline to make a payment to avoid penalties.
          $ref: '#/components/schemas/Date'
        creditor:
          $ref: '#/components/schemas/PartyIdentification'
        debtor:
          $ref: '#/components/schemas/PartyIdentification'
        remittanceInformation:
          $ref: '#/components/schemas/RemittanceInformation'
        settlement:
          $ref: '#/components/schemas/CreditTransferSettlement'
        paymentId:
          $ref: '#/components/schemas/PaymentId'
        status:
          $ref: '#/components/schemas/PaymentStatus'
        statusReason:
          $ref: '#/components/schemas/StatusReason'
        charges:
          type: array
          description: >
            All charges and taxes applied to the transaction. Also can include
            interests if the bank does not discrimate between them.
          items:
            $ref: '#/components/schemas/TransactionCharge'
        relatedAccounts:
          type: array
          description: Accounts involve in the payment chain.
          items:
            $ref: '#/components/schemas/RelatedAccount'
        parties:
          type: array
          description: Parties involve in the payment chain.
          items:
            $ref: '#/components/schemas/PaymentRelatedParty'
        balances:
          type: array
          description: Transfer balances involve in the payment chain
          items:
            $ref: '#/components/schemas/Balance'
        date:
          description: |
            Date and time on which the transfer is created.
          $ref: '#/components/schemas/DateAndTime'
    CreditTransferInitiation:
      required:
        - amount
        - debtorAccountId
        - paymentMethod
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        amount:
          description: >
            Amount of money to be moved between the debtor and creditor,
            before deduction of charges, expressed in the currency as
            ordered by the initiating party.
          $ref: '#/components/schemas/Amount'
        paymentReasons:
          type: array
          items:
            $ref: '#/components/schemas/PaymentPurpose'
        debtorAccountId:
          $ref: '#/components/schemas/AccountId'
        creditorAccountId:
          $ref: '#/components/schemas/AccountId'
        purpose:
          $ref: '#/components/schemas/Description'
        paymentProcessing:
          $ref: '#/components/schemas/PaymentProcessingDetail'
        chargeBearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        parties:
          type: array
          description: Parties involve in the payment chain.
          items:
            $ref: '#/components/schemas/PaymentRelatedParty'
        charges:
          type: array
          description: "All charges and taxes applied to the transaction. Also can include interests if the bank does not discrimate between them. \n"
          items:
            $ref: '#/components/schemas/TransactionCharge'
        currency:
          description: >
            Specifies the currency of the amount to be transferred which may
            be different from the currency of the debtor's account.
          $ref: '#/components/schemas/CurrencyCode'
        exchange:
          $ref: '#/components/schemas/Exchange'
        check:
          $ref: '#/components/schemas/Check'
        valueDate:
          description: |
            Date on which a payment must be executed
          $ref: '#/components/schemas/Date'
        dueDate:
          description: |
            The final deadline to make a payment to avoid penalties.
          $ref: '#/components/schemas/Date'
        creditor:
          $ref: '#/components/schemas/PartyIdentification'
        debtor:
          $ref: '#/components/schemas/PartyIdentification'
        remittanceInformation:
          $ref: '#/components/schemas/RemittanceInformation'
        settlement:
          $ref: '#/components/schemas/CreditTransferSettlement'
      description: >
        A credit transfer refers to the movement of monetary funds from one
        bank account to another. This can be done between accounts within
        the same financial institution or across different institutions.
        Payment made by transferring an amount of money from a debtor to a
        creditor. The payment flows through one or more financial
        institutions or systems.
    PaymentInitiation:
      required:
        - amount
        - debtorAccountId
        - paymentMethod
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        amount:
          description: >
            Amount of money to be moved between the debtor and creditor,
            before deduction of charges, expressed in the currency as
            ordered by the initiating party.
          $ref: '#/components/schemas/Amount'
        paymentReasons:
          type: array
          items:
            $ref: '#/components/schemas/PaymentPurpose'
        debtorAccountId:
          $ref: '#/components/schemas/AccountId'
        creditorAccountId:
          $ref: '#/components/schemas/AccountId'
        purpose:
          $ref: '#/components/schemas/Description'
        paymentProcessing:
          $ref: '#/components/schemas/PaymentProcessingDetail'
        chargeBearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        parties:
          type: array
          description: Parties involve in the payment chain.
          items:
            $ref: '#/components/schemas/PaymentRelatedParty'
        charges:
          type: array
          description: "All charges and taxes applied to the transaction. Also can include interests if the bank does not discrimate between them. \n"
          items:
            $ref: '#/components/schemas/TransactionCharge'
    CreditTransferSettlement:
      type: object
      properties:
        postingType:
          $ref: '#/components/schemas/PostingType'
        time:
          description: |
            Time of the day of the posting date.
          $ref: '#/components/schemas/TimeOfTheDay'
        frequency:
          $ref: '#/components/schemas/Frequency'
        memopostedIndicator:
          type: boolean
          description: |
            Indicates whether the internal transfer has been memoposted.
      description: Transfer settlement information.
    PaymentReport:
      type: object
      properties:
        paymentId:
          $ref: '#/components/schemas/PaymentId'
        status:
          $ref: '#/components/schemas/PaymentStatus'
        statusReason:
          $ref: '#/components/schemas/StatusReason'
        relatedAccounts:
          type: array
          description: Accounts involve in the payment chain.
          items:
            $ref: '#/components/schemas/RelatedAccount'
        balances:
          type: array
          description: Transfer balances involve in the payment chain
          items:
            $ref: '#/components/schemas/Balance'
    PaymentStatus:
      maxLength: 60
      minLength: 1
      type: string
      description: >
        Indicates the status of a payment. ISO Compliant values:

        AcceptedTechnicalValidation, Received, Rejected, Pending,
        AcceptedCustomerProfile, AcceptedSettlementInProcess,
        AcceptedSettlementCompleted, Accepted, AcceptedCancellationRequest,
        RejectedCancellationRequest, AcceptedWithChange,
        PendingCancellationRequest, AcceptedCreditSettlementCompleted,
        PaymentCancelled,
         AcceptedSettlementCompletedCreditorAccount, AcceptedCustomerProfile, AcceptedFundsChecked, AcceptedandChequeIssued, AcceptedSettlementCompletedDebitorAccount, AcceptedWithoutPosting, Blocked, CashPickedUpByCreditor, PartiallyAcceptedTechnicalCorrect, Presented, AcceptedClearingProcessed, ServicerDeadlineMissed
      example: AcceptedSettlementCompleted
    CreditTransferCancellationRequest:
      type: object
      properties:
        cancellationReason:
          $ref: '#/components/schemas/Description'
      description: |
        Request the cancellation of a credit transfer instruction.
    DirectDebitInitiation:
      required:
        - amount
        - debtorAccountId
        - paymentMethod
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        amount:
          description: >
            Amount of money to be moved between the debtor and creditor,
            before deduction of charges, expressed in the currency as
            ordered by the initiating party.
          $ref: '#/components/schemas/Amount'
        paymentReasons:
          type: array
          items:
            $ref: '#/components/schemas/PaymentPurpose'
        debtorAccountId:
          $ref: '#/components/schemas/AccountId'
        creditorAccountId:
          $ref: '#/components/schemas/AccountId'
        purpose:
          $ref: '#/components/schemas/Description'
        paymentProcessing:
          $ref: '#/components/schemas/PaymentProcessingDetail'
        chargeBearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        mandate:
          $ref: '#/components/schemas/DirectDebitMandate'
        requestedCollectionDate:
          description: >
            Date and time at which the creditor requests that the amount of
            money is to be collected from the debtor.
          $ref: '#/components/schemas/Date'
        debtor:
          $ref: '#/components/schemas/PartyIdentification'
      description: >
        Payment, initiated by the creditor, to debit a debtor's account in
        favour of the creditor. A direct debit can be pre-authorised or not.
        In most countries, authorisation is in the form of a mandate between
        the debtor and creditor. Here is an example of how a direct debit
        works:

        A debtor agrees to make regular payments to a creditor, such as a
        utility company or a lender.

        The debtor provides the creditor with authorization to collect the
        payments directly from the debtor's bank account.

        The creditor initiates the direct debit payment by submitting a
        request to the debtor's bank.

        The bank processes the request and transfers the funds from the
        debtor's account to the creditor's account.
    DirectDebitMandate:
      type: object
      properties:
        mandateId:
          $ref: '#/components/schemas/Id'
        dateOfSignature:
          $ref: '#/components/schemas/Date'
        digitalSignature:
          $ref: '#/components/schemas/DigitalSignature'
        firstCollectionDate:
          $ref: '#/components/schemas/Date'
        finalCollectionDate:
          $ref: '#/components/schemas/Date'
        frequency:
          $ref: '#/components/schemas/Frequency'
        trackingDays:
          $ref: '#/components/schemas/Day'
      description: >-
        Authorization in favour of the creditor given by the debtor to debit its
        own account. Provides details related to a direct debit mandate signed
        between the creditor and the debtor.
    DirectDebit:
      required:
        - amount
        - debtorAccountId
        - paymentMethod
      type: object
      properties:
        paymentId:
          $ref: '#/components/schemas/PaymentId'
        status:
          $ref: '#/components/schemas/PaymentStatus'
        statusReason:
          $ref: '#/components/schemas/StatusReason'
        charges:
          type: array
          description: >
            All charges and taxes applied to the transaction. Also can include
            interests if the bank does not discrimate between them.
          items:
            $ref: '#/components/schemas/TransactionCharge'
        relatedAccounts:
          type: array
          description: Accounts involve in the payment chain.
          items:
            $ref: '#/components/schemas/RelatedAccount'
        parties:
          type: array
          description: Parties involve in the payment chain.
          items:
            $ref: '#/components/schemas/AccountParty'
        balances:
          type: array
          description: Transfer balances involve in the payment chain
          items:
            $ref: '#/components/schemas/Balance'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        amount:
          description: >
            Amount of money to be moved between the debtor and creditor,
            before deduction of charges, expressed in the currency as
            ordered by the initiating party.
          $ref: '#/components/schemas/Amount'
        paymentReasons:
          type: array
          items:
            $ref: '#/components/schemas/PaymentPurpose'
        debtorAccountId:
          $ref: '#/components/schemas/AccountId'
        creditorAccountId:
          $ref: '#/components/schemas/AccountId'
        purpose:
          $ref: '#/components/schemas/Description'
        paymentProcessing:
          $ref: '#/components/schemas/PaymentProcessingDetail'
        chargeBearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        mandate:
          $ref: '#/components/schemas/DirectDebitMandate'
        requestedCollectionDate:
          description: >
            Date and time at which the creditor requests that the amount of
            money is to be collected from the debtor.
          $ref: '#/components/schemas/Date'
        debtor:
          $ref: '#/components/schemas/PartyIdentification'
    DirectDebitCancellationRequest:
      type: object
      properties:
        cancellationReason:
          $ref: '#/components/schemas/Description'
      description: |
        Request the cancellation of a credit transfer instruction.
    CreditorPaymentActivation:
      required:
        - amount
        - debtorAccountId
        - paymentMethod
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        amount:
          description: >
            Amount of money to be moved between the debtor and creditor,
            before deduction of charges, expressed in the currency as
            ordered by the initiating party.
          $ref: '#/components/schemas/Amount'
        paymentReasons:
          type: array
          items:
            $ref: '#/components/schemas/PaymentPurpose'
        debtorAccountId:
          $ref: '#/components/schemas/AccountId'
        creditorAccountId:
          $ref: '#/components/schemas/AccountId'
        purpose:
          $ref: '#/components/schemas/Description'
        paymentProcessing:
          $ref: '#/components/schemas/PaymentProcessingDetail'
        chargeBearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        currency:
          description: >
            Specifies the currency of the amount to be transferred which may
            be different from the currency of the debtor's account.
          $ref: '#/components/schemas/CurrencyCode'
        exchange:
          $ref: '#/components/schemas/Exchange'
        valueDate:
          description: |
            Date on which a payment must be executed.
          $ref: '#/components/schemas/Date'
        expirationDate:
          description: >
            Date by which the debtor must have accepted or rejected the
            request. Beyond this date, the request becomes void and cannot
            be processed anymore.
          $ref: '#/components/schemas/Date'
        creditor:
          $ref: '#/components/schemas/PartyIdentification'
        debtor:
          $ref: '#/components/schemas/PartyIdentification'
        remittanceInformation:
          $ref: '#/components/schemas/RemittanceInformation'
        paymentId:
          $ref: '#/components/schemas/PaymentId'
        status:
          $ref: '#/components/schemas/PaymentStatus'
        statusReason:
          $ref: '#/components/schemas/StatusReason'
        charges:
          type: array
          description: >
            All charges and taxes applied to the transaction. Also can include
            interests if the bank does not discrimate between them.
          items:
            $ref: '#/components/schemas/TransactionCharge'
        relatedAccounts:
          type: array
          description: Accounts involve in the payment chain.
          items:
            $ref: '#/components/schemas/RelatedAccount'
        parties:
          type: array
          description: Parties involve in the payment chain.
          items:
            $ref: '#/components/schemas/AccountParty'
        balances:
          type: array
          description: Transfer balances involve in the payment chain
          items:
            $ref: '#/components/schemas/Balance'
        date:
          description: |
            Date and time on which assets become available.
          $ref: '#/components/schemas/DateAndTime'
    CreditorPaymentActivationRequest:
      required:
        - amount
        - debtorAccountId
        - paymentMethod
      type: object
      properties:
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        codes:
          type: array
          description: Additional transaction codes.
          items:
            $ref: '#/components/schemas/GenericTransactionCode'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        amount:
          description: >
            Amount of money to be moved between the debtor and creditor,
            before deduction of charges, expressed in the currency as
            ordered by the initiating party.
          $ref: '#/components/schemas/Amount'
        paymentReasons:
          type: array
          items:
            $ref: '#/components/schemas/PaymentPurpose'
        debtorAccountId:
          $ref: '#/components/schemas/AccountId'
        creditorAccountId:
          $ref: '#/components/schemas/AccountId'
        purpose:
          $ref: '#/components/schemas/Description'
        paymentProcessing:
          $ref: '#/components/schemas/PaymentProcessingDetail'
        chargeBearerType:
          $ref: '#/components/schemas/ChargeBearerType'
        currency:
          description: >
            Specifies the currency of the amount to be transferred which may
            be different from the currency of the debtor's account.
          $ref: '#/components/schemas/CurrencyCode'
        exchange:
          $ref: '#/components/schemas/Exchange'
        valueDate:
          description: |
            Date on which a payment must be executed.
          $ref: '#/components/schemas/Date'
        expirationDate:
          description: >
            Date by which the debtor must have accepted or rejected the
            request. Beyond this date, the request becomes void and cannot
            be processed anymore.
          $ref: '#/components/schemas/Date'
        creditor:
          $ref: '#/components/schemas/PartyIdentification'
        debtor:
          $ref: '#/components/schemas/PartyIdentification'
        remittanceInformation:
          $ref: '#/components/schemas/RemittanceInformation'
      description: >
        Is used by a Creditor to request movement of funds from the debtor
        account to a creditor.
    AccountStandingOrderResponse:
      required:
        - accountId
        - accountNumber
        - accountType
        - ownershipType
        - standingOrders
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        standingOrders:
          type: array
          items:
            $ref: '#/components/schemas/StandingOrder'
    RightTimeCardPaymentRequest:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PositiveAmount'
        paymentDate:
          $ref: '#/components/schemas/DateAndTime'
        cardNumber:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        identifiers:
          type: array
          description: Payment identifification
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        paymentChannel:
          $ref: '#/components/schemas/CommunicationChannelName'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        codes:
          type: array
          description: >
            Codes to link the payment, with other systems or to classify the
            payment.
          items:
            $ref: '#/components/schemas/GenericCode'
      description: >
        Payment processed to temporarily adjust the member's credit and
        delinquency attributes without waiting for nightly processing.
    RightTimeCardPayment:
      description: >
        Payment processed to temporarily adjust the member's credit and
        delinquency attributes without waiting for nightly processing.
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PositiveAmount'
        paymentDate:
          $ref: '#/components/schemas/DateAndTime'
        cardNumber:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        identifiers:
          type: array
          description: Payment identifification
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        paymentChannel:
          $ref: '#/components/schemas/CommunicationChannelName'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        codes:
          type: array
          description: >
            Codes to link the payment, with other systems or to classify the
            payment.
          items:
            $ref: '#/components/schemas/GenericCode'
        paymentId:
          $ref: '#/components/schemas/PaymentId'
        status:
          $ref: '#/components/schemas/PaymentStatus'
    RightTimePaymentCancellationRequest:
      description: >
        Payment processed to temporarily adjust the member's credit and
        delinquency attributes without waiting for nightly processing.
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PositiveAmount'
        paymentDate:
          $ref: '#/components/schemas/DateAndTime'
        cardNumber:
          $ref: '#/components/schemas/PrimaryAccountNumber'
        identifiers:
          type: array
          description: Payment identifification
          items:
            $ref: '#/components/schemas/PaymentIdentification'
        paymentChannel:
          $ref: '#/components/schemas/CommunicationChannelName'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        codes:
          type: array
          description: >
            Codes to link the payment, with other systems or to classify the
            payment.
          items:
            $ref: '#/components/schemas/GenericCode'
        paymentId:
          $ref: '#/components/schemas/PaymentId'
    ExternalProviderAccountResponse:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/ExternalProviderAccount'
      description: >
        An external provider account refers to the process of creating a user
        account with a payment network provider that is linked to a system
        record account. This account allows the customer to access and use the
        provider's services. For instance: PayPoint.
    ExternalProviderAccount:
      description: >
        An external provider account refers to the process of creating a user
        account with a payment network provider. This account allows the
        customer to access and use the provider's services. For instance:
        PayPoint.
      type: object
      properties:
        accountBranchId:
          $ref: '#/components/schemas/ServicerBranchId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        routingNumbers:
          type: array
          items:
            $ref: '#/components/schemas/RoutingNumber'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/AccountIdentification'
        externalAccountId:
          description: |
            External Provider Account Id
          $ref: '#/components/schemas/Id'
        structuredName:
          $ref: '#/components/schemas/StructuredName'
        name:
          description: Customer complete name
          $ref: '#/components/schemas/PartyName'
        authorizationChannel:
          $ref: '#/components/schemas/CommunicationChannelName'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        agreedToTermsIndicator:
          type: boolean
          description: >-
            Indicates whether the customer agreed the terms of  third party
            payment company.
        codes:
          type: array
          description: >
            Codes related to the external provider account. Possible Values:
            LookUpReference
          items:
            $ref: '#/components/schemas/GenericCode'
    AccountPaymentResponse:
      required:
        - accountId
        - accountNumber
        - accountType
        - balances
        - ownershipType
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountNumber:
          $ref: '#/components/schemas/AccountNumber'
        accountType:
          $ref: '#/components/schemas/AccountType'
        ownershipType:
          $ref: '#/components/schemas/AccountOwnershipType'
        payment:
          type: array
          description: Account payment information provided on the response.
          items:
            $ref: '#/components/schemas/AccountPaymentDetails'
      description: |
        Account balance response
  parameters:
    servicerId:
      name: servicerId
      in: header
      description: Account Servicer Identification (Bank)
      required: false
      schema:
        $ref: '#/components/schemas/Id'
    servicerBranchId:
      name: servicerBranchId
      in: header
      description: Identification of the account servicer institution at branch level or center level.
      required: false
      schema:
        $ref: '#/components/schemas/ServicerBranchId'
    pageCursor:
      name: cursor
      in: query
      description: |
        Specifies an opaque string value ( "no  meaning" string value) at which start retrieving transactions. For instance, limit=5&cursor=62aef884fbe3470ce7d9a92140b09b17
      required: false
      schema:
        type: string
    pageLimit:
      name: limit
      in: query
      description: |
        Specifies the number of resources to return in one request, specified as an integer from 1 to 100.
      required: false
      schema:
        type: string
    pageFirstCursor:
      name: Pagination-Cursor
      in: header
      description: Pagination Cursor
      required: false
      schema:
        type: string
    pageTotal:
      name: Pagination-Total
      in: header
      description: |
        Total number of resources.
      required: false
      schema:
        type: string
    idempotencyId:
      name: idempotencyId
      in: header
      description: Idempotency identifier used by the client when making repeated calls
      required: false
      schema:
        $ref: '#/components/schemas/Id'
    validationMode:
      name: Core-Validation-Mode
      in: header
      description: |
        <ENFORCING|PERMISSIVE|DISABLED> Indicates how the API  validates requests against the core validation request policy.
         ENFORCING: The API validates all requests against the core validation request policy. The API only sends requests that pass validation to the back-end core service.
         PERMISSIVE: The API validates all requests against the validation request policy. The API sends all requests to the back-end service, regardless of whether they pass or fail the core validation.
         DISABLED: The API does not validate any requests against the validation request policy. The API gateway sends all requests to the core back-end service.
      required: false
      schema:
        type: string
    accountId:
      name: accountId
      in: path
      description: Account Identification
      required: true
      schema:
        $ref: '#/components/schemas/AccountId'
    holdId:
      name: holdId
      in: path
      description: Account Hold Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    formatMode:
      name: Core-Format-Mode
      in: header
      description: |
        <CARD_NUMBER_MASKED|CARD_NUMBER_NOT_MASKED|ID_NOT_MASKED|ID_MASKED|NOT_MASKED|MASKED|> Indicates the format of the API Response.
         CARD_NUMBER_MASKED: Card number masked.
         CARD_NUMBER_NOT_MASKED: Card number not masked.
         ID_NOT_MASKED: Identifiers not masked.
         ID_MASKED: Identifiers masked.
         NOT_MASKED: All fields not masked.
         MASKED: All masked.
      required: false
      schema:
        type: string
    personId:
      name: personId
      in: path
      description: Person Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    cardId:
      name: cardId
      in: path
      description: Card Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    organizationId:
      name: organizationId
      in: path
      description: Organization Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    productId:
      name: productId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/Id'
    relationshipId:
      name: relationshipId
      in: path
      description: Relationship Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    contentMode:
      name: Core-Content-Mode
      in: header
      description: "<SUMMARIZED|DETAILED> Indicates how the API requests the content against the core content capabilities. \n SUMMARIZED: Significant aspects of the content in detail.\n DETAILED: Expanded or enriched fields.\n"
      required: false
      schema:
        type: string
    loanId:
      name: loanId
      in: path
      description: Loan Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    transferId:
      name: transferId
      in: path
      description: Internal Transfer Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    programId:
      name: programId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/Id'
    documentId:
      name: documentId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/Id'
    addressId:
      name: addressId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/Id'
    paymentId:
      name: paymentId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        $ref: '#/components/schemas/PaymentId'
    externalAccountId:
      name: externalAccountId
      in: path
      description: External Account Identification
      required: true
      schema:
        $ref: '#/components/schemas/AccountId'
    standingOrderId:
      name: standingOrderId
      in: path
      description: Standing Order Identification
      required: true
      schema:
        $ref: '#/components/schemas/Id'
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
    openIdConnect:
      type: openIdConnect
      openIdConnectUrl: http://localhost:8083/auth/realms/openbanking/.well-known/openid-configuration
